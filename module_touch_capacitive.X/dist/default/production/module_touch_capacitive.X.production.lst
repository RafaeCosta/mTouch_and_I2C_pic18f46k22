

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Oct 15 09:09:01 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 1.45
    40                           ; Generated 16/11/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F46K22 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     _ANSELE	set	3900
    74  0000                     _ANSELD	set	3899
    75  0000                     _ANSELC	set	3898
    76  0000                     _ANSELB	set	3897
    77  0000                     _ANSELA	set	3896
    78  0000                     _ANSELCbits	set	3898
    79  0000                     _LATAbits	set	3977
    80  0000                     _LATEbits	set	3981
    81  0000                     _LATCbits	set	3979
    82  0000                     _T2CONbits	set	4026
    83  0000                     _T2CON	set	4026
    84  0000                     _PIE1bits	set	3997
    85  0000                     _PIR1bits	set	3998
    86  0000                     _TMR2	set	4028
    87  0000                     _PR2	set	4027
    88  0000                     _OSCTUNE	set	3995
    89  0000                     _OSCCON2	set	4050
    90  0000                     _OSCCON	set	4051
    91  0000                     _INTCONbits	set	4082
    92  0000                     _TRISE	set	3990
    93  0000                     _TRISD	set	3989
    94  0000                     _TRISC	set	3988
    95  0000                     _LATE	set	3981
    96  0000                     _LATD	set	3980
    97  0000                     _LATC	set	3979
    98  0000                     _ADCON2bits	set	4032
    99  0000                     _ADCON2	set	4032
   100  0000                     _ADCON1	set	4033
   101  0000                     _ADCON0	set	4034
   102  0000                     _ADRESL	set	4035
   103  0000                     _ADRESH	set	4036
   104  0000                     _ADCON0bits	set	4034
   105  0000                     _SSP1BUF	set	4041
   106  0000                     _PIR1	set	3998
   107  0000                     _TRISCbits	set	3988
   108  0000                     _SSP1STAT	set	4039
   109  0000                     _SSP1ADD	set	4040
   110  0000                     _SSP1CON3	set	4043
   111  0000                     _SSP1CON2	set	4037
   112  0000                     _SSP1CON1	set	4038
   113  0000                     _LATA	set	3977
   114  0000                     _TRISA	set	3986
   115  0000                     _LATB	set	3978
   116  0000                     _TRISB	set	3987
   117                           
   118                           ; #config settings
   119  0000                     
   120                           	psect	cinit
   121  000F48                     __pcinit:
   122                           	opt stack 0
   123  000F48                     start_initialization:
   124                           	opt stack 0
   125  000F48                     __initialization:
   126                           	opt stack 0
   127                           
   128                           ; Clear objects allocated to BANK1 (224 bytes)
   129  000F48  EE01  F000         	lfsr	0,__pbssBANK1
   130  000F4C  0EE0               	movlw	224
   131  000F4E                     clear_0:
   132  000F4E  6AEE               	clrf	postinc0,c
   133  000F50  06E8               	decf	wreg,f,c
   134  000F52  E1FD               	bnz	clear_0
   135                           
   136                           ; Clear objects allocated to BANK0 (56 bytes)
   137  000F54  EE00  F060         	lfsr	0,__pbssBANK0
   138  000F58  0E38               	movlw	56
   139  000F5A                     clear_1:
   140  000F5A  6AEE               	clrf	postinc0,c
   141  000F5C  06E8               	decf	wreg,f,c
   142  000F5E  E1FD               	bnz	clear_1
   143                           
   144                           ; Clear objects allocated to COMRAM (1 bytes)
   145  000F60  6A33               	clrf	__pbssCOMRAM& (0+255),c
   146  000F62                     end_of_initialization:
   147                           	opt stack 0
   148  000F62                     __end_of__initialization:
   149                           	opt stack 0
   150  000F62  9034               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   151  000F64  9234               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   152  000F66  0E00               	movlw	low (__Lmediumconst shr (0+16))
   153  000F68  6EF8               	movwf	tblptru,c
   154  000F6A  0100               	movlb	0
   155  000F6C  EFD3  F005         	goto	_main	;jump to C main() function
   156                           tblptru	equ	0xFF8
   157                           postinc0	equ	0xFEE
   158                           wreg	equ	0xFE8
   159                           
   160                           	psect	bssCOMRAM
   161  000033                     __pbssCOMRAM:
   162                           	opt stack 0
   163  000033                     MTouchAcquisition@startSensorNumber:
   164                           	opt stack 0
   165  000033                     	ds	1
   166                           tblptru	equ	0xFF8
   167                           postinc0	equ	0xFEE
   168                           wreg	equ	0xFE8
   169                           
   170                           	psect	bssBANK0
   171  000060                     __pbssBANK0:
   172                           	opt stack 0
   173  000060                     _buttons:
   174                           	opt stack 0
   175  000060                     	ds	56
   176                           tblptru	equ	0xFF8
   177                           postinc0	equ	0xFEE
   178                           wreg	equ	0xFE8
   179                           
   180                           	psect	bssBANK1
   181  000100                     __pbssBANK1:
   182                           	opt stack 0
   183  000100                     _sensors:
   184                           	opt stack 0
   185  000100                     	ds	224
   186                           tblptru	equ	0xFF8
   187                           postinc0	equ	0xFEE
   188                           wreg	equ	0xFE8
   189                           
   190                           	psect	cstackBANK0
   191  000098                     __pcstackBANK0:
   192                           	opt stack 0
   193  000098                     ?_I2C_Master_Init:
   194                           	opt stack 0
   195  000098                     ??_I2C_Master_Write:
   196  000098                     MTouchSetButton@sensorNumber:
   197                           	opt stack 0
   198  000098                     MTouchSetSensor@tris:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x0
   202  000098                     	ds	1
   203  000099                     MTouchSetButton@decode:
   204                           	opt stack 0
   205                           
   206                           ; 1 bytes @ 0x1
   207  000099                     	ds	1
   208  00009A                     ??_MTouchSetButton:
   209  00009A                     I2C_Master_Write@temp:
   210                           	opt stack 0
   211  00009A                     MTouchSetSensor@lat:
   212                           	opt stack 0
   213                           
   214                           ; 2 bytes @ 0x2
   215  00009A                     	ds	1
   216  00009B                     I2C_Master_Write@data:
   217                           	opt stack 0
   218                           
   219                           ; 1 bytes @ 0x3
   220  00009B                     	ds	1
   221  00009C                     MTouchSetButton@buttonNumber:
   222                           	opt stack 0
   223  00009C                     MTouchSetSensor@ioBitNumber:
   224                           	opt stack 0
   225  00009C                     MTouchDecodeButtons@pSensor:
   226                           	opt stack 0
   227                           
   228                           ; 2 bytes @ 0x4
   229  00009C                     	ds	1
   230  00009D                     MTouchSetSensor@channelNumber:
   231                           	opt stack 0
   232  00009D                     MTouchSetButton@pButton:
   233                           	opt stack 0
   234                           
   235                           ; 2 bytes @ 0x5
   236  00009D                     	ds	1
   237  00009E                     MTouchDecodeButtons@i:
   238                           	opt stack 0
   239  00009E                     MTouchSetSensor@threshold:
   240                           	opt stack 0
   241                           
   242                           ; 2 bytes @ 0x6
   243  00009E                     	ds	1
   244  00009F                     MTouchDecodeButtons@state:
   245                           	opt stack 0
   246                           
   247                           ; 1 bytes @ 0x7
   248  00009F                     	ds	1
   249  0000A0                     MTouchDecodeButtons@decode:
   250                           	opt stack 0
   251  0000A0                     MTouchSetSensor@oversampling:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x8
   255  0000A0                     	ds	1
   256  0000A1                     MTouchDecodeButtons@pMostPressedButton:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x9
   260  0000A1                     	ds	1
   261  0000A2                     MTouchSetSensor@chargeDelay:
   262                           	opt stack 0
   263                           
   264                           ; 1 bytes @ 0xA
   265  0000A2                     	ds	1
   266  0000A3                     ??_MTouchSetSensor:
   267  0000A3                     MTouchDecodeButtons@sensorState:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0xB
   271  0000A3                     	ds	1
   272  0000A4                     MTouchDecodeButtons@pButton:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0xC
   276  0000A4                     	ds	1
   277  0000A5                     MTouchSetSensor@sensorNumber:
   278                           	opt stack 0
   279                           
   280                           ; 1 bytes @ 0xD
   281  0000A5                     	ds	1
   282  0000A6                     MTouchSetSensor@pSensor:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0xE
   286  0000A6                     	ds	2
   287  0000A8                     tblptru	equ	0xFF8
   288                           postinc0	equ	0xFEE
   289                           wreg	equ	0xFE8
   290                           
   291                           ; 1 bytes @ 0x10
   292                           
   293                           	psect	cstackCOMRAM
   294  000001                     __pcstackCOMRAM:
   295                           	opt stack 0
   296  000001                     ?_MTouchAcquisitionCVD:
   297                           	opt stack 0
   298  000001                     MTouchAcquisitionCVD@pCurrentSensor:
   299                           	opt stack 0
   300  000001                     MTouchUpdateSensorAverage@pSensor:
   301                           	opt stack 0
   302                           
   303                           ; 2 bytes @ 0x0
   304  000001                     	ds	2
   305  000003                     MTouchAcquisitionCVD@pPreviousSensor:
   306                           	opt stack 0
   307  000003                     MTouchUpdateSensorAverage@rate:
   308                           	opt stack 0
   309                           
   310                           ; 2 bytes @ 0x2
   311  000003                     	ds	2
   312  000005                     ??_MTouchUpdateSensorAverage:
   313  000005                     ??_MTouchAcquisitionCVD:
   314                           
   315                           ; 1 bytes @ 0x4
   316  000005                     	ds	2
   317  000007                     MTouchAcquisitionCVD@result:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x6
   321  000007                     	ds	2
   322  000009                     MTouchAcquisitionCVD@prevTris:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x8
   326  000009                     	ds	1
   327  00000A                     MTouchSensorDecode@pSensor:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x9
   331  00000A                     	ds	1
   332  00000B                     MTouchAcquisitionCVD@prevChannelNumber:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0xA
   336  00000B                     	ds	1
   337  00000C                     ??_MTouchSensorDecode:
   338  00000C                     MTouchAcquisitionCVD@curChannelNumber:
   339                           	opt stack 0
   340                           
   341                           ; 1 bytes @ 0xB
   342  00000C                     	ds	1
   343  00000D                     MTouchAcquisitionCVD@prevLat:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0xC
   347  00000D                     	ds	2
   348  00000F                     MTouchAcquisitionCVD@curLat:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0xE
   352  00000F                     	ds	1
   353  000010                     MTouchSensorDecode@delta:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0xF
   357  000010                     	ds	1
   358  000011                     MTouchAcquisitionCVD@prevIOMask:
   359                           	opt stack 0
   360                           
   361                           ; 1 bytes @ 0x10
   362  000011                     	ds	1
   363  000012                     MTouchAcquisitionCVD@curTris:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x11
   367  000012                     	ds	2
   368  000014                     MTouchAcquisitionCVD@curIOMask:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0x13
   372  000014                     	ds	1
   373  000015                     ??_MTouchAcquisition:
   374                           
   375                           ; 1 bytes @ 0x14
   376  000015                     	ds	3
   377  000018                     MTouchAcquisition@data:
   378                           	opt stack 0
   379                           
   380                           ; 2 bytes @ 0x17
   381  000018                     	ds	2
   382  00001A                     MTouchAcquisition@pLastSensor:
   383                           	opt stack 0
   384                           
   385                           ; 2 bytes @ 0x19
   386  00001A                     	ds	2
   387  00001C                     MTouchAcquisition@pPreviousSensor:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0x1B
   391  00001C                     	ds	2
   392  00001E                     MTouchAcquisition@i:
   393                           	opt stack 0
   394                           
   395                           ; 1 bytes @ 0x1D
   396  00001E                     	ds	1
   397  00001F                     MTouchAcquisition@pCurrentSensor:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x1E
   401  00001F                     	ds	2
   402  000021                     ??_interrupcoes:
   403                           
   404                           ; 1 bytes @ 0x20
   405  000021                     	ds	18
   406                           tblptru	equ	0xFF8
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           
   410 ;;
   411 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   412 ;;
   413 ;; *************** function _main *****************
   414 ;; Defined at:
   415 ;;		line 23 in file "main.c"
   416 ;; Parameters:    Size  Location     Type
   417 ;;		None
   418 ;; Auto vars:     Size  Location     Type
   419 ;;		None
   420 ;; Return value:  Size  Location     Type
   421 ;;                  1    wreg      void 
   422 ;; Registers used:
   423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   424 ;; Tracked objects:
   425 ;;		On entry : 0/0
   426 ;;		On exit  : 0/0
   427 ;;		Unchanged: 0/0
   428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   433 ;;Total ram usage:        0 bytes
   434 ;; Hardware stack levels required when called:    7
   435 ;; This function calls:
   436 ;;		_I2C_Master_Init
   437 ;;		_I2C_Master_Start
   438 ;;		_I2C_Master_Stop
   439 ;;		_I2C_Master_Write
   440 ;;		_PIN_MANAGER_Initialize
   441 ;;		_TMR2_Initialize
   442 ;;		_configuration_mTouch
   443 ;;		_touch_step_5
   444 ;; This function is called by:
   445 ;;		Startup code after reset
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           	psect	text0
   450  000BA6                     __ptext0:
   451                           	opt stack 0
   452  000BA6                     _main:
   453                           	opt stack 24
   454                           
   455                           ;main.c: 24: PIN_MANAGER_Initialize();
   456                           
   457                           ;incstack = 0
   458  000BA6  EC64  F007         	call	_PIN_MANAGER_Initialize	;wreg free
   459                           
   460                           ;main.c: 25: TMR2_Initialize();
   461  000BAA  ECE0  F007         	call	_TMR2_Initialize	;wreg free
   462                           
   463                           ;main.c: 26: configuration_mTouch();
   464  000BAE  ECD7  F007         	call	_configuration_mTouch	;wreg free
   465                           
   466                           ;main.c: 27: I2C_Master_Init(100000);
   467  000BB2  0EA0               	movlw	160
   468  000BB4  0100               	movlb	0	; () banked
   469  000BB6  6F98               	movwf	?_I2C_Master_Init& (0+255),b
   470  000BB8  0E86               	movlw	134
   471  000BBA  6F99               	movwf	(?_I2C_Master_Init+1)& (0+255),b
   472  000BBC  0E01               	movlw	1
   473  000BBE  6F9A               	movwf	(?_I2C_Master_Init+2)& (0+255),b
   474  000BC0  0E00               	movlw	0
   475  000BC2  6F9B               	movwf	(?_I2C_Master_Init+3)& (0+255),b
   476  000BC4  ECC8  F007         	call	_I2C_Master_Init	;wreg free
   477  000BC8                     
   478                           ;main.c: 30: touch_step_5();
   479  000BC8  ECF3  F007         	call	_touch_step_5	;wreg free
   480                           
   481                           ;main.c: 32: if((buttons[0].state) == CONTROL_PRESSED) {
   482  000BCC  0100               	movlb	0	; () banked
   483  000BCE  0560               	decf	_buttons& (0+255),w,b
   484  000BD0  A4D8               	btfss	status,2,c
   485  000BD2  D010               	goto	l309
   486                           
   487                           ; BSR set to: 0
   488                           ;main.c: 33: if(!LATCbits.LATC1 == 1? 1:0){
   489  000BD4  B28B               	btfsc	3979,1,c	;volatile
   490  000BD6  D00F               	goto	l311
   491                           
   492                           ; BSR set to: 0
   493                           ;main.c: 34: {LATCbits.LATC1 = 1;};
   494  000BD8  828B               	bsf	3979,1,c	;volatile
   495                           
   496                           ; BSR set to: 0
   497                           ;main.c: 35: I2C_Master_Init();
   498  000BDA  ECC8  F007         	call	_I2C_Master_Init	;wreg free
   499                           
   500                           ;main.c: 36: (void)I2C_Master_Start();
   501  000BDE  ECE9  F007         	call	_I2C_Master_Start	;wreg free
   502                           
   503                           ;main.c: 37: (void)I2C_Master_Write((0x08 << 1) | 0b00000000);
   504  000BE2  0E10               	movlw	16
   505  000BE4  EC8D  F007         	call	_I2C_Master_Write
   506                           
   507                           ;main.c: 38: (void)I2C_Master_Write(0);
   508  000BE8  0E00               	movlw	0
   509  000BEA  EC8D  F007         	call	_I2C_Master_Write
   510                           
   511                           ;main.c: 39: I2C_Master_Stop();
   512  000BEE  ECEF  F007         	call	_I2C_Master_Stop	;wreg free
   513                           
   514                           ;main.c: 40: }
   515                           ;main.c: 41: }
   516  000BF2  D001               	goto	l311
   517  000BF4                     l309:
   518                           
   519                           ; BSR set to: 0
   520                           ;main.c: 42: else{
   521                           ;main.c: 43: {LATCbits.LATC1 = 0;};
   522  000BF4  928B               	bcf	3979,1,c	;volatile
   523  000BF6                     l311:
   524                           
   525                           ;main.c: 44: }
   526                           ;main.c: 45: if((buttons[1].state) == CONTROL_PRESSED) {
   527                           
   528                           ; BSR set to: 0
   529  000BF6  0100               	movlb	0	; () banked
   530  000BF8  0568               	decf	(_buttons+8)& (0+255),w,b
   531  000BFA  A4D8               	btfss	status,2,c
   532  000BFC  D010               	goto	l312
   533                           
   534                           ; BSR set to: 0
   535                           ;main.c: 46: if(!LATCbits.LATC2 == 1? 1:0){
   536  000BFE  B48B               	btfsc	3979,2,c	;volatile
   537  000C00  D00F               	goto	l314
   538                           
   539                           ; BSR set to: 0
   540                           ;main.c: 47: {LATCbits.LATC2 = 1;};
   541  000C02  848B               	bsf	3979,2,c	;volatile
   542                           
   543                           ; BSR set to: 0
   544                           ;main.c: 48: I2C_Master_Init();
   545  000C04  ECC8  F007         	call	_I2C_Master_Init	;wreg free
   546                           
   547                           ;main.c: 49: (void)I2C_Master_Start();
   548  000C08  ECE9  F007         	call	_I2C_Master_Start	;wreg free
   549                           
   550                           ;main.c: 50: (void)I2C_Master_Write((0x08 << 1) | 0b00000000);
   551  000C0C  0E10               	movlw	16
   552  000C0E  EC8D  F007         	call	_I2C_Master_Write
   553                           
   554                           ;main.c: 51: (void)I2C_Master_Write(1);
   555  000C12  0E01               	movlw	1
   556  000C14  EC8D  F007         	call	_I2C_Master_Write
   557                           
   558                           ;main.c: 52: I2C_Master_Stop();
   559  000C18  ECEF  F007         	call	_I2C_Master_Stop	;wreg free
   560                           
   561                           ;main.c: 53: }
   562                           ;main.c: 54: }
   563  000C1C  D001               	goto	l314
   564  000C1E                     l312:
   565                           
   566                           ; BSR set to: 0
   567                           ;main.c: 55: else{
   568                           ;main.c: 56: {LATCbits.LATC2 = 0;};
   569  000C1E  948B               	bcf	3979,2,c	;volatile
   570  000C20                     l314:
   571                           
   572                           ;main.c: 57: }
   573                           ;main.c: 58: if((buttons[2].state) == CONTROL_PRESSED) {
   574                           
   575                           ; BSR set to: 0
   576  000C20  0100               	movlb	0	; () banked
   577  000C22  0570               	decf	(_buttons+16)& (0+255),w,b
   578  000C24  A4D8               	btfss	status,2,c
   579  000C26  D010               	goto	l315
   580                           
   581                           ; BSR set to: 0
   582                           ;main.c: 59: if(!LATCbits.LATC0 == 1? 1:0){
   583  000C28  B08B               	btfsc	3979,0,c	;volatile
   584  000C2A  D00F               	goto	l317
   585                           
   586                           ; BSR set to: 0
   587                           ;main.c: 60: {LATCbits.LATC0 = 1;};
   588  000C2C  808B               	bsf	3979,0,c	;volatile
   589                           
   590                           ; BSR set to: 0
   591                           ;main.c: 61: I2C_Master_Init();
   592  000C2E  ECC8  F007         	call	_I2C_Master_Init	;wreg free
   593                           
   594                           ;main.c: 62: (void)I2C_Master_Start();
   595  000C32  ECE9  F007         	call	_I2C_Master_Start	;wreg free
   596                           
   597                           ;main.c: 63: (void)I2C_Master_Write((0x08 << 1) | 0b00000000);
   598  000C36  0E10               	movlw	16
   599  000C38  EC8D  F007         	call	_I2C_Master_Write
   600                           
   601                           ;main.c: 64: (void)I2C_Master_Write(2);
   602  000C3C  0E02               	movlw	2
   603  000C3E  EC8D  F007         	call	_I2C_Master_Write
   604                           
   605                           ;main.c: 65: I2C_Master_Stop();
   606  000C42  ECEF  F007         	call	_I2C_Master_Stop	;wreg free
   607                           
   608                           ;main.c: 66: }
   609                           ;main.c: 67: }
   610  000C46  D001               	goto	l317
   611  000C48                     l315:
   612                           
   613                           ; BSR set to: 0
   614                           ;main.c: 68: else{
   615                           ;main.c: 69: {LATCbits.LATC0 = 0;};
   616  000C48  908B               	bcf	3979,0,c	;volatile
   617  000C4A                     l317:
   618                           
   619                           ;main.c: 70: }
   620                           ;main.c: 71: if((buttons[3].state) == CONTROL_PRESSED) {
   621                           
   622                           ; BSR set to: 0
   623  000C4A  0100               	movlb	0	; () banked
   624  000C4C  0578               	decf	(_buttons+24)& (0+255),w,b
   625  000C4E  A4D8               	btfss	status,2,c
   626  000C50  D010               	goto	l318
   627                           
   628                           ; BSR set to: 0
   629                           ;main.c: 72: if(!LATEbits.LATE1 == 1? 1:0){
   630  000C52  B28D               	btfsc	3981,1,c	;volatile
   631  000C54  D00F               	goto	l320
   632                           
   633                           ; BSR set to: 0
   634                           ;main.c: 73: {LATEbits.LATE1 = 1;};
   635  000C56  828D               	bsf	3981,1,c	;volatile
   636                           
   637                           ; BSR set to: 0
   638                           ;main.c: 74: I2C_Master_Init();
   639  000C58  ECC8  F007         	call	_I2C_Master_Init	;wreg free
   640                           
   641                           ;main.c: 75: (void)I2C_Master_Start();
   642  000C5C  ECE9  F007         	call	_I2C_Master_Start	;wreg free
   643                           
   644                           ;main.c: 76: (void)I2C_Master_Write((0x08 << 1) | 0b00000000);
   645  000C60  0E10               	movlw	16
   646  000C62  EC8D  F007         	call	_I2C_Master_Write
   647                           
   648                           ;main.c: 77: (void)I2C_Master_Write(3);
   649  000C66  0E03               	movlw	3
   650  000C68  EC8D  F007         	call	_I2C_Master_Write
   651                           
   652                           ;main.c: 78: I2C_Master_Stop();
   653  000C6C  ECEF  F007         	call	_I2C_Master_Stop	;wreg free
   654                           
   655                           ;main.c: 79: }
   656                           ;main.c: 80: }
   657  000C70  D001               	goto	l320
   658  000C72                     l318:
   659                           
   660                           ; BSR set to: 0
   661                           ;main.c: 81: else{
   662                           ;main.c: 82: {LATEbits.LATE1 = 0;};
   663  000C72  928D               	bcf	3981,1,c	;volatile
   664  000C74                     l320:
   665                           
   666                           ;main.c: 83: }
   667                           ;main.c: 84: if((buttons[4].state) == CONTROL_PRESSED) {
   668                           
   669                           ; BSR set to: 0
   670  000C74  0100               	movlb	0	; () banked
   671  000C76  0580               	decf	(_buttons+32)& (0+255),w,b
   672  000C78  A4D8               	btfss	status,2,c
   673  000C7A  D010               	goto	l321
   674                           
   675                           ; BSR set to: 0
   676                           ;main.c: 85: if(!LATEbits.LATE0 == 1? 1:0){
   677  000C7C  B08D               	btfsc	3981,0,c	;volatile
   678  000C7E  D00F               	goto	l323
   679                           
   680                           ; BSR set to: 0
   681                           ;main.c: 86: {LATEbits.LATE0 = 1;};
   682  000C80  808D               	bsf	3981,0,c	;volatile
   683                           
   684                           ; BSR set to: 0
   685                           ;main.c: 87: I2C_Master_Init();
   686  000C82  ECC8  F007         	call	_I2C_Master_Init	;wreg free
   687                           
   688                           ;main.c: 88: (void)I2C_Master_Start();
   689  000C86  ECE9  F007         	call	_I2C_Master_Start	;wreg free
   690                           
   691                           ;main.c: 89: (void)I2C_Master_Write((0x08 << 1) | 0b00000000);
   692  000C8A  0E10               	movlw	16
   693  000C8C  EC8D  F007         	call	_I2C_Master_Write
   694                           
   695                           ;main.c: 90: (void)I2C_Master_Write(4);
   696  000C90  0E04               	movlw	4
   697  000C92  EC8D  F007         	call	_I2C_Master_Write
   698                           
   699                           ;main.c: 91: I2C_Master_Stop();
   700  000C96  ECEF  F007         	call	_I2C_Master_Stop	;wreg free
   701                           
   702                           ;main.c: 92: }
   703                           ;main.c: 93: }
   704  000C9A  D001               	goto	l323
   705  000C9C                     l321:
   706                           
   707                           ; BSR set to: 0
   708                           ;main.c: 94: else{
   709                           ;main.c: 95: {LATEbits.LATE0 = 0;};
   710  000C9C  908D               	bcf	3981,0,c	;volatile
   711  000C9E                     l323:
   712                           
   713                           ;main.c: 96: }
   714                           ;main.c: 97: if((buttons[5].state) == CONTROL_PRESSED) {
   715                           
   716                           ; BSR set to: 0
   717  000C9E  0100               	movlb	0	; () banked
   718  000CA0  0588               	decf	(_buttons+40)& (0+255),w,b
   719  000CA2  A4D8               	btfss	status,2,c
   720  000CA4  D010               	goto	l324
   721                           
   722                           ; BSR set to: 0
   723                           ;main.c: 98: if(!LATEbits.LATE2 == 1? 1:0){
   724  000CA6  B48D               	btfsc	3981,2,c	;volatile
   725  000CA8  D00F               	goto	l326
   726                           
   727                           ; BSR set to: 0
   728                           ;main.c: 99: {LATEbits.LATE2 = 1;};
   729  000CAA  848D               	bsf	3981,2,c	;volatile
   730                           
   731                           ; BSR set to: 0
   732                           ;main.c: 100: I2C_Master_Init();
   733  000CAC  ECC8  F007         	call	_I2C_Master_Init	;wreg free
   734                           
   735                           ;main.c: 101: (void)I2C_Master_Start();
   736  000CB0  ECE9  F007         	call	_I2C_Master_Start	;wreg free
   737                           
   738                           ;main.c: 102: (void)I2C_Master_Write((0x08 << 1) | 0b00000000);
   739  000CB4  0E10               	movlw	16
   740  000CB6  EC8D  F007         	call	_I2C_Master_Write
   741                           
   742                           ;main.c: 103: (void)I2C_Master_Write(5);
   743  000CBA  0E05               	movlw	5
   744  000CBC  EC8D  F007         	call	_I2C_Master_Write
   745                           
   746                           ;main.c: 104: I2C_Master_Stop();
   747  000CC0  ECEF  F007         	call	_I2C_Master_Stop	;wreg free
   748                           
   749                           ;main.c: 105: }
   750                           ;main.c: 106: }
   751  000CC4  D001               	goto	l326
   752  000CC6                     l324:
   753                           
   754                           ; BSR set to: 0
   755                           ;main.c: 107: else{
   756                           ;main.c: 108: {LATEbits.LATE2 = 0;};
   757  000CC6  948D               	bcf	3981,2,c	;volatile
   758  000CC8                     l326:
   759                           
   760                           ;main.c: 109: }
   761                           ;main.c: 110: if((buttons[6].state) == CONTROL_PRESSED) {
   762                           
   763                           ; BSR set to: 0
   764  000CC8  0100               	movlb	0	; () banked
   765  000CCA  0590               	decf	(_buttons+48)& (0+255),w,b
   766  000CCC  A4D8               	btfss	status,2,c
   767  000CCE  D010               	goto	l327
   768                           
   769                           ; BSR set to: 0
   770                           ;main.c: 111: if(!LATAbits.LATA4 == 1? 1:0){
   771  000CD0  B889               	btfsc	3977,4,c	;volatile
   772  000CD2  D77A               	goto	l308
   773                           
   774                           ; BSR set to: 0
   775                           ;main.c: 112: {LATAbits.LATA4 = 1;};
   776  000CD4  8889               	bsf	3977,4,c	;volatile
   777                           
   778                           ; BSR set to: 0
   779                           ;main.c: 113: I2C_Master_Init();
   780  000CD6  ECC8  F007         	call	_I2C_Master_Init	;wreg free
   781                           
   782                           ;main.c: 114: (void)I2C_Master_Start();
   783  000CDA  ECE9  F007         	call	_I2C_Master_Start	;wreg free
   784                           
   785                           ;main.c: 115: (void)I2C_Master_Write((0x08 << 1) | 0b00000000);
   786  000CDE  0E10               	movlw	16
   787  000CE0  EC8D  F007         	call	_I2C_Master_Write
   788                           
   789                           ;main.c: 116: (void)I2C_Master_Write(6);
   790  000CE4  0E06               	movlw	6
   791  000CE6  EC8D  F007         	call	_I2C_Master_Write
   792                           
   793                           ;main.c: 117: I2C_Master_Stop();
   794  000CEA  ECEF  F007         	call	_I2C_Master_Stop	;wreg free
   795                           
   796                           ;main.c: 118: }
   797                           ;main.c: 119: }
   798  000CEE  D76C               	goto	l308
   799  000CF0                     l327:
   800                           
   801                           ; BSR set to: 0
   802                           ;main.c: 120: else{
   803                           ;main.c: 121: {LATAbits.LATA4 = 0;};
   804  000CF0  9889               	bcf	3977,4,c	;volatile
   805                           
   806                           ; BSR set to: 0
   807                           
   808                           ; BSR set to: 0
   809  000CF2  D76A               	goto	l308
   810  000CF4                     __end_of_main:
   811                           	opt stack 0
   812                           tblptru	equ	0xFF8
   813                           postinc0	equ	0xFEE
   814                           wreg	equ	0xFE8
   815                           status	equ	0xFD8
   816                           
   817 ;; *************** function _touch_step_5 *****************
   818 ;; Defined at:
   819 ;;		line 66 in file "includes/configtouch/myConfigTouch.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;		None
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      void 
   826 ;; Registers used:
   827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   837 ;;Total ram usage:        0 bytes
   838 ;; Hardware stack levels used:    1
   839 ;; Hardware stack levels required when called:    6
   840 ;; This function calls:
   841 ;;		_MTouchDecode
   842 ;; This function is called by:
   843 ;;		_main
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847                           	psect	text1
   848  000FE6                     __ptext1:
   849                           	opt stack 0
   850  000FE6                     _touch_step_5:
   851                           	opt stack 24
   852                           
   853                           ;myConfigTouch.c: 69: MTouchDecode();
   854                           
   855                           ; BSR set to: 0
   856                           ;incstack = 0
   857  000FE6  ECF6  F007         	call	_MTouchDecode	;wreg free
   858  000FEA  0012               	return		;funcret
   859  000FEC                     __end_of_touch_step_5:
   860                           	opt stack 0
   861                           tblptru	equ	0xFF8
   862                           postinc0	equ	0xFEE
   863                           wreg	equ	0xFE8
   864                           status	equ	0xFD8
   865                           
   866 ;; *************** function _MTouchDecode *****************
   867 ;; Defined at:
   868 ;;		line 58 in file "includes/mtouch/mTouchControl.c"
   869 ;; Parameters:    Size  Location     Type
   870 ;;		None
   871 ;; Auto vars:     Size  Location     Type
   872 ;;		None
   873 ;; Return value:  Size  Location     Type
   874 ;;                  1    wreg      void 
   875 ;; Registers used:
   876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   877 ;; Tracked objects:
   878 ;;		On entry : 0/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   886 ;;Total ram usage:        0 bytes
   887 ;; Hardware stack levels used:    1
   888 ;; Hardware stack levels required when called:    5
   889 ;; This function calls:
   890 ;;		_MTouchDecodeButtons
   891 ;; This function is called by:
   892 ;;		_touch_step_5
   893 ;; This function uses a non-reentrant model
   894 ;;
   895                           
   896                           	psect	text2
   897  000FEC                     __ptext2:
   898                           	opt stack 0
   899  000FEC                     _MTouchDecode:
   900                           	opt stack 24
   901                           
   902                           ;mTouchControl.c: 61: MTouchDecodeButtons();
   903                           
   904                           ;incstack = 0
   905  000FEC  ECAF  F001         	call	_MTouchDecodeButtons	;wreg free
   906  000FF0  0012               	return		;funcret
   907  000FF2                     __end_of_MTouchDecode:
   908                           	opt stack 0
   909                           tblptru	equ	0xFF8
   910                           postinc0	equ	0xFEE
   911                           wreg	equ	0xFE8
   912                           status	equ	0xFD8
   913                           
   914 ;; *************** function _MTouchDecodeButtons *****************
   915 ;; Defined at:
   916 ;;		line 82 in file "includes/mtouch/mTouchButton.c"
   917 ;; Parameters:    Size  Location     Type
   918 ;;		None
   919 ;; Auto vars:     Size  Location     Type
   920 ;;  pButton         2   12[BANK0 ] PTR struct tag_MTOUCHBUT
   921 ;;		 -> buttons(56), 
   922 ;;  pMostPressed    2    9[BANK0 ] PTR struct tag_MTOUCHBUT
   923 ;;		 -> NULL(0), buttons(56), 
   924 ;;  pSensor         2    4[BANK0 ] PTR struct tag_SENSOR
   925 ;;		 -> sensors(224), 
   926 ;;  sensorState     1   11[BANK0 ] unsigned char 
   927 ;;  decode          1    8[BANK0 ] unsigned char 
   928 ;;  state           1    7[BANK0 ] unsigned char 
   929 ;;  i               1    6[BANK0 ] unsigned char 
   930 ;; Return value:  Size  Location     Type
   931 ;;                  1    wreg      void 
   932 ;; Registers used:
   933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   940 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   941 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   942 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   943 ;;Total ram usage:       14 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; Hardware stack levels required when called:    4
   946 ;; This function calls:
   947 ;;		Nothing
   948 ;; This function is called by:
   949 ;;		_MTouchDecode
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           	psect	text3
   954  00035E                     __ptext3:
   955                           	opt stack 0
   956  00035E                     _MTouchDecodeButtons:
   957                           	opt stack 24
   958                           
   959                           ;mTouchButton.c: 85: MTOUCHBUTTON* pButton = (MTOUCHBUTTON*)buttons;
   960                           
   961                           ;incstack = 0
   962  00035E  0E60               	movlw	low _buttons
   963  000360  0100               	movlb	0	; () banked
   964  000362  6FA4               	movwf	MTouchDecodeButtons@pButton& (0+255),b
   965  000364  0E00               	movlw	high _buttons
   966  000366  6FA5               	movwf	(MTouchDecodeButtons@pButton+1)& (0+255),b
   967                           
   968                           ;mTouchButton.c: 87: MTOUCHBUTTON* pMostPressedButton = (0);
   969  000368  0E00               	movlw	0
   970  00036A  6FA1               	movwf	MTouchDecodeButtons@pMostPressedButton& (0+255),b
   971  00036C  0E00               	movlw	0
   972  00036E  6FA2               	movwf	(MTouchDecodeButtons@pMostPressedButton+1)& (0+255),b
   973                           
   974                           ; BSR set to: 0
   975                           ;mTouchButton.c: 89: SENSOR* pSensor;
   976                           ;mTouchButton.c: 91: UINT8 i;
   977                           ;mTouchButton.c: 93: UINT8 sensorState;
   978                           ;mTouchButton.c: 95: UINT8 decode;
   979                           ;mTouchButton.c: 97: UINT8 state;
   980                           ;mTouchButton.c: 99: for(i=0; i<7; i++)
   981  000370  0E00               	movlw	0
   982  000372  6F9E               	movwf	MTouchDecodeButtons@i& (0+255),b
   983  000374                     l1618:
   984                           
   985                           ; BSR set to: 0
   986  000374  0E06               	movlw	6
   987  000376  659E               	cpfsgt	MTouchDecodeButtons@i& (0+255),b
   988  000378  D001               	goto	l105
   989  00037A  D0F7               	goto	u820
   990  00037C                     l105:
   991                           
   992                           ; BSR set to: 0
   993                           ;mTouchButton.c: 100: {
   994                           ;mTouchButton.c: 102: pSensor = pButton->pSensor;
   995                           
   996                           ; BSR set to: 0
   997  00037C  EE20 F004          	lfsr	2,4
   998  000380  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
   999  000382  26D9               	addwf	fsr2l,f,c
  1000  000384  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1001  000386  22DA               	addwfc	fsr2h,f,c
  1002  000388  CFDE F09C          	movff	postinc2,MTouchDecodeButtons@pSensor
  1003  00038C  CFDD F09D          	movff	postdec2,MTouchDecodeButtons@pSensor+1
  1004                           
  1005                           ;mTouchButton.c: 104: sensorState = pSensor->state;
  1006  000390  EE20 F01C          	lfsr	2,28
  1007  000394  519C               	movf	MTouchDecodeButtons@pSensor& (0+255),w,b
  1008  000396  26D9               	addwf	fsr2l,f,c
  1009  000398  519D               	movf	(MTouchDecodeButtons@pSensor+1)& (0+255),w,b
  1010  00039A  22DA               	addwfc	fsr2h,f,c
  1011  00039C  50DF               	movf	indf2,w,c
  1012  00039E  6FA3               	movwf	MTouchDecodeButtons@sensorState& (0+255),b
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;mTouchButton.c: 106: if(sensorState != SENSOR_INITIALIZING)
  1016  0003A0  51A3               	movf	MTouchDecodeButtons@sensorState& (0+255),w,b
  1017  0003A2  B4D8               	btfsc	status,2,c
  1018  0003A4  D0DC               	goto	l129
  1019                           
  1020                           ; BSR set to: 0
  1021                           ;mTouchButton.c: 107: {
  1022                           ;mTouchButton.c: 108: decode = pButton->decode;
  1023  0003A6  EE20 F002          	lfsr	2,2
  1024  0003AA  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1025  0003AC  26D9               	addwf	fsr2l,f,c
  1026  0003AE  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1027  0003B0  22DA               	addwfc	fsr2h,f,c
  1028  0003B2  50DF               	movf	indf2,w,c
  1029  0003B4  6FA0               	movwf	MTouchDecodeButtons@decode& (0+255),b
  1030                           
  1031                           ;mTouchButton.c: 110: state = pButton->curState;
  1032  0003B6  EE20 F001          	lfsr	2,1
  1033  0003BA  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1034  0003BC  26D9               	addwf	fsr2l,f,c
  1035  0003BE  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1036  0003C0  22DA               	addwfc	fsr2h,f,c
  1037  0003C2  50DF               	movf	indf2,w,c
  1038  0003C4  6F9F               	movwf	MTouchDecodeButtons@state& (0+255),b
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;mTouchButton.c: 112: if(decode&DECODE_PRESS_REPEAT)
  1042  0003C6  A7A0               	btfss	MTouchDecodeButtons@decode& (0+255),3,b
  1043  0003C8  D044               	goto	l110
  1044                           
  1045                           ; BSR set to: 0
  1046                           ;mTouchButton.c: 113: {
  1047                           ;mTouchButton.c: 115: if(state == CONTROL_RELEASED)
  1048  0003CA  0E02               	movlw	2
  1049  0003CC  199F               	xorwf	MTouchDecodeButtons@state& (0+255),w,b
  1050  0003CE  A4D8               	btfss	status,2,c
  1051  0003D0  D00B               	goto	l109
  1052                           
  1053                           ; BSR set to: 0
  1054                           ;mTouchButton.c: 116: {
  1055                           ;mTouchButton.c: 117: pButton->pressCounter = 100;
  1056  0003D2  EE20 F006          	lfsr	2,6
  1057  0003D6  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1058  0003D8  26D9               	addwf	fsr2l,f,c
  1059  0003DA  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1060  0003DC  22DA               	addwfc	fsr2h,f,c
  1061  0003DE  0E64               	movlw	100
  1062  0003E0  6EDE               	movwf	postinc2,c
  1063  0003E2  0E00               	movlw	0
  1064  0003E4  6EDD               	movwf	postdec2,c
  1065                           
  1066                           ;mTouchButton.c: 119: }else{
  1067  0003E6  D035               	goto	l110
  1068  0003E8                     l109:
  1069                           
  1070                           ; BSR set to: 0
  1071                           ;mTouchButton.c: 121: if(pButton->pressCounter > 0)
  1072                           
  1073                           ; BSR set to: 0
  1074  0003E8  EE20 F006          	lfsr	2,6
  1075  0003EC  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1076  0003EE  26D9               	addwf	fsr2l,f,c
  1077  0003F0  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1078  0003F2  22DA               	addwfc	fsr2h,f,c
  1079  0003F4  0E01               	movlw	1
  1080  0003F6  BEDB               	btfsc	plusw2,7,c
  1081  0003F8  D008               	goto	l111
  1082  0003FA  0E01               	movlw	1
  1083  0003FC  50DB               	movf	plusw2,w,c
  1084  0003FE  E103               	bnz	u690
  1085  000400  04DE               	decf	postinc2,w,c
  1086  000402  A0D8               	btfss	status,0,c
  1087  000404  D002               	goto	l111
  1088  000406                     u690:
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;mTouchButton.c: 122: {
  1092                           ;mTouchButton.c: 123: state = CONTROL_PRESSED;
  1093  000406  0E01               	movlw	1
  1094  000408  D001               	goto	L1
  1095  00040A                     l111:
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;mTouchButton.c: 125: state = CONTROL_RELEASED;
  1099                           
  1100                           ; BSR set to: 0
  1101  00040A  0E02               	movlw	2
  1102  00040C                     L1:
  1103  00040C  6F9F               	movwf	MTouchDecodeButtons@state& (0+255),b
  1104                           
  1105                           ; BSR set to: 0
  1106                           ;mTouchButton.c: 126: }
  1107                           ;mTouchButton.c: 128: if(pButton->pressCounter < -20)
  1108                           
  1109                           ; BSR set to: 0
  1110  00040E  EE20 F006          	lfsr	2,6
  1111  000412  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1112  000414  26D9               	addwf	fsr2l,f,c
  1113  000416  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1114  000418  22DA               	addwfc	fsr2h,f,c
  1115  00041A  0E01               	movlw	1
  1116  00041C  AEDB               	btfss	plusw2,7,c
  1117  00041E  D010               	goto	l113
  1118  000420  0EEC               	movlw	236
  1119  000422  5CDE               	subwf	postinc2,w,c
  1120  000424  0EFF               	movlw	255
  1121  000426  58DE               	subwfb	postinc2,w,c
  1122  000428  B0D8               	btfsc	status,0,c
  1123  00042A  D00A               	goto	l113
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;mTouchButton.c: 129: {
  1127                           ;mTouchButton.c: 130: pButton->pressCounter = 20;
  1128  00042C  EE20 F006          	lfsr	2,6
  1129  000430  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1130  000432  26D9               	addwf	fsr2l,f,c
  1131  000434  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1132  000436  22DA               	addwfc	fsr2h,f,c
  1133  000438  0E14               	movlw	20
  1134  00043A  6EDE               	movwf	postinc2,c
  1135  00043C  0E00               	movlw	0
  1136  00043E  6EDD               	movwf	postdec2,c
  1137  000440                     l113:
  1138                           
  1139                           ; BSR set to: 0
  1140                           ;mTouchButton.c: 131: }
  1141                           ;mTouchButton.c: 133: pButton->pressCounter--;
  1142  000440  EE20 F006          	lfsr	2,6
  1143  000444  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1144  000446  26D9               	addwf	fsr2l,f,c
  1145  000448  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1146  00044A  22DA               	addwfc	fsr2h,f,c
  1147  00044C  06DE               	decf	postinc2,f,c
  1148  00044E  0E00               	movlw	0
  1149  000450  5ADD               	subwfb	postdec2,f,c
  1150  000452                     l110:
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;mTouchButton.c: 134: }
  1154                           ;mTouchButton.c: 135: }
  1155                           ;mTouchButton.c: 138: if(decode&DECODE_ONE_EVENT)
  1156                           
  1157                           ; BSR set to: 0
  1158                           
  1159                           ; BSR set to: 0
  1160  000452  A9A0               	btfss	MTouchDecodeButtons@decode& (0+255),4,b
  1161  000454  D009               	goto	l115
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;mTouchButton.c: 139: {
  1165                           ;mTouchButton.c: 140: if(pButton->state&state)
  1166  000456  C0A4  FFD9         	movff	MTouchDecodeButtons@pButton,fsr2l
  1167  00045A  C0A5  FFDA         	movff	MTouchDecodeButtons@pButton+1,fsr2h
  1168  00045E  50DF               	movf	indf2,w,c
  1169  000460  159F               	andwf	MTouchDecodeButtons@state& (0+255),w,b
  1170  000462  0900               	iorlw	0
  1171  000464  A4D8               	btfss	status,2,c
  1172                           
  1173                           ; BSR set to: 0
  1174                           ;mTouchButton.c: 141: {
  1175                           ;mTouchButton.c: 142: state |= CONTROL_IDLE;
  1176  000466  8F9F               	bsf	MTouchDecodeButtons@state& (0+255),7,b
  1177  000468                     l115:
  1178                           
  1179                           ; BSR set to: 0
  1180                           ;mTouchButton.c: 143: }
  1181                           ;mTouchButton.c: 144: }
  1182                           ;mTouchButton.c: 146: pButton->state = state;
  1183                           
  1184                           ; BSR set to: 0
  1185                           
  1186                           ; BSR set to: 0
  1187  000468  C0A4  FFD9         	movff	MTouchDecodeButtons@pButton,fsr2l
  1188  00046C  C0A5  FFDA         	movff	MTouchDecodeButtons@pButton+1,fsr2h
  1189  000470  C09F  FFDF         	movff	MTouchDecodeButtons@state,indf2
  1190                           
  1191                           ; BSR set to: 0
  1192                           ;mTouchButton.c: 149: if(decode&DECODE_TOGGLE)
  1193  000474  A1A0               	btfss	MTouchDecodeButtons@decode& (0+255),0,b
  1194  000476  D030               	goto	l116
  1195                           
  1196                           ; BSR set to: 0
  1197                           ;mTouchButton.c: 150: {
  1198                           ;mTouchButton.c: 151: if(sensorState != pButton->prevSensorState)
  1199  000478  EE20 F003          	lfsr	2,3
  1200  00047C  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1201  00047E  26D9               	addwf	fsr2l,f,c
  1202  000480  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1203  000482  22DA               	addwfc	fsr2h,f,c
  1204  000484  51A3               	movf	MTouchDecodeButtons@sensorState& (0+255),w,b
  1205  000486  18DE               	xorwf	postinc2,w,c
  1206  000488  B4D8               	btfsc	status,2,c
  1207  00048A  D01D               	goto	l120
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;mTouchButton.c: 152: {
  1211                           ;mTouchButton.c: 153: if(sensorState == SENSOR_PRESSED)
  1212  00048C  0E02               	movlw	2
  1213  00048E  19A3               	xorwf	MTouchDecodeButtons@sensorState& (0+255),w,b
  1214  000490  A4D8               	btfss	status,2,c
  1215  000492  D019               	goto	l120
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;mTouchButton.c: 154: {
  1219                           ;mTouchButton.c: 155: if(pButton->curState == CONTROL_PRESSED)
  1220  000494  EE20 F001          	lfsr	2,1
  1221  000498  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1222  00049A  26D9               	addwf	fsr2l,f,c
  1223  00049C  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1224  00049E  22DA               	addwfc	fsr2h,f,c
  1225  0004A0  04DE               	decf	postinc2,w,c
  1226  0004A2  A4D8               	btfss	status,2,c
  1227  0004A4  D008               	goto	l119
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;mTouchButton.c: 156: {
  1231                           ;mTouchButton.c: 157: pButton->curState = CONTROL_RELEASED;
  1232  0004A6  EE20 F001          	lfsr	2,1
  1233  0004AA  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1234  0004AC  26D9               	addwf	fsr2l,f,c
  1235  0004AE  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1236  0004B0  22DA               	addwfc	fsr2h,f,c
  1237  0004B2  0E02               	movlw	2
  1238  0004B4  D007               	goto	L2
  1239  0004B6                     l119:
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;mTouchButton.c: 159: pButton->curState = CONTROL_PRESSED;
  1243                           
  1244                           ; BSR set to: 0
  1245  0004B6  EE20 F001          	lfsr	2,1
  1246  0004BA  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1247  0004BC  26D9               	addwf	fsr2l,f,c
  1248  0004BE  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1249  0004C0  22DA               	addwfc	fsr2h,f,c
  1250  0004C2  0E01               	movlw	1
  1251  0004C4                     L2:
  1252  0004C4  6EDF               	movwf	indf2,c
  1253  0004C6                     l120:
  1254                           
  1255                           ; BSR set to: 0
  1256                           ;mTouchButton.c: 160: }
  1257                           ;mTouchButton.c: 162: }
  1258                           ;mTouchButton.c: 163: }
  1259                           ;mTouchButton.c: 164: pButton->prevSensorState = sensorState;
  1260                           
  1261                           ; BSR set to: 0
  1262                           
  1263                           ; BSR set to: 0
  1264  0004C6  EE20 F003          	lfsr	2,3
  1265  0004CA  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1266  0004CC  26D9               	addwf	fsr2l,f,c
  1267  0004CE  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1268  0004D0  22DA               	addwfc	fsr2h,f,c
  1269  0004D2  C0A3  FFDF         	movff	MTouchDecodeButtons@sensorState,indf2
  1270                           
  1271                           ;mTouchButton.c: 165: }else
  1272  0004D6  D043               	goto	l129
  1273  0004D8                     l116:
  1274                           
  1275                           ; BSR set to: 0
  1276                           ;mTouchButton.c: 167: if(decode&DECODE_MOST_PRESSED)
  1277  0004D8  A5A0               	btfss	MTouchDecodeButtons@decode& (0+255),2,b
  1278  0004DA  D02D               	goto	l122
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;mTouchButton.c: 168: {
  1282                           ;mTouchButton.c: 169: pButton->curState = CONTROL_RELEASED;
  1283  0004DC  EE20 F001          	lfsr	2,1
  1284  0004E0  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1285  0004E2  26D9               	addwf	fsr2l,f,c
  1286  0004E4  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1287  0004E6  22DA               	addwfc	fsr2h,f,c
  1288  0004E8  0E02               	movlw	2
  1289  0004EA  6EDF               	movwf	indf2,c
  1290                           
  1291                           ; BSR set to: 0
  1292                           ;mTouchButton.c: 170: if(sensorState == SENSOR_PRESSED)
  1293  0004EC  0E02               	movlw	2
  1294  0004EE  19A3               	xorwf	MTouchDecodeButtons@sensorState& (0+255),w,b
  1295  0004F0  A4D8               	btfss	status,2,c
  1296  0004F2  D035               	goto	l129
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;mTouchButton.c: 171: {
  1300                           ;mTouchButton.c: 172: if(pMostPressedButton == (0))
  1301  0004F4  51A1               	movf	MTouchDecodeButtons@pMostPressedButton& (0+255),w,b
  1302  0004F6  11A2               	iorwf	(MTouchDecodeButtons@pMostPressedButton+1)& (0+255),w,b
  1303  0004F8  B4D8               	btfsc	status,2,c
  1304  0004FA  D018               	goto	u800
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;mTouchButton.c: 176: if(pSensor->delta > pMostPressedButton->pSensor->delta)
  1308                           
  1309                           ; BSR set to: 0
  1310                           
  1311                           ;mTouchButton.c: 175: }else{
  1312                           
  1313                           ; BSR set to: 0
  1314                           ;mTouchButton.c: 173: {
  1315                           ;mTouchButton.c: 174: pMostPressedButton = pButton;
  1316  0004FC  EE20 F018          	lfsr	2,24
  1317  000500  519C               	movf	MTouchDecodeButtons@pSensor& (0+255),w,b
  1318  000502  26D9               	addwf	fsr2l,f,c
  1319  000504  519D               	movf	(MTouchDecodeButtons@pSensor+1)& (0+255),w,b
  1320  000506  22DA               	addwfc	fsr2h,f,c
  1321  000508  EE10 F004          	lfsr	1,4
  1322  00050C  51A1               	movf	MTouchDecodeButtons@pMostPressedButton& (0+255),w,b
  1323  00050E  26E1               	addwf	fsr1l,f,c
  1324  000510  51A2               	movf	(MTouchDecodeButtons@pMostPressedButton+1)& (0+255),w,b
  1325  000512  22E2               	addwfc	fsr1h,f,c
  1326  000514  EE00 F018          	lfsr	0,24
  1327  000518  50E6               	movf	postinc1,w,c
  1328  00051A  26E9               	addwf	fsr0l,f,c
  1329  00051C  50E5               	movf	postdec1,w,c
  1330  00051E  22EA               	addwfc	fsr0h,f,c
  1331  000520  50DE               	movf	postinc2,w,c
  1332  000522  5CEE               	subwf	postinc0,w,c
  1333  000524  50DE               	movf	postinc2,w,c
  1334  000526  58EE               	subwfb	postinc0,w,c
  1335  000528  B0D8               	btfsc	status,0,c
  1336  00052A  D019               	goto	l129
  1337  00052C                     u800:
  1338                           
  1339                           ; BSR set to: 0
  1340                           ;mTouchButton.c: 177: {
  1341                           ;mTouchButton.c: 178: pMostPressedButton = pButton;
  1342  00052C  C0A4  F0A1         	movff	MTouchDecodeButtons@pButton,MTouchDecodeButtons@pMostPressedButton
  1343  000530  C0A5  F0A2         	movff	MTouchDecodeButtons@pButton+1,MTouchDecodeButtons@pMostPressedButton+1
  1344                           
  1345                           ; BSR set to: 0
  1346                           ;mTouchButton.c: 179: }
  1347                           ;mTouchButton.c: 180: }
  1348                           ;mTouchButton.c: 181: }
  1349                           ;mTouchButton.c: 182: }else{
  1350                           
  1351                           ; BSR set to: 0
  1352                           
  1353                           ; BSR set to: 0
  1354  000534  D014               	goto	l129
  1355  000536                     l122:
  1356                           
  1357                           ; BSR set to: 0
  1358                           ;mTouchButton.c: 184: if(sensorState == SENSOR_PRESSED)
  1359                           
  1360                           ; BSR set to: 0
  1361  000536  0E02               	movlw	2
  1362  000538  19A3               	xorwf	MTouchDecodeButtons@sensorState& (0+255),w,b
  1363  00053A  A4D8               	btfss	status,2,c
  1364  00053C  D008               	goto	l128
  1365                           
  1366                           ; BSR set to: 0
  1367                           ;mTouchButton.c: 185: {
  1368                           ;mTouchButton.c: 186: pButton->curState = CONTROL_PRESSED;
  1369  00053E  EE20 F001          	lfsr	2,1
  1370  000542  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1371  000544  26D9               	addwf	fsr2l,f,c
  1372  000546  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1373  000548  22DA               	addwfc	fsr2h,f,c
  1374  00054A  0E01               	movlw	1
  1375  00054C  D007               	goto	L3
  1376  00054E                     l128:
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;mTouchButton.c: 188: pButton->curState = CONTROL_RELEASED;
  1380                           
  1381                           ; BSR set to: 0
  1382  00054E  EE20 F001          	lfsr	2,1
  1383  000552  51A4               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  1384  000554  26D9               	addwf	fsr2l,f,c
  1385  000556  51A5               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  1386  000558  22DA               	addwfc	fsr2h,f,c
  1387  00055A  0E02               	movlw	2
  1388  00055C                     L3:
  1389  00055C  6EDF               	movwf	indf2,c
  1390  00055E                     l129:
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;mTouchButton.c: 189: }
  1394                           ;mTouchButton.c: 191: }
  1395                           ;mTouchButton.c: 193: }
  1396                           ;mTouchButton.c: 195: pButton++;
  1397                           
  1398                           ; BSR set to: 0
  1399                           
  1400                           ; BSR set to: 0
  1401                           
  1402                           ; BSR set to: 0
  1403                           
  1404                           ; BSR set to: 0
  1405  00055E  0E08               	movlw	8
  1406  000560  27A4               	addwf	MTouchDecodeButtons@pButton& (0+255),f,b
  1407  000562  0E00               	movlw	0
  1408  000564  23A5               	addwfc	(MTouchDecodeButtons@pButton+1)& (0+255),f,b
  1409                           
  1410                           ; BSR set to: 0
  1411  000566  2B9E               	incf	MTouchDecodeButtons@i& (0+255),f,b
  1412  000568  D705               	goto	l1618
  1413  00056A                     u820:
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;mTouchButton.c: 197: }
  1417                           ;mTouchButton.c: 199: if(pMostPressedButton != (0))
  1418                           
  1419                           ; BSR set to: 0
  1420  00056A  51A1               	movf	MTouchDecodeButtons@pMostPressedButton& (0+255),w,b
  1421  00056C  11A2               	iorwf	(MTouchDecodeButtons@pMostPressedButton+1)& (0+255),w,b
  1422  00056E  B4D8               	btfsc	status,2,c
  1423  000570  0012               	return	
  1424                           
  1425                           ; BSR set to: 0
  1426                           ;mTouchButton.c: 200: {
  1427                           ;mTouchButton.c: 201: pMostPressedButton->curState = CONTROL_PRESSED;
  1428  000572  EE20 F001          	lfsr	2,1
  1429  000576  51A1               	movf	MTouchDecodeButtons@pMostPressedButton& (0+255),w,b
  1430  000578  26D9               	addwf	fsr2l,f,c
  1431  00057A  51A2               	movf	(MTouchDecodeButtons@pMostPressedButton+1)& (0+255),w,b
  1432  00057C  22DA               	addwfc	fsr2h,f,c
  1433  00057E  0E01               	movlw	1
  1434  000580  6EDF               	movwf	indf2,c
  1435  000582  0012               	return	
  1436  000584                     __end_of_MTouchDecodeButtons:
  1437                           	opt stack 0
  1438                           tblptru	equ	0xFF8
  1439                           postinc0	equ	0xFEE
  1440                           fsr0h	equ	0xFEA
  1441                           fsr0l	equ	0xFE9
  1442                           wreg	equ	0xFE8
  1443                           postinc1	equ	0xFE6
  1444                           postdec1	equ	0xFE5
  1445                           fsr1h	equ	0xFE2
  1446                           fsr1l	equ	0xFE1
  1447                           indf2	equ	0xFDF
  1448                           postinc2	equ	0xFDE
  1449                           postdec2	equ	0xFDD
  1450                           plusw2	equ	0xFDB
  1451                           fsr2h	equ	0xFDA
  1452                           fsr2l	equ	0xFD9
  1453                           status	equ	0xFD8
  1454                           
  1455 ;; *************** function _configuration_mTouch *****************
  1456 ;; Defined at:
  1457 ;;		line 72 in file "includes/configtouch/myConfigTouch.c"
  1458 ;; Parameters:    Size  Location     Type
  1459 ;;		None
  1460 ;; Auto vars:     Size  Location     Type
  1461 ;;		None
  1462 ;; Return value:  Size  Location     Type
  1463 ;;                  1    wreg      void 
  1464 ;; Registers used:
  1465 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1466 ;; Tracked objects:
  1467 ;;		On entry : 0/0
  1468 ;;		On exit  : 0/0
  1469 ;;		Unchanged: 0/0
  1470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1475 ;;Total ram usage:        0 bytes
  1476 ;; Hardware stack levels used:    1
  1477 ;; Hardware stack levels required when called:    6
  1478 ;; This function calls:
  1479 ;;		_touch_step_1
  1480 ;;		_touch_step_2
  1481 ;;		_touch_step_3
  1482 ;;		_touch_step_4
  1483 ;; This function is called by:
  1484 ;;		_main
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           	psect	text4
  1489  000FAE                     __ptext4:
  1490                           	opt stack 0
  1491  000FAE                     _configuration_mTouch:
  1492                           	opt stack 24
  1493                           
  1494                           ;myConfigTouch.c: 73: touch_step_1();
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;incstack = 0
  1498  000FAE  ECFC  F007         	call	_touch_step_1	;wreg free
  1499                           
  1500                           ;myConfigTouch.c: 74: touch_step_2();
  1501  000FB2  EC2A  F005         	call	_touch_step_2	;wreg free
  1502                           
  1503                           ;myConfigTouch.c: 75: touch_step_3();
  1504  000FB6  EC2B  F007         	call	_touch_step_3	;wreg free
  1505                           
  1506                           ;myConfigTouch.c: 76: touch_step_4();
  1507  000FBA  ECF9  F007         	call	_touch_step_4	;wreg free
  1508  000FBE  0012               	return		;funcret
  1509  000FC0                     __end_of_configuration_mTouch:
  1510                           	opt stack 0
  1511                           tblptru	equ	0xFF8
  1512                           postinc0	equ	0xFEE
  1513                           fsr0h	equ	0xFEA
  1514                           fsr0l	equ	0xFE9
  1515                           wreg	equ	0xFE8
  1516                           postinc1	equ	0xFE6
  1517                           postdec1	equ	0xFE5
  1518                           fsr1h	equ	0xFE2
  1519                           fsr1l	equ	0xFE1
  1520                           indf2	equ	0xFDF
  1521                           postinc2	equ	0xFDE
  1522                           postdec2	equ	0xFDD
  1523                           plusw2	equ	0xFDB
  1524                           fsr2h	equ	0xFDA
  1525                           fsr2l	equ	0xFD9
  1526                           status	equ	0xFD8
  1527                           
  1528 ;; *************** function _touch_step_4 *****************
  1529 ;; Defined at:
  1530 ;;		line 60 in file "includes/configtouch/myConfigTouch.c"
  1531 ;; Parameters:    Size  Location     Type
  1532 ;;		None
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;		None
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  1    wreg      void 
  1537 ;; Registers used:
  1538 ;;		cstack
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1548 ;;Total ram usage:        0 bytes
  1549 ;; Hardware stack levels used:    1
  1550 ;; Hardware stack levels required when called:    5
  1551 ;; This function calls:
  1552 ;;		_TMR2_StartTimer
  1553 ;; This function is called by:
  1554 ;;		_configuration_mTouch
  1555 ;; This function uses a non-reentrant model
  1556 ;;
  1557                           
  1558                           	psect	text5
  1559  000FF2                     __ptext5:
  1560                           	opt stack 0
  1561  000FF2                     _touch_step_4:
  1562                           	opt stack 24
  1563                           
  1564                           ;myConfigTouch.c: 63: TMR2_StartTimer();
  1565                           
  1566                           ;incstack = 0
  1567  000FF2  ECFF  F007         	call	_TMR2_StartTimer	;wreg free
  1568  000FF6  0012               	return		;funcret
  1569  000FF8                     __end_of_touch_step_4:
  1570                           	opt stack 0
  1571                           tblptru	equ	0xFF8
  1572                           postinc0	equ	0xFEE
  1573                           fsr0h	equ	0xFEA
  1574                           fsr0l	equ	0xFE9
  1575                           wreg	equ	0xFE8
  1576                           postinc1	equ	0xFE6
  1577                           postdec1	equ	0xFE5
  1578                           fsr1h	equ	0xFE2
  1579                           fsr1l	equ	0xFE1
  1580                           indf2	equ	0xFDF
  1581                           postinc2	equ	0xFDE
  1582                           postdec2	equ	0xFDD
  1583                           plusw2	equ	0xFDB
  1584                           fsr2h	equ	0xFDA
  1585                           fsr2l	equ	0xFD9
  1586                           status	equ	0xFD8
  1587                           
  1588 ;; *************** function _TMR2_StartTimer *****************
  1589 ;; Defined at:
  1590 ;;		line 19 in file "includes/timer/tmr2.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;		None
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;		None
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  1    wreg      void 
  1597 ;; Registers used:
  1598 ;;		None
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1608 ;;Total ram usage:        0 bytes
  1609 ;; Hardware stack levels used:    1
  1610 ;; Hardware stack levels required when called:    4
  1611 ;; This function calls:
  1612 ;;		Nothing
  1613 ;; This function is called by:
  1614 ;;		_touch_step_4
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text6
  1619  000FFE                     __ptext6:
  1620                           	opt stack 0
  1621  000FFE                     _TMR2_StartTimer:
  1622                           	opt stack 24
  1623                           
  1624                           ;tmr2.c: 21: T2CONbits.TMR2ON = 1;
  1625                           
  1626                           ;incstack = 0
  1627  000FFE  84BA               	bsf	4026,2,c	;volatile
  1628  001000  0012               	return		;funcret
  1629  001002                     __end_of_TMR2_StartTimer:
  1630                           	opt stack 0
  1631                           tblptru	equ	0xFF8
  1632                           postinc0	equ	0xFEE
  1633                           fsr0h	equ	0xFEA
  1634                           fsr0l	equ	0xFE9
  1635                           wreg	equ	0xFE8
  1636                           postinc1	equ	0xFE6
  1637                           postdec1	equ	0xFE5
  1638                           fsr1h	equ	0xFE2
  1639                           fsr1l	equ	0xFE1
  1640                           indf2	equ	0xFDF
  1641                           postinc2	equ	0xFDE
  1642                           postdec2	equ	0xFDD
  1643                           plusw2	equ	0xFDB
  1644                           fsr2h	equ	0xFDA
  1645                           fsr2l	equ	0xFD9
  1646                           status	equ	0xFD8
  1647                           
  1648 ;; *************** function _touch_step_3 *****************
  1649 ;; Defined at:
  1650 ;;		line 43 in file "includes/configtouch/myConfigTouch.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;		None
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;		None
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1668 ;;Total ram usage:        0 bytes
  1669 ;; Hardware stack levels used:    1
  1670 ;; Hardware stack levels required when called:    5
  1671 ;; This function calls:
  1672 ;;		_MTouchSetButton
  1673 ;; This function is called by:
  1674 ;;		_configuration_mTouch
  1675 ;; This function uses a non-reentrant model
  1676 ;;
  1677                           
  1678                           	psect	text7
  1679  000E56                     __ptext7:
  1680                           	opt stack 0
  1681  000E56                     _touch_step_3:
  1682                           	opt stack 24
  1683                           
  1684                           ;myConfigTouch.c: 51: MTouchSetButton(0, 0, DECODE_PRESS_REPEAT);
  1685                           
  1686                           ;incstack = 0
  1687  000E56  0E00               	movlw	0
  1688  000E58  0100               	movlb	0	; () banked
  1689  000E5A  6F98               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1690  000E5C  0E08               	movlw	8
  1691  000E5E  6F99               	movwf	MTouchSetButton@decode& (0+255),b
  1692  000E60  0E00               	movlw	0
  1693  000E62  ECE3  F006         	call	_MTouchSetButton
  1694                           
  1695                           ;myConfigTouch.c: 52: MTouchSetButton(1, 1, DECODE_PRESS_REPEAT);
  1696  000E66  0E01               	movlw	1
  1697  000E68  0100               	movlb	0	; () banked
  1698  000E6A  6F98               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1699  000E6C  0E08               	movlw	8
  1700  000E6E  6F99               	movwf	MTouchSetButton@decode& (0+255),b
  1701  000E70  0E01               	movlw	1
  1702  000E72  ECE3  F006         	call	_MTouchSetButton
  1703                           
  1704                           ;myConfigTouch.c: 53: MTouchSetButton(2, 2, DECODE_PRESS_REPEAT);
  1705  000E76  0E02               	movlw	2
  1706  000E78  0100               	movlb	0	; () banked
  1707  000E7A  6F98               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1708  000E7C  0E08               	movlw	8
  1709  000E7E  6F99               	movwf	MTouchSetButton@decode& (0+255),b
  1710  000E80  0E02               	movlw	2
  1711  000E82  ECE3  F006         	call	_MTouchSetButton
  1712                           
  1713                           ;myConfigTouch.c: 54: MTouchSetButton(3, 3, DECODE_PRESS_REPEAT);
  1714  000E86  0E03               	movlw	3
  1715  000E88  0100               	movlb	0	; () banked
  1716  000E8A  6F98               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1717  000E8C  0E08               	movlw	8
  1718  000E8E  6F99               	movwf	MTouchSetButton@decode& (0+255),b
  1719  000E90  0E03               	movlw	3
  1720  000E92  ECE3  F006         	call	_MTouchSetButton
  1721                           
  1722                           ;myConfigTouch.c: 55: MTouchSetButton(4, 4, DECODE_PRESS_REPEAT);
  1723  000E96  0E04               	movlw	4
  1724  000E98  0100               	movlb	0	; () banked
  1725  000E9A  6F98               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1726  000E9C  0E08               	movlw	8
  1727  000E9E  6F99               	movwf	MTouchSetButton@decode& (0+255),b
  1728  000EA0  0E04               	movlw	4
  1729  000EA2  ECE3  F006         	call	_MTouchSetButton
  1730                           
  1731                           ;myConfigTouch.c: 56: MTouchSetButton(5, 5, DECODE_PRESS_REPEAT);
  1732  000EA6  0E05               	movlw	5
  1733  000EA8  0100               	movlb	0	; () banked
  1734  000EAA  6F98               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1735  000EAC  0E08               	movlw	8
  1736  000EAE  6F99               	movwf	MTouchSetButton@decode& (0+255),b
  1737  000EB0  0E05               	movlw	5
  1738  000EB2  ECE3  F006         	call	_MTouchSetButton
  1739                           
  1740                           ;myConfigTouch.c: 57: MTouchSetButton(6, 6, DECODE_PRESS_REPEAT);
  1741  000EB6  0E06               	movlw	6
  1742  000EB8  0100               	movlb	0	; () banked
  1743  000EBA  6F98               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1744  000EBC  0E08               	movlw	8
  1745  000EBE  6F99               	movwf	MTouchSetButton@decode& (0+255),b
  1746  000EC0  0E06               	movlw	6
  1747  000EC2  ECE3  F006         	call	_MTouchSetButton
  1748  000EC6  0012               	return		;funcret
  1749  000EC8                     __end_of_touch_step_3:
  1750                           	opt stack 0
  1751                           tblptru	equ	0xFF8
  1752                           postinc0	equ	0xFEE
  1753                           fsr0h	equ	0xFEA
  1754                           fsr0l	equ	0xFE9
  1755                           wreg	equ	0xFE8
  1756                           postinc1	equ	0xFE6
  1757                           postdec1	equ	0xFE5
  1758                           fsr1h	equ	0xFE2
  1759                           fsr1l	equ	0xFE1
  1760                           indf2	equ	0xFDF
  1761                           postinc2	equ	0xFDE
  1762                           postdec2	equ	0xFDD
  1763                           plusw2	equ	0xFDB
  1764                           fsr2h	equ	0xFDA
  1765                           fsr2l	equ	0xFD9
  1766                           status	equ	0xFD8
  1767                           
  1768 ;; *************** function _MTouchSetButton *****************
  1769 ;; Defined at:
  1770 ;;		line 67 in file "includes/mtouch/mTouchButton.c"
  1771 ;; Parameters:    Size  Location     Type
  1772 ;;  buttonNumber    1    wreg     unsigned char 
  1773 ;;  sensorNumber    1    0[BANK0 ] unsigned char 
  1774 ;;  decode          1    1[BANK0 ] unsigned char 
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  buttonNumber    1    4[BANK0 ] unsigned char 
  1777 ;;  pButton         2    5[BANK0 ] PTR struct tag_MTOUCHBUT
  1778 ;;		 -> buttons(56), 
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      void 
  1781 ;; Registers used:
  1782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1788 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;Total ram usage:        7 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; Hardware stack levels required when called:    4
  1795 ;; This function calls:
  1796 ;;		Nothing
  1797 ;; This function is called by:
  1798 ;;		_touch_step_3
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           	psect	text8
  1803  000DC6                     __ptext8:
  1804                           	opt stack 0
  1805  000DC6                     _MTouchSetButton:
  1806                           	opt stack 24
  1807                           
  1808                           ;incstack = 0
  1809                           ;MTouchSetButton@buttonNumber stored from wreg
  1810  000DC6  0100               	movlb	0	; () banked
  1811  000DC8  6F9C               	movwf	MTouchSetButton@buttonNumber& (0+255),b
  1812                           
  1813                           ;mTouchButton.c: 69: MTOUCHBUTTON* pButton;
  1814                           ;mTouchButton.c: 71: pButton = (MTOUCHBUTTON*)buttons + buttonNumber;
  1815  000DCA  0100               	movlb	0	; () banked
  1816  000DCC  519C               	movf	MTouchSetButton@buttonNumber& (0+255),w,b
  1817  000DCE  0D08               	mullw	8
  1818  000DD0  0E60               	movlw	low _buttons
  1819  000DD2  24F3               	addwf	prodl,w,c
  1820  000DD4  6F9D               	movwf	MTouchSetButton@pButton& (0+255),b
  1821  000DD6  0E00               	movlw	high _buttons
  1822  000DD8  20F4               	addwfc	prodh,w,c
  1823  000DDA  6F9E               	movwf	(MTouchSetButton@pButton+1)& (0+255),b
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;mTouchButton.c: 73: pButton->state = CONTROL_RELEASED|CONTROL_IDLE;
  1827  000DDC  C09D  FFD9         	movff	MTouchSetButton@pButton,fsr2l
  1828  000DE0  C09E  FFDA         	movff	MTouchSetButton@pButton+1,fsr2h
  1829  000DE4  0E82               	movlw	130
  1830  000DE6  6EDF               	movwf	indf2,c
  1831                           
  1832                           ; BSR set to: 0
  1833                           ;mTouchButton.c: 74: pButton->curState = CONTROL_RELEASED;
  1834  000DE8  EE20 F001          	lfsr	2,1
  1835  000DEC  519D               	movf	MTouchSetButton@pButton& (0+255),w,b
  1836  000DEE  26D9               	addwf	fsr2l,f,c
  1837  000DF0  519E               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
  1838  000DF2  22DA               	addwfc	fsr2h,f,c
  1839  000DF4  0E02               	movlw	2
  1840  000DF6  6EDF               	movwf	indf2,c
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;mTouchButton.c: 75: pButton->decode = decode;
  1844  000DF8  EE20 F002          	lfsr	2,2
  1845  000DFC  519D               	movf	MTouchSetButton@pButton& (0+255),w,b
  1846  000DFE  26D9               	addwf	fsr2l,f,c
  1847  000E00  519E               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
  1848  000E02  22DA               	addwfc	fsr2h,f,c
  1849  000E04  C099  FFDF         	movff	MTouchSetButton@decode,indf2
  1850                           
  1851                           ; BSR set to: 0
  1852                           ;mTouchButton.c: 76: pButton->pSensor = (SENSOR*)sensors + sensorNumber;
  1853  000E08  5198               	movf	MTouchSetButton@sensorNumber& (0+255),w,b
  1854  000E0A  0D20               	mullw	32
  1855  000E0C  0E00               	movlw	low _sensors
  1856  000E0E  6F9A               	movwf	??_MTouchSetButton& (0+255),b
  1857  000E10  0E01               	movlw	high _sensors
  1858  000E12  6F9B               	movwf	(??_MTouchSetButton+1)& (0+255),b
  1859  000E14  50F3               	movf	prodl,w,c
  1860  000E16  279A               	addwf	??_MTouchSetButton& (0+255),f,b
  1861  000E18  50F4               	movf	prodh,w,c
  1862  000E1A  239B               	addwfc	(??_MTouchSetButton+1)& (0+255),f,b
  1863  000E1C  EE20 F004          	lfsr	2,4
  1864  000E20  519D               	movf	MTouchSetButton@pButton& (0+255),w,b
  1865  000E22  26D9               	addwf	fsr2l,f,c
  1866  000E24  519E               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
  1867  000E26  22DA               	addwfc	fsr2h,f,c
  1868  000E28  C09A  FFDE         	movff	??_MTouchSetButton,postinc2
  1869  000E2C  C09B  FFDD         	movff	??_MTouchSetButton+1,postdec2
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;mTouchButton.c: 77: pButton->pressCounter = 100;
  1873  000E30  EE20 F006          	lfsr	2,6
  1874  000E34  519D               	movf	MTouchSetButton@pButton& (0+255),w,b
  1875  000E36  26D9               	addwf	fsr2l,f,c
  1876  000E38  519E               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
  1877  000E3A  22DA               	addwfc	fsr2h,f,c
  1878  000E3C  0E64               	movlw	100
  1879  000E3E  6EDE               	movwf	postinc2,c
  1880  000E40  0E00               	movlw	0
  1881  000E42  6EDD               	movwf	postdec2,c
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;mTouchButton.c: 78: pButton->prevSensorState = SENSOR_RELEASED;
  1885  000E44  EE20 F003          	lfsr	2,3
  1886  000E48  519D               	movf	MTouchSetButton@pButton& (0+255),w,b
  1887  000E4A  26D9               	addwf	fsr2l,f,c
  1888  000E4C  519E               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
  1889  000E4E  22DA               	addwfc	fsr2h,f,c
  1890  000E50  0E01               	movlw	1
  1891  000E52  6EDF               	movwf	indf2,c
  1892                           
  1893                           ; BSR set to: 0
  1894  000E54  0012               	return		;funcret
  1895  000E56                     __end_of_MTouchSetButton:
  1896                           	opt stack 0
  1897                           tblptru	equ	0xFF8
  1898                           prodh	equ	0xFF4
  1899                           prodl	equ	0xFF3
  1900                           postinc0	equ	0xFEE
  1901                           fsr0h	equ	0xFEA
  1902                           fsr0l	equ	0xFE9
  1903                           wreg	equ	0xFE8
  1904                           postinc1	equ	0xFE6
  1905                           postdec1	equ	0xFE5
  1906                           fsr1h	equ	0xFE2
  1907                           fsr1l	equ	0xFE1
  1908                           indf2	equ	0xFDF
  1909                           postinc2	equ	0xFDE
  1910                           postdec2	equ	0xFDD
  1911                           plusw2	equ	0xFDB
  1912                           fsr2h	equ	0xFDA
  1913                           fsr2l	equ	0xFD9
  1914                           status	equ	0xFD8
  1915                           
  1916 ;; *************** function _touch_step_2 *****************
  1917 ;; Defined at:
  1918 ;;		line 14 in file "includes/configtouch/myConfigTouch.c"
  1919 ;; Parameters:    Size  Location     Type
  1920 ;;		None
  1921 ;; Auto vars:     Size  Location     Type
  1922 ;;		None
  1923 ;; Return value:  Size  Location     Type
  1924 ;;                  1    wreg      void 
  1925 ;; Registers used:
  1926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1927 ;; Tracked objects:
  1928 ;;		On entry : 0/0
  1929 ;;		On exit  : 0/0
  1930 ;;		Unchanged: 0/0
  1931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1936 ;;Total ram usage:        0 bytes
  1937 ;; Hardware stack levels used:    1
  1938 ;; Hardware stack levels required when called:    5
  1939 ;; This function calls:
  1940 ;;		_MTouchSetSensor
  1941 ;; This function is called by:
  1942 ;;		_configuration_mTouch
  1943 ;; This function uses a non-reentrant model
  1944 ;;
  1945                           
  1946                           	psect	text9
  1947  000A54                     __ptext9:
  1948                           	opt stack 0
  1949  000A54                     _touch_step_2:
  1950                           	opt stack 24
  1951                           
  1952                           ;myConfigTouch.c: 28: MTouchSetSensor(0, &TRISB, &LATB, 0, 12, -1, -1, -1);
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;incstack = 0
  1956  000A54  0E93               	movlw	147
  1957  000A56  0100               	movlb	0	; () banked
  1958  000A58  6F98               	movwf	MTouchSetSensor@tris& (0+255),b
  1959  000A5A  0E0F               	movlw	15
  1960  000A5C  6F99               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  1961  000A5E  0E8A               	movlw	138
  1962  000A60  6F9A               	movwf	MTouchSetSensor@lat& (0+255),b
  1963  000A62  0E0F               	movlw	15
  1964  000A64  6F9B               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
  1965  000A66  0E00               	movlw	0
  1966  000A68  6F9C               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  1967  000A6A  0E0C               	movlw	12
  1968  000A6C  6F9D               	movwf	MTouchSetSensor@channelNumber& (0+255),b
  1969  000A6E  0EFF               	movlw	255
  1970  000A70  6F9F               	movwf	(MTouchSetSensor@threshold+1)& (0+255),b
  1971  000A72  699E               	setf	MTouchSetSensor@threshold& (0+255),b
  1972  000A74  0EFF               	movlw	255
  1973  000A76  6FA1               	movwf	(MTouchSetSensor@oversampling+1)& (0+255),b
  1974  000A78  69A0               	setf	MTouchSetSensor@oversampling& (0+255),b
  1975  000A7A  0EFF               	movlw	255
  1976  000A7C  6FA2               	movwf	MTouchSetSensor@chargeDelay& (0+255),b
  1977  000A7E  0E00               	movlw	0
  1978  000A80  ECAB  F003         	call	_MTouchSetSensor
  1979                           
  1980                           ;myConfigTouch.c: 30: MTouchSetSensor(1, &TRISB, &LATB, 1, 10, -1, -1, -1);
  1981  000A84  0E93               	movlw	147
  1982  000A86  0100               	movlb	0	; () banked
  1983  000A88  6F98               	movwf	MTouchSetSensor@tris& (0+255),b
  1984  000A8A  0E0F               	movlw	15
  1985  000A8C  6F99               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  1986  000A8E  0E8A               	movlw	138
  1987  000A90  6F9A               	movwf	MTouchSetSensor@lat& (0+255),b
  1988  000A92  0E0F               	movlw	15
  1989  000A94  6F9B               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
  1990  000A96  0E01               	movlw	1
  1991  000A98  6F9C               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  1992  000A9A  0E0A               	movlw	10
  1993  000A9C  6F9D               	movwf	MTouchSetSensor@channelNumber& (0+255),b
  1994  000A9E  0EFF               	movlw	255
  1995  000AA0  6F9F               	movwf	(MTouchSetSensor@threshold+1)& (0+255),b
  1996  000AA2  699E               	setf	MTouchSetSensor@threshold& (0+255),b
  1997  000AA4  0EFF               	movlw	255
  1998  000AA6  6FA1               	movwf	(MTouchSetSensor@oversampling+1)& (0+255),b
  1999  000AA8  69A0               	setf	MTouchSetSensor@oversampling& (0+255),b
  2000  000AAA  0EFF               	movlw	255
  2001  000AAC  6FA2               	movwf	MTouchSetSensor@chargeDelay& (0+255),b
  2002  000AAE  0E01               	movlw	1
  2003  000AB0  ECAB  F003         	call	_MTouchSetSensor
  2004                           
  2005                           ;myConfigTouch.c: 32: MTouchSetSensor(2, &TRISB, &LATB, 2, 8, -1, -1, -1);
  2006  000AB4  0E93               	movlw	147
  2007  000AB6  0100               	movlb	0	; () banked
  2008  000AB8  6F98               	movwf	MTouchSetSensor@tris& (0+255),b
  2009  000ABA  0E0F               	movlw	15
  2010  000ABC  6F99               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  2011  000ABE  0E8A               	movlw	138
  2012  000AC0  6F9A               	movwf	MTouchSetSensor@lat& (0+255),b
  2013  000AC2  0E0F               	movlw	15
  2014  000AC4  6F9B               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
  2015  000AC6  0E02               	movlw	2
  2016  000AC8  6F9C               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  2017  000ACA  0E08               	movlw	8
  2018  000ACC  6F9D               	movwf	MTouchSetSensor@channelNumber& (0+255),b
  2019  000ACE  0EFF               	movlw	255
  2020  000AD0  6F9F               	movwf	(MTouchSetSensor@threshold+1)& (0+255),b
  2021  000AD2  699E               	setf	MTouchSetSensor@threshold& (0+255),b
  2022  000AD4  0EFF               	movlw	255
  2023  000AD6  6FA1               	movwf	(MTouchSetSensor@oversampling+1)& (0+255),b
  2024  000AD8  69A0               	setf	MTouchSetSensor@oversampling& (0+255),b
  2025  000ADA  0EFF               	movlw	255
  2026  000ADC  6FA2               	movwf	MTouchSetSensor@chargeDelay& (0+255),b
  2027  000ADE  0E02               	movlw	2
  2028  000AE0  ECAB  F003         	call	_MTouchSetSensor
  2029                           
  2030                           ;myConfigTouch.c: 34: MTouchSetSensor(3, &TRISB, &LATB, 3, 9, -1, -1, -1);
  2031  000AE4  0E93               	movlw	147
  2032  000AE6  0100               	movlb	0	; () banked
  2033  000AE8  6F98               	movwf	MTouchSetSensor@tris& (0+255),b
  2034  000AEA  0E0F               	movlw	15
  2035  000AEC  6F99               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  2036  000AEE  0E8A               	movlw	138
  2037  000AF0  6F9A               	movwf	MTouchSetSensor@lat& (0+255),b
  2038  000AF2  0E0F               	movlw	15
  2039  000AF4  6F9B               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
  2040  000AF6  0E03               	movlw	3
  2041  000AF8  6F9C               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  2042  000AFA  0E09               	movlw	9
  2043  000AFC  6F9D               	movwf	MTouchSetSensor@channelNumber& (0+255),b
  2044  000AFE  0EFF               	movlw	255
  2045  000B00  6F9F               	movwf	(MTouchSetSensor@threshold+1)& (0+255),b
  2046  000B02  699E               	setf	MTouchSetSensor@threshold& (0+255),b
  2047  000B04  0EFF               	movlw	255
  2048  000B06  6FA1               	movwf	(MTouchSetSensor@oversampling+1)& (0+255),b
  2049  000B08  69A0               	setf	MTouchSetSensor@oversampling& (0+255),b
  2050  000B0A  0EFF               	movlw	255
  2051  000B0C  6FA2               	movwf	MTouchSetSensor@chargeDelay& (0+255),b
  2052  000B0E  0E03               	movlw	3
  2053  000B10  ECAB  F003         	call	_MTouchSetSensor
  2054                           
  2055                           ;myConfigTouch.c: 36: MTouchSetSensor(4, &TRISB, &LATB, 4, 11, -1, -1, -1);
  2056  000B14  0E93               	movlw	147
  2057  000B16  0100               	movlb	0	; () banked
  2058  000B18  6F98               	movwf	MTouchSetSensor@tris& (0+255),b
  2059  000B1A  0E0F               	movlw	15
  2060  000B1C  6F99               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  2061  000B1E  0E8A               	movlw	138
  2062  000B20  6F9A               	movwf	MTouchSetSensor@lat& (0+255),b
  2063  000B22  0E0F               	movlw	15
  2064  000B24  6F9B               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
  2065  000B26  0E04               	movlw	4
  2066  000B28  6F9C               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  2067  000B2A  0E0B               	movlw	11
  2068  000B2C  6F9D               	movwf	MTouchSetSensor@channelNumber& (0+255),b
  2069  000B2E  0EFF               	movlw	255
  2070  000B30  6F9F               	movwf	(MTouchSetSensor@threshold+1)& (0+255),b
  2071  000B32  699E               	setf	MTouchSetSensor@threshold& (0+255),b
  2072  000B34  0EFF               	movlw	255
  2073  000B36  6FA1               	movwf	(MTouchSetSensor@oversampling+1)& (0+255),b
  2074  000B38  69A0               	setf	MTouchSetSensor@oversampling& (0+255),b
  2075  000B3A  0EFF               	movlw	255
  2076  000B3C  6FA2               	movwf	MTouchSetSensor@chargeDelay& (0+255),b
  2077  000B3E  0E04               	movlw	4
  2078  000B40  ECAB  F003         	call	_MTouchSetSensor
  2079                           
  2080                           ;myConfigTouch.c: 38: MTouchSetSensor(5, &TRISB, &LATB, 5, 13, -1, -1, -1);
  2081  000B44  0E93               	movlw	147
  2082  000B46  0100               	movlb	0	; () banked
  2083  000B48  6F98               	movwf	MTouchSetSensor@tris& (0+255),b
  2084  000B4A  0E0F               	movlw	15
  2085  000B4C  6F99               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  2086  000B4E  0E8A               	movlw	138
  2087  000B50  6F9A               	movwf	MTouchSetSensor@lat& (0+255),b
  2088  000B52  0E0F               	movlw	15
  2089  000B54  6F9B               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
  2090  000B56  0E05               	movlw	5
  2091  000B58  6F9C               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  2092  000B5A  0E0D               	movlw	13
  2093  000B5C  6F9D               	movwf	MTouchSetSensor@channelNumber& (0+255),b
  2094  000B5E  0EFF               	movlw	255
  2095  000B60  6F9F               	movwf	(MTouchSetSensor@threshold+1)& (0+255),b
  2096  000B62  699E               	setf	MTouchSetSensor@threshold& (0+255),b
  2097  000B64  0EFF               	movlw	255
  2098  000B66  6FA1               	movwf	(MTouchSetSensor@oversampling+1)& (0+255),b
  2099  000B68  69A0               	setf	MTouchSetSensor@oversampling& (0+255),b
  2100  000B6A  0EFF               	movlw	255
  2101  000B6C  6FA2               	movwf	MTouchSetSensor@chargeDelay& (0+255),b
  2102  000B6E  0E05               	movlw	5
  2103  000B70  ECAB  F003         	call	_MTouchSetSensor
  2104                           
  2105                           ;myConfigTouch.c: 40: MTouchSetSensor(6, &TRISA, &LATA, 0, 0, -1, -1, -1);
  2106  000B74  0E92               	movlw	146
  2107  000B76  0100               	movlb	0	; () banked
  2108  000B78  6F98               	movwf	MTouchSetSensor@tris& (0+255),b
  2109  000B7A  0E0F               	movlw	15
  2110  000B7C  6F99               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  2111  000B7E  0E89               	movlw	137
  2112  000B80  6F9A               	movwf	MTouchSetSensor@lat& (0+255),b
  2113  000B82  0E0F               	movlw	15
  2114  000B84  6F9B               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
  2115  000B86  0E00               	movlw	0
  2116  000B88  6F9C               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  2117  000B8A  0E00               	movlw	0
  2118  000B8C  6F9D               	movwf	MTouchSetSensor@channelNumber& (0+255),b
  2119  000B8E  0EFF               	movlw	255
  2120  000B90  6F9F               	movwf	(MTouchSetSensor@threshold+1)& (0+255),b
  2121  000B92  699E               	setf	MTouchSetSensor@threshold& (0+255),b
  2122  000B94  0EFF               	movlw	255
  2123  000B96  6FA1               	movwf	(MTouchSetSensor@oversampling+1)& (0+255),b
  2124  000B98  69A0               	setf	MTouchSetSensor@oversampling& (0+255),b
  2125  000B9A  0EFF               	movlw	255
  2126  000B9C  6FA2               	movwf	MTouchSetSensor@chargeDelay& (0+255),b
  2127  000B9E  0E06               	movlw	6
  2128  000BA0  ECAB  F003         	call	_MTouchSetSensor
  2129  000BA4  0012               	return		;funcret
  2130  000BA6                     __end_of_touch_step_2:
  2131                           	opt stack 0
  2132                           tblptru	equ	0xFF8
  2133                           prodh	equ	0xFF4
  2134                           prodl	equ	0xFF3
  2135                           postinc0	equ	0xFEE
  2136                           fsr0h	equ	0xFEA
  2137                           fsr0l	equ	0xFE9
  2138                           wreg	equ	0xFE8
  2139                           postinc1	equ	0xFE6
  2140                           postdec1	equ	0xFE5
  2141                           fsr1h	equ	0xFE2
  2142                           fsr1l	equ	0xFE1
  2143                           indf2	equ	0xFDF
  2144                           postinc2	equ	0xFDE
  2145                           postdec2	equ	0xFDD
  2146                           plusw2	equ	0xFDB
  2147                           fsr2h	equ	0xFDA
  2148                           fsr2l	equ	0xFD9
  2149                           status	equ	0xFD8
  2150                           
  2151 ;; *************** function _MTouchSetSensor *****************
  2152 ;; Defined at:
  2153 ;;		line 78 in file "includes/mtouch/mTouchSensor.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  sensorNumber    1    wreg     unsigned char 
  2156 ;;  tris            2    0[BANK0 ] PTR volatile unsigned ch
  2157 ;;		 -> TRISA(1), TRISB(1), 
  2158 ;;  lat             2    2[BANK0 ] PTR volatile unsigned ch
  2159 ;;		 -> LATA(1), LATB(1), 
  2160 ;;  ioBitNumber     1    4[BANK0 ] unsigned char 
  2161 ;;  channelNumbe    1    5[BANK0 ] unsigned char 
  2162 ;;  threshold       2    6[BANK0 ] short 
  2163 ;;  oversampling    2    8[BANK0 ] short 
  2164 ;;  chargeDelay     1   10[BANK0 ] char 
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  sensorNumber    1   13[BANK0 ] unsigned char 
  2167 ;;  pSensor         2   14[BANK0 ] PTR struct tag_SENSOR
  2168 ;;		 -> sensors(224), 
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  1    wreg      void 
  2171 ;; Registers used:
  2172 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2173 ;; Tracked objects:
  2174 ;;		On entry : 0/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2178 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;Total ram usage:       16 bytes
  2183 ;; Hardware stack levels used:    1
  2184 ;; Hardware stack levels required when called:    4
  2185 ;; This function calls:
  2186 ;;		Nothing
  2187 ;; This function is called by:
  2188 ;;		_touch_step_2
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           	psect	text10
  2193  000756                     __ptext10:
  2194                           	opt stack 0
  2195  000756                     _MTouchSetSensor:
  2196                           	opt stack 24
  2197                           
  2198                           ;incstack = 0
  2199                           ;MTouchSetSensor@sensorNumber stored from wreg
  2200  000756  0100               	movlb	0	; () banked
  2201  000758  6FA5               	movwf	MTouchSetSensor@sensorNumber& (0+255),b
  2202                           
  2203                           ;mTouchSensor.c: 81: SENSOR* pSensor;
  2204                           ;mTouchSensor.c: 83: pSensor = (SENSOR*)sensors + sensorNumber;
  2205  00075A  0100               	movlb	0	; () banked
  2206  00075C  51A5               	movf	MTouchSetSensor@sensorNumber& (0+255),w,b
  2207  00075E  0D20               	mullw	32
  2208  000760  0E00               	movlw	low _sensors
  2209  000762  24F3               	addwf	prodl,w,c
  2210  000764  6FA6               	movwf	MTouchSetSensor@pSensor& (0+255),b
  2211  000766  0E01               	movlw	high _sensors
  2212  000768  20F4               	addwfc	prodh,w,c
  2213  00076A  6FA7               	movwf	(MTouchSetSensor@pSensor+1)& (0+255),b
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;mTouchSensor.c: 85: if(threshold > 0)
  2217  00076C  BF9F               	btfsc	(MTouchSetSensor@threshold+1)& (0+255),7,b
  2218  00076E  D01F               	goto	l155
  2219  000770  519F               	movf	(MTouchSetSensor@threshold+1)& (0+255),w,b
  2220  000772  E103               	bnz	u620
  2221  000774  059E               	decf	MTouchSetSensor@threshold& (0+255),w,b
  2222  000776  A0D8               	btfss	status,0,c
  2223  000778  D01A               	goto	l155
  2224  00077A                     u620:
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;mTouchSensor.c: 86: {
  2228                           ;mTouchSensor.c: 87: pSensor->pressThreshold = threshold;
  2229  00077A  EE20 F012          	lfsr	2,18
  2230  00077E  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2231  000780  26D9               	addwf	fsr2l,f,c
  2232  000782  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2233  000784  22DA               	addwfc	fsr2h,f,c
  2234  000786  C09E  FFDE         	movff	MTouchSetSensor@threshold,postinc2
  2235  00078A  C09F  FFDD         	movff	MTouchSetSensor@threshold+1,postdec2
  2236                           
  2237                           ;mTouchSensor.c: 88: pSensor->releaseThreshold = threshold>>1;
  2238  00078E  359F               	rlcf	(MTouchSetSensor@threshold+1)& (0+255),w,b
  2239  000790  319F               	rrcf	(MTouchSetSensor@threshold+1)& (0+255),w,b
  2240  000792  6FA4               	movwf	(??_MTouchSetSensor+1)& (0+255),b
  2241  000794  319E               	rrcf	MTouchSetSensor@threshold& (0+255),w,b
  2242  000796  6FA3               	movwf	??_MTouchSetSensor& (0+255),b
  2243  000798  EE20 F014          	lfsr	2,20
  2244  00079C  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2245  00079E  26D9               	addwf	fsr2l,f,c
  2246  0007A0  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2247  0007A2  22DA               	addwfc	fsr2h,f,c
  2248  0007A4  C0A3  FFDE         	movff	??_MTouchSetSensor,postinc2
  2249  0007A8  C0A4  FFDD         	movff	??_MTouchSetSensor+1,postdec2
  2250                           
  2251                           ;mTouchSensor.c: 89: }else{
  2252  0007AC  D014               	goto	l156
  2253  0007AE                     l155:
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;mTouchSensor.c: 90: pSensor->pressThreshold = 500;
  2257                           
  2258                           ; BSR set to: 0
  2259  0007AE  EE20 F012          	lfsr	2,18
  2260  0007B2  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2261  0007B4  26D9               	addwf	fsr2l,f,c
  2262  0007B6  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2263  0007B8  22DA               	addwfc	fsr2h,f,c
  2264  0007BA  0EF4               	movlw	244
  2265  0007BC  6EDE               	movwf	postinc2,c
  2266  0007BE  0E01               	movlw	1
  2267  0007C0  6EDD               	movwf	postdec2,c
  2268                           
  2269                           ;mTouchSensor.c: 91: pSensor->releaseThreshold = 500>>1;
  2270  0007C2  EE20 F014          	lfsr	2,20
  2271  0007C6  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2272  0007C8  26D9               	addwf	fsr2l,f,c
  2273  0007CA  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2274  0007CC  22DA               	addwfc	fsr2h,f,c
  2275  0007CE  0EFA               	movlw	250
  2276  0007D0  6EDE               	movwf	postinc2,c
  2277  0007D2  0E00               	movlw	0
  2278  0007D4  6EDD               	movwf	postdec2,c
  2279  0007D6                     l156:
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;mTouchSensor.c: 92: }
  2283                           ;mTouchSensor.c: 93: pSensor->trisReg = tris;
  2284  0007D6  EE20 F008          	lfsr	2,8
  2285  0007DA  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2286  0007DC  26D9               	addwf	fsr2l,f,c
  2287  0007DE  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2288  0007E0  22DA               	addwfc	fsr2h,f,c
  2289  0007E2  C098  FFDE         	movff	MTouchSetSensor@tris,postinc2
  2290  0007E6  C099  FFDD         	movff	MTouchSetSensor@tris+1,postdec2
  2291                           
  2292                           ;mTouchSensor.c: 94: pSensor->latReg = lat;
  2293  0007EA  EE20 F00A          	lfsr	2,10
  2294  0007EE  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2295  0007F0  26D9               	addwf	fsr2l,f,c
  2296  0007F2  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2297  0007F4  22DA               	addwfc	fsr2h,f,c
  2298  0007F6  C09A  FFDE         	movff	MTouchSetSensor@lat,postinc2
  2299  0007FA  C09B  FFDD         	movff	MTouchSetSensor@lat+1,postdec2
  2300                           
  2301                           ;mTouchSensor.c: 95: pSensor->ioMask = 1<<ioBitNumber;
  2302  0007FE  EE20 F01D          	lfsr	2,29
  2303  000802  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2304  000804  26D9               	addwf	fsr2l,f,c
  2305  000806  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2306  000808  22DA               	addwfc	fsr2h,f,c
  2307  00080A  C09C  F0A3         	movff	MTouchSetSensor@ioBitNumber,??_MTouchSetSensor
  2308  00080E  0E01               	movlw	1
  2309  000810  6FA4               	movwf	(??_MTouchSetSensor+1)& (0+255),b
  2310  000812  2BA3               	incf	??_MTouchSetSensor& (0+255),f,b
  2311  000814  D002               	goto	u634
  2312  000816                     u635:
  2313  000816  90D8               	bcf	status,0,c
  2314  000818  37A4               	rlcf	(??_MTouchSetSensor+1)& (0+255),f,b
  2315  00081A                     u634:
  2316  00081A  2FA3               	decfsz	??_MTouchSetSensor& (0+255),f,b
  2317  00081C  D7FC               	goto	u635
  2318  00081E  0100               	movlb	0	; () banked
  2319  000820  51A4               	movf	(??_MTouchSetSensor+1)& (0+255),w,b
  2320  000822  6EDF               	movwf	indf2,c
  2321                           
  2322                           ;mTouchSensor.c: 96: pSensor->channelNumber = channelNumber;
  2323  000824  EE20 F01E          	lfsr	2,30
  2324  000828  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2325  00082A  26D9               	addwf	fsr2l,f,c
  2326  00082C  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2327  00082E  22DA               	addwfc	fsr2h,f,c
  2328  000830  C09D  FFDF         	movff	MTouchSetSensor@channelNumber,indf2
  2329                           
  2330                           ;mTouchSensor.c: 97: pSensor->state = SENSOR_INITIALIZING;
  2331  000834  EE20 F01C          	lfsr	2,28
  2332  000838  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2333  00083A  26D9               	addwf	fsr2l,f,c
  2334  00083C  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2335  00083E  22DA               	addwfc	fsr2h,f,c
  2336  000840  0E00               	movlw	0
  2337  000842  6EDF               	movwf	indf2,c
  2338                           
  2339                           ;mTouchSensor.c: 98: pSensor->debounceCount = 2 + 50;
  2340  000844  EE20 F01A          	lfsr	2,26
  2341  000848  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2342  00084A  26D9               	addwf	fsr2l,f,c
  2343  00084C  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2344  00084E  22DA               	addwfc	fsr2h,f,c
  2345  000850  0E34               	movlw	52
  2346  000852  6EDE               	movwf	postinc2,c
  2347  000854  0E00               	movlw	0
  2348  000856  6EDD               	movwf	postdec2,c
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;mTouchSensor.c: 101: if(oversampling > 0)
  2352  000858  BFA1               	btfsc	(MTouchSetSensor@oversampling+1)& (0+255),7,b
  2353  00085A  D010               	goto	l157
  2354  00085C  51A1               	movf	(MTouchSetSensor@oversampling+1)& (0+255),w,b
  2355  00085E  E103               	bnz	u640
  2356  000860  05A0               	decf	MTouchSetSensor@oversampling& (0+255),w,b
  2357  000862  A0D8               	btfss	status,0,c
  2358  000864  D00B               	goto	l157
  2359  000866                     u640:
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;mTouchSensor.c: 102: {
  2363                           ;mTouchSensor.c: 103: pSensor->samplesNumber = oversampling;
  2364  000866  EE20 F010          	lfsr	2,16
  2365  00086A  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2366  00086C  26D9               	addwf	fsr2l,f,c
  2367  00086E  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2368  000870  22DA               	addwfc	fsr2h,f,c
  2369  000872  C0A0  FFDE         	movff	MTouchSetSensor@oversampling,postinc2
  2370  000876  C0A1  FFDD         	movff	MTouchSetSensor@oversampling+1,postdec2
  2371                           
  2372                           ;mTouchSensor.c: 104: }else{
  2373  00087A  D00A               	goto	l158
  2374  00087C                     l157:
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;mTouchSensor.c: 105: pSensor->samplesNumber = 32;
  2378                           
  2379                           ; BSR set to: 0
  2380  00087C  EE20 F010          	lfsr	2,16
  2381  000880  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2382  000882  26D9               	addwf	fsr2l,f,c
  2383  000884  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2384  000886  22DA               	addwfc	fsr2h,f,c
  2385  000888  0E20               	movlw	32
  2386  00088A  6EDE               	movwf	postinc2,c
  2387  00088C  0E00               	movlw	0
  2388  00088E  6EDD               	movwf	postdec2,c
  2389  000890                     l158:
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;mTouchSensor.c: 106: }
  2393                           ;mTouchSensor.c: 108: pSensor->sampleCounter = pSensor->samplesNumber;
  2394                           
  2395                           ; BSR set to: 0
  2396  000890  EE20 F010          	lfsr	2,16
  2397  000894  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2398  000896  26D9               	addwf	fsr2l,f,c
  2399  000898  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2400  00089A  22DA               	addwfc	fsr2h,f,c
  2401  00089C  EE10 F00E          	lfsr	1,14
  2402  0008A0  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2403  0008A2  26E1               	addwf	fsr1l,f,c
  2404  0008A4  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2405  0008A6  22E2               	addwfc	fsr1h,f,c
  2406  0008A8  CFDE FFE6          	movff	postinc2,postinc1
  2407  0008AC  CFDD FFE5          	movff	postdec2,postdec1
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;mTouchSensor.c: 119: pSensor->delta = 0;
  2411  0008B0  EE20 F018          	lfsr	2,24
  2412  0008B4  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2413  0008B6  26D9               	addwf	fsr2l,f,c
  2414  0008B8  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2415  0008BA  22DA               	addwfc	fsr2h,f,c
  2416  0008BC  0E00               	movlw	0
  2417  0008BE  6EDE               	movwf	postinc2,c
  2418  0008C0  0E00               	movlw	0
  2419  0008C2  6EDD               	movwf	postdec2,c
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;mTouchSensor.c: 120: pSensor->oversampleFilterData = 0;
  2423  0008C4  EE20 F004          	lfsr	2,4
  2424  0008C8  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2425  0008CA  26D9               	addwf	fsr2l,f,c
  2426  0008CC  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2427  0008CE  22DA               	addwfc	fsr2h,f,c
  2428  0008D0  6ADE               	clrf	postinc2,c
  2429  0008D2  6ADE               	clrf	postinc2,c
  2430  0008D4  6ADE               	clrf	postinc2,c
  2431  0008D6  6ADD               	clrf	postdec2,c
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;mTouchSensor.c: 121: pSensor->decimateFilterData = 0;
  2435  0008D8  EE20 F00C          	lfsr	2,12
  2436  0008DC  51A6               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2437  0008DE  26D9               	addwf	fsr2l,f,c
  2438  0008E0  51A7               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2439  0008E2  22DA               	addwfc	fsr2h,f,c
  2440  0008E4  0E00               	movlw	0
  2441  0008E6  6EDE               	movwf	postinc2,c
  2442  0008E8  0E00               	movlw	0
  2443  0008EA  6EDD               	movwf	postdec2,c
  2444                           
  2445                           ; BSR set to: 0
  2446  0008EC  0012               	return		;funcret
  2447  0008EE                     __end_of_MTouchSetSensor:
  2448                           	opt stack 0
  2449                           tblptru	equ	0xFF8
  2450                           prodh	equ	0xFF4
  2451                           prodl	equ	0xFF3
  2452                           postinc0	equ	0xFEE
  2453                           fsr0h	equ	0xFEA
  2454                           fsr0l	equ	0xFE9
  2455                           wreg	equ	0xFE8
  2456                           postinc1	equ	0xFE6
  2457                           postdec1	equ	0xFE5
  2458                           fsr1h	equ	0xFE2
  2459                           fsr1l	equ	0xFE1
  2460                           indf2	equ	0xFDF
  2461                           postinc2	equ	0xFDE
  2462                           postdec2	equ	0xFDD
  2463                           plusw2	equ	0xFDB
  2464                           fsr2h	equ	0xFDA
  2465                           fsr2l	equ	0xFD9
  2466                           status	equ	0xFD8
  2467                           
  2468 ;; *************** function _touch_step_1 *****************
  2469 ;; Defined at:
  2470 ;;		line 9 in file "includes/configtouch/myConfigTouch.c"
  2471 ;; Parameters:    Size  Location     Type
  2472 ;;		None
  2473 ;; Auto vars:     Size  Location     Type
  2474 ;;		None
  2475 ;; Return value:  Size  Location     Type
  2476 ;;                  1    wreg      void 
  2477 ;; Registers used:
  2478 ;;		wreg, status,2, cstack
  2479 ;; Tracked objects:
  2480 ;;		On entry : 0/0
  2481 ;;		On exit  : 0/0
  2482 ;;		Unchanged: 0/0
  2483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;Total ram usage:        0 bytes
  2489 ;; Hardware stack levels used:    1
  2490 ;; Hardware stack levels required when called:    5
  2491 ;; This function calls:
  2492 ;;		_MTouchInit
  2493 ;; This function is called by:
  2494 ;;		_configuration_mTouch
  2495 ;; This function uses a non-reentrant model
  2496 ;;
  2497                           
  2498                           	psect	text11
  2499  000FF8                     __ptext11:
  2500                           	opt stack 0
  2501  000FF8                     _touch_step_1:
  2502                           	opt stack 24
  2503                           
  2504                           ;myConfigTouch.c: 12: MTouchInit();
  2505                           
  2506                           ; BSR set to: 0
  2507                           ;incstack = 0
  2508  000FF8  ECB8  F007         	call	_MTouchInit	;wreg free
  2509  000FFC  0012               	return		;funcret
  2510  000FFE                     __end_of_touch_step_1:
  2511                           	opt stack 0
  2512                           tblptru	equ	0xFF8
  2513                           prodh	equ	0xFF4
  2514                           prodl	equ	0xFF3
  2515                           postinc0	equ	0xFEE
  2516                           fsr0h	equ	0xFEA
  2517                           fsr0l	equ	0xFE9
  2518                           wreg	equ	0xFE8
  2519                           postinc1	equ	0xFE6
  2520                           postdec1	equ	0xFE5
  2521                           fsr1h	equ	0xFE2
  2522                           fsr1l	equ	0xFE1
  2523                           indf2	equ	0xFDF
  2524                           postinc2	equ	0xFDE
  2525                           postdec2	equ	0xFDD
  2526                           plusw2	equ	0xFDB
  2527                           fsr2h	equ	0xFDA
  2528                           fsr2l	equ	0xFD9
  2529                           status	equ	0xFD8
  2530                           
  2531 ;; *************** function _MTouchInit *****************
  2532 ;; Defined at:
  2533 ;;		line 125 in file "includes/mtouch/mTouchSensor.c"
  2534 ;; Parameters:    Size  Location     Type
  2535 ;;		None
  2536 ;; Auto vars:     Size  Location     Type
  2537 ;;		None
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  1    wreg      void 
  2540 ;; Registers used:
  2541 ;;		wreg, status,2
  2542 ;; Tracked objects:
  2543 ;;		On entry : 0/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;Total ram usage:        0 bytes
  2552 ;; Hardware stack levels used:    1
  2553 ;; Hardware stack levels required when called:    4
  2554 ;; This function calls:
  2555 ;;		Nothing
  2556 ;; This function is called by:
  2557 ;;		_touch_step_1
  2558 ;; This function uses a non-reentrant model
  2559 ;;
  2560                           
  2561                           	psect	text12
  2562  000F70                     __ptext12:
  2563                           	opt stack 0
  2564  000F70                     _MTouchInit:
  2565                           	opt stack 24
  2566                           
  2567                           ;mTouchSensor.c: 130: ADCON0=0;
  2568                           
  2569                           ;incstack = 0
  2570  000F70  0E00               	movlw	0
  2571  000F72  6EC2               	movwf	4034,c	;volatile
  2572                           
  2573                           ;mTouchSensor.c: 131: ADCON1=0;
  2574  000F74  0E00               	movlw	0
  2575  000F76  6EC1               	movwf	4033,c	;volatile
  2576                           
  2577                           ;mTouchSensor.c: 132: ADCON2=0;
  2578  000F78  0E00               	movlw	0
  2579  000F7A  6EC0               	movwf	4032,c	;volatile
  2580                           
  2581                           ;mTouchSensor.c: 133: ADCON2bits.ADFM=1;
  2582  000F7C  8EC0               	bsf	4032,7,c	;volatile
  2583                           
  2584                           ;mTouchSensor.c: 134: ADCON2bits.ACQT=0;
  2585  000F7E  96C0               	bcf	4032,3,c	;volatile
  2586  000F80  98C0               	bcf	4032,4,c	;volatile
  2587  000F82  9AC0               	bcf	4032,5,c	;volatile
  2588                           
  2589                           ;mTouchSensor.c: 135: ADCON2bits.ADCS = 1;
  2590  000F84  50C0               	movf	4032,w,c	;volatile
  2591  000F86  0BF8               	andlw	-8
  2592  000F88  0901               	iorlw	1
  2593  000F8A  6EC0               	movwf	4032,c	;volatile
  2594                           
  2595                           ;mTouchSensor.c: 136: ADCON0bits.ADON = 1;
  2596  000F8C  80C2               	bsf	4034,0,c	;volatile
  2597  000F8E  0012               	return		;funcret
  2598  000F90                     __end_of_MTouchInit:
  2599                           	opt stack 0
  2600                           tblptru	equ	0xFF8
  2601                           prodh	equ	0xFF4
  2602                           prodl	equ	0xFF3
  2603                           postinc0	equ	0xFEE
  2604                           fsr0h	equ	0xFEA
  2605                           fsr0l	equ	0xFE9
  2606                           wreg	equ	0xFE8
  2607                           postinc1	equ	0xFE6
  2608                           postdec1	equ	0xFE5
  2609                           fsr1h	equ	0xFE2
  2610                           fsr1l	equ	0xFE1
  2611                           indf2	equ	0xFDF
  2612                           postinc2	equ	0xFDE
  2613                           postdec2	equ	0xFDD
  2614                           plusw2	equ	0xFDB
  2615                           fsr2h	equ	0xFDA
  2616                           fsr2l	equ	0xFD9
  2617                           status	equ	0xFD8
  2618                           
  2619 ;; *************** function _TMR2_Initialize *****************
  2620 ;; Defined at:
  2621 ;;		line 5 in file "includes/timer/tmr2.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;		None
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;		None
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  1    wreg      void 
  2628 ;; Registers used:
  2629 ;;		wreg, status,2
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2639 ;;Total ram usage:        0 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    4
  2642 ;; This function calls:
  2643 ;;		Nothing
  2644 ;; This function is called by:
  2645 ;;		_main
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           	psect	text13
  2650  000FC0                     __ptext13:
  2651                           	opt stack 0
  2652  000FC0                     _TMR2_Initialize:
  2653                           	opt stack 26
  2654                           
  2655                           ;tmr2.c: 8: PR2 = 0xF9;
  2656                           
  2657                           ;incstack = 0
  2658  000FC0  0EF9               	movlw	249
  2659  000FC2  6EBB               	movwf	4027,c	;volatile
  2660                           
  2661                           ;tmr2.c: 10: TMR2 = 0x00;
  2662  000FC4  0E00               	movlw	0
  2663  000FC6  6EBC               	movwf	4028,c	;volatile
  2664                           
  2665                           ;tmr2.c: 12: PIR1bits.TMR2IF = 0;
  2666  000FC8  929E               	bcf	3998,1,c	;volatile
  2667                           
  2668                           ;tmr2.c: 14: PIE1bits.TMR2IE = 1;
  2669  000FCA  829D               	bsf	3997,1,c	;volatile
  2670                           
  2671                           ;tmr2.c: 16: T2CON = 0x1E;
  2672  000FCC  0E1E               	movlw	30
  2673  000FCE  6EBA               	movwf	4026,c	;volatile
  2674  000FD0  0012               	return		;funcret
  2675  000FD2                     __end_of_TMR2_Initialize:
  2676                           	opt stack 0
  2677                           tblptru	equ	0xFF8
  2678                           prodh	equ	0xFF4
  2679                           prodl	equ	0xFF3
  2680                           postinc0	equ	0xFEE
  2681                           fsr0h	equ	0xFEA
  2682                           fsr0l	equ	0xFE9
  2683                           wreg	equ	0xFE8
  2684                           postinc1	equ	0xFE6
  2685                           postdec1	equ	0xFE5
  2686                           fsr1h	equ	0xFE2
  2687                           fsr1l	equ	0xFE1
  2688                           indf2	equ	0xFDF
  2689                           postinc2	equ	0xFDE
  2690                           postdec2	equ	0xFDD
  2691                           plusw2	equ	0xFDB
  2692                           fsr2h	equ	0xFDA
  2693                           fsr2l	equ	0xFD9
  2694                           status	equ	0xFD8
  2695                           
  2696 ;; *************** function _PIN_MANAGER_Initialize *****************
  2697 ;; Defined at:
  2698 ;;		line 4 in file "includes/pinconfig/pin_manager.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;		None
  2701 ;; Auto vars:     Size  Location     Type
  2702 ;;		None
  2703 ;; Return value:  Size  Location     Type
  2704 ;;                  1    wreg      void 
  2705 ;; Registers used:
  2706 ;;		wreg, status,2
  2707 ;; Tracked objects:
  2708 ;;		On entry : 0/0
  2709 ;;		On exit  : 0/0
  2710 ;;		Unchanged: 0/0
  2711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;Total ram usage:        0 bytes
  2717 ;; Hardware stack levels used:    1
  2718 ;; Hardware stack levels required when called:    4
  2719 ;; This function calls:
  2720 ;;		Nothing
  2721 ;; This function is called by:
  2722 ;;		_main
  2723 ;; This function uses a non-reentrant model
  2724 ;;
  2725                           
  2726                           	psect	text14
  2727  000EC8                     __ptext14:
  2728                           	opt stack 0
  2729  000EC8                     _PIN_MANAGER_Initialize:
  2730                           	opt stack 26
  2731                           
  2732                           ;pin_manager.c: 8: LATA = 0b00000001;
  2733                           
  2734                           ;incstack = 0
  2735  000EC8  0E01               	movlw	1
  2736  000ECA  6E89               	movwf	3977,c	;volatile
  2737                           
  2738                           ;pin_manager.c: 9: LATB = 0b00111111;
  2739  000ECC  0E3F               	movlw	63
  2740  000ECE  6E8A               	movwf	3978,c	;volatile
  2741                           
  2742                           ;pin_manager.c: 10: LATC = 0b00000000;
  2743  000ED0  0E00               	movlw	0
  2744  000ED2  6E8B               	movwf	3979,c	;volatile
  2745                           
  2746                           ;pin_manager.c: 11: LATD = 0b00000000;
  2747  000ED4  0E00               	movlw	0
  2748  000ED6  6E8C               	movwf	3980,c	;volatile
  2749                           
  2750                           ;pin_manager.c: 12: LATE = 0b00000000;
  2751  000ED8  0E00               	movlw	0
  2752  000EDA  6E8D               	movwf	3981,c	;volatile
  2753                           
  2754                           ;pin_manager.c: 17: TRISA = 0b00000001;
  2755  000EDC  0E01               	movlw	1
  2756  000EDE  6E92               	movwf	3986,c	;volatile
  2757                           
  2758                           ;pin_manager.c: 18: TRISB = 0b00111111;
  2759  000EE0  0E3F               	movlw	63
  2760  000EE2  6E93               	movwf	3987,c	;volatile
  2761                           
  2762                           ;pin_manager.c: 19: TRISC = 0b00000000;
  2763  000EE4  0E00               	movlw	0
  2764  000EE6  6E94               	movwf	3988,c	;volatile
  2765                           
  2766                           ;pin_manager.c: 20: TRISD = 0b00000000;
  2767  000EE8  0E00               	movlw	0
  2768  000EEA  6E95               	movwf	3989,c	;volatile
  2769                           
  2770                           ;pin_manager.c: 21: TRISE = 0b00000000;
  2771  000EEC  0E00               	movlw	0
  2772  000EEE  6E96               	movwf	3990,c	;volatile
  2773                           
  2774                           ;pin_manager.c: 26: ANSELA = 0b00000001;
  2775  000EF0  0E01               	movlw	1
  2776  000EF2  010F               	movlb	15	; () banked
  2777  000EF4  6F38               	movwf	56,b	;volatile
  2778                           
  2779                           ;pin_manager.c: 27: ANSELB = 0b00111111;
  2780  000EF6  0E3F               	movlw	63
  2781  000EF8  6F39               	movwf	57,b	;volatile
  2782                           
  2783                           ;pin_manager.c: 28: ANSELC = 0b00000000;
  2784  000EFA  0E00               	movlw	0
  2785  000EFC  6F3A               	movwf	58,b	;volatile
  2786                           
  2787                           ;pin_manager.c: 29: ANSELD = 0b00000000;
  2788  000EFE  0E00               	movlw	0
  2789  000F00  6F3B               	movwf	59,b	;volatile
  2790                           
  2791                           ;pin_manager.c: 30: ANSELE = 0b00000000;
  2792  000F02  0E00               	movlw	0
  2793  000F04  6F3C               	movwf	60,b	;volatile
  2794                           
  2795                           ; BSR set to: 15
  2796                           ;pin_manager.c: 36: INTCONbits.PEIE = 1;
  2797  000F06  8CF2               	bsf	intcon,6,c	;volatile
  2798                           
  2799                           ; BSR set to: 15
  2800                           ;pin_manager.c: 37: INTCONbits.GIE = 1;
  2801  000F08  8EF2               	bsf	intcon,7,c	;volatile
  2802                           
  2803                           ; BSR set to: 15
  2804                           ;pin_manager.c: 38: INTCONbits.RBIF = 0;
  2805  000F0A  90F2               	bcf	intcon,0,c	;volatile
  2806                           
  2807                           ;pin_manager.c: 41: OSCCON = 0xB0;
  2808  000F0C  0EB0               	movlw	176
  2809  000F0E  6ED3               	movwf	4051,c	;volatile
  2810                           
  2811                           ;pin_manager.c: 43: OSCCON2 = 0x04;
  2812  000F10  0E04               	movlw	4
  2813  000F12  6ED2               	movwf	4050,c	;volatile
  2814                           
  2815                           ;pin_manager.c: 45: OSCTUNE = 0x00;
  2816  000F14  0E00               	movlw	0
  2817  000F16  6E9B               	movwf	3995,c	;volatile
  2818                           
  2819                           ; BSR set to: 15
  2820  000F18  0012               	return		;funcret
  2821  000F1A                     __end_of_PIN_MANAGER_Initialize:
  2822                           	opt stack 0
  2823                           tblptru	equ	0xFF8
  2824                           prodh	equ	0xFF4
  2825                           prodl	equ	0xFF3
  2826                           intcon	equ	0xFF2
  2827                           postinc0	equ	0xFEE
  2828                           fsr0h	equ	0xFEA
  2829                           fsr0l	equ	0xFE9
  2830                           wreg	equ	0xFE8
  2831                           postinc1	equ	0xFE6
  2832                           postdec1	equ	0xFE5
  2833                           fsr1h	equ	0xFE2
  2834                           fsr1l	equ	0xFE1
  2835                           indf2	equ	0xFDF
  2836                           postinc2	equ	0xFDE
  2837                           postdec2	equ	0xFDD
  2838                           plusw2	equ	0xFDB
  2839                           fsr2h	equ	0xFDA
  2840                           fsr2l	equ	0xFD9
  2841                           status	equ	0xFD8
  2842                           
  2843 ;; *************** function _I2C_Master_Write *****************
  2844 ;; Defined at:
  2845 ;;		line 60 in file "includes/I2C/I2CDevice.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;  data            1    wreg     unsigned char 
  2848 ;; Auto vars:     Size  Location     Type
  2849 ;;  data            1    3[BANK0 ] unsigned char 
  2850 ;;  temp            1    2[BANK0 ] unsigned char 
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      unsigned char 
  2853 ;; Registers used:
  2854 ;;		wreg, status,2, status,0
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;Total ram usage:        4 bytes
  2865 ;; Hardware stack levels used:    1
  2866 ;; Hardware stack levels required when called:    4
  2867 ;; This function calls:
  2868 ;;		Nothing
  2869 ;; This function is called by:
  2870 ;;		_main
  2871 ;; This function uses a non-reentrant model
  2872 ;;
  2873                           
  2874                           	psect	text15
  2875  000F1A                     __ptext15:
  2876                           	opt stack 0
  2877  000F1A                     _I2C_Master_Write:
  2878                           	opt stack 26
  2879                           
  2880                           ; BSR set to: 15
  2881                           ;incstack = 0
  2882                           ;I2C_Master_Write@data stored from wreg
  2883  000F1A  0100               	movlb	0	; () banked
  2884  000F1C  6F9B               	movwf	I2C_Master_Write@data& (0+255),b
  2885                           
  2886                           ;I2CDevice.c: 63: unsigned char temp;
  2887                           ;I2CDevice.c: 64: temp = (unsigned char)((((data) & 0x0F) << 4) | (((data) & 0xF0) >> 4)
      +                          );
  2888  000F1E  C09B  F098         	movff	I2C_Master_Write@data,??_I2C_Master_Write
  2889  000F22  0100               	movlb	0	; () banked
  2890  000F24  3B98               	swapf	??_I2C_Master_Write& (0+255),f,b
  2891  000F26  0E0F               	movlw	15
  2892  000F28  1798               	andwf	??_I2C_Master_Write& (0+255),f,b
  2893  000F2A  0E0F               	movlw	15
  2894  000F2C  1798               	andwf	??_I2C_Master_Write& (0+255),f,b
  2895  000F2E  C09B  F099         	movff	I2C_Master_Write@data,??_I2C_Master_Write+1
  2896  000F32  0E0F               	movlw	15
  2897  000F34  1799               	andwf	(??_I2C_Master_Write+1)& (0+255),f,b
  2898  000F36  3999               	swapf	(??_I2C_Master_Write+1)& (0+255),w,b
  2899  000F38  0BF0               	andlw	240
  2900  000F3A  1198               	iorwf	??_I2C_Master_Write& (0+255),w,b
  2901  000F3C  6F9A               	movwf	I2C_Master_Write@temp& (0+255),b
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;I2CDevice.c: 66: SSP1BUF = data;
  2905  000F3E  C09B  FFC9         	movff	I2C_Master_Write@data,4041	;volatile
  2906  000F42                     
  2907                           ; BSR set to: 0
  2908  000F42  A4C7               	btfss	4039,2,c	;volatile
  2909  000F44  0012               	return	
  2910  000F46  D7FD               	goto	l70
  2911  000F48                     __end_of_I2C_Master_Write:
  2912                           	opt stack 0
  2913                           tblptru	equ	0xFF8
  2914                           prodh	equ	0xFF4
  2915                           prodl	equ	0xFF3
  2916                           intcon	equ	0xFF2
  2917                           postinc0	equ	0xFEE
  2918                           fsr0h	equ	0xFEA
  2919                           fsr0l	equ	0xFE9
  2920                           wreg	equ	0xFE8
  2921                           postinc1	equ	0xFE6
  2922                           postdec1	equ	0xFE5
  2923                           fsr1h	equ	0xFE2
  2924                           fsr1l	equ	0xFE1
  2925                           indf2	equ	0xFDF
  2926                           postinc2	equ	0xFDE
  2927                           postdec2	equ	0xFDD
  2928                           plusw2	equ	0xFDB
  2929                           fsr2h	equ	0xFDA
  2930                           fsr2l	equ	0xFD9
  2931                           status	equ	0xFD8
  2932                           
  2933 ;; *************** function _I2C_Master_Stop *****************
  2934 ;; Defined at:
  2935 ;;		line 72 in file "includes/I2C/I2CDevice.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;		None
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;		None
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		status,2, status,0
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2953 ;;Total ram usage:        0 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    4
  2956 ;; This function calls:
  2957 ;;		Nothing
  2958 ;; This function is called by:
  2959 ;;		_main
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text16
  2964  000FDE                     __ptext16:
  2965                           	opt stack 0
  2966  000FDE                     _I2C_Master_Stop:
  2967                           	opt stack 26
  2968                           
  2969                           ;I2CDevice.c: 74: SSP1CON2 |= 0b00000100;
  2970                           
  2971                           ;incstack = 0
  2972  000FDE  84C5               	bsf	4037,2,c	;volatile
  2973  000FE0  A4C5               	btfss	4037,2,c	;volatile
  2974  000FE2  0012               	return	
  2975  000FE4  D7FD               	goto	l76
  2976  000FE6                     __end_of_I2C_Master_Stop:
  2977                           	opt stack 0
  2978                           tblptru	equ	0xFF8
  2979                           prodh	equ	0xFF4
  2980                           prodl	equ	0xFF3
  2981                           intcon	equ	0xFF2
  2982                           postinc0	equ	0xFEE
  2983                           fsr0h	equ	0xFEA
  2984                           fsr0l	equ	0xFE9
  2985                           wreg	equ	0xFE8
  2986                           postinc1	equ	0xFE6
  2987                           postdec1	equ	0xFE5
  2988                           fsr1h	equ	0xFE2
  2989                           fsr1l	equ	0xFE1
  2990                           indf2	equ	0xFDF
  2991                           postinc2	equ	0xFDE
  2992                           postdec2	equ	0xFDD
  2993                           plusw2	equ	0xFDB
  2994                           fsr2h	equ	0xFDA
  2995                           fsr2l	equ	0xFD9
  2996                           status	equ	0xFD8
  2997                           
  2998 ;; *************** function _I2C_Master_Start *****************
  2999 ;; Defined at:
  3000 ;;		line 50 in file "includes/I2C/I2CDevice.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;		None
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;		None
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      unsigned char 
  3007 ;; Registers used:
  3008 ;;		status,2, status,0
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3018 ;;Total ram usage:        0 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:    4
  3021 ;; This function calls:
  3022 ;;		Nothing
  3023 ;; This function is called by:
  3024 ;;		_main
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           	psect	text17
  3029  000FD2                     __ptext17:
  3030                           	opt stack 0
  3031  000FD2                     _I2C_Master_Start:
  3032                           	opt stack 26
  3033                           
  3034                           ;I2CDevice.c: 52: SSP1CON2 |= 0b00000001;
  3035                           
  3036                           ;incstack = 0
  3037  000FD2  80C5               	bsf	4037,0,c	;volatile
  3038  000FD4  A69E               	btfss	3998,3,c	;volatile
  3039  000FD6  D7FE               	goto	l61
  3040  000FD8                     u950:
  3041                           
  3042                           ;I2CDevice.c: 55: while(SSP1CON2 & 0b00000001);
  3043  000FD8  A0C5               	btfss	4037,0,c	;volatile
  3044  000FDA  0012               	return	
  3045  000FDC  D7FD               	goto	u950
  3046  000FDE                     __end_of_I2C_Master_Start:
  3047                           	opt stack 0
  3048                           tblptru	equ	0xFF8
  3049                           prodh	equ	0xFF4
  3050                           prodl	equ	0xFF3
  3051                           intcon	equ	0xFF2
  3052                           postinc0	equ	0xFEE
  3053                           fsr0h	equ	0xFEA
  3054                           fsr0l	equ	0xFE9
  3055                           wreg	equ	0xFE8
  3056                           postinc1	equ	0xFE6
  3057                           postdec1	equ	0xFE5
  3058                           fsr1h	equ	0xFE2
  3059                           fsr1l	equ	0xFE1
  3060                           indf2	equ	0xFDF
  3061                           postinc2	equ	0xFDE
  3062                           postdec2	equ	0xFDD
  3063                           plusw2	equ	0xFDB
  3064                           fsr2h	equ	0xFDA
  3065                           fsr2l	equ	0xFD9
  3066                           status	equ	0xFD8
  3067                           
  3068 ;; *************** function _I2C_Master_Init *****************
  3069 ;; Defined at:
  3070 ;;		line 36 in file "includes/I2C/I2CDevice.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;		None
  3073 ;; Auto vars:     Size  Location     Type
  3074 ;;		None
  3075 ;; Return value:  Size  Location     Type
  3076 ;;                  1    wreg      void 
  3077 ;; Registers used:
  3078 ;;		wreg, status,2, status,0
  3079 ;; Tracked objects:
  3080 ;;		On entry : 0/0
  3081 ;;		On exit  : 0/0
  3082 ;;		Unchanged: 0/0
  3083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3084 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;Total ram usage:        4 bytes
  3089 ;; Hardware stack levels used:    1
  3090 ;; Hardware stack levels required when called:    4
  3091 ;; This function calls:
  3092 ;;		Nothing
  3093 ;; This function is called by:
  3094 ;;		_main
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           	psect	text18
  3099  000F90                     __ptext18:
  3100                           	opt stack 0
  3101  000F90                     _I2C_Master_Init:
  3102                           	opt stack 26
  3103                           
  3104                           ;I2CDevice.c: 38: SSP1CON1 = 0b00100000 | 0b00001000;
  3105                           
  3106                           ;incstack = 0
  3107  000F90  0E28               	movlw	40
  3108  000F92  6EC6               	movwf	4038,c	;volatile
  3109                           
  3110                           ;I2CDevice.c: 39: SSP1CON2 = 0;
  3111  000F94  0E00               	movlw	0
  3112  000F96  6EC5               	movwf	4037,c	;volatile
  3113                           
  3114                           ;I2CDevice.c: 40: SSP1CON3 |= 0b00001000;
  3115  000F98  86CB               	bsf	4043,3,c	;volatile
  3116                           
  3117                           ;I2CDevice.c: 41: SSP1ADD = 0x9F;
  3118  000F9A  0E9F               	movlw	159
  3119  000F9C  6EC8               	movwf	4040,c	;volatile
  3120                           
  3121                           ;I2CDevice.c: 42: SSP1STAT = 0b10000000;
  3122  000F9E  0E80               	movlw	128
  3123  000FA0  6EC7               	movwf	4039,c	;volatile
  3124                           
  3125                           ;I2CDevice.c: 43: ANSELCbits.ANSC3 = 0;
  3126  000FA2  010F               	movlb	15	; () banked
  3127  000FA4  973A               	bcf	58,3,b	;volatile
  3128                           
  3129                           ; BSR set to: 15
  3130                           ;I2CDevice.c: 44: ANSELCbits.ANSC4 = 0;
  3131  000FA6  993A               	bcf	58,4,b	;volatile
  3132                           
  3133                           ; BSR set to: 15
  3134                           ;I2CDevice.c: 46: TRISCbits.TRISC3 = 1;
  3135  000FA8  8694               	bsf	3988,3,c	;volatile
  3136                           
  3137                           ; BSR set to: 15
  3138                           ;I2CDevice.c: 47: TRISCbits.TRISC4 = 1;
  3139  000FAA  8894               	bsf	3988,4,c	;volatile
  3140                           
  3141                           ; BSR set to: 15
  3142  000FAC  0012               	return		;funcret
  3143  000FAE                     __end_of_I2C_Master_Init:
  3144                           	opt stack 0
  3145                           tblptru	equ	0xFF8
  3146                           prodh	equ	0xFF4
  3147                           prodl	equ	0xFF3
  3148                           intcon	equ	0xFF2
  3149                           postinc0	equ	0xFEE
  3150                           fsr0h	equ	0xFEA
  3151                           fsr0l	equ	0xFE9
  3152                           wreg	equ	0xFE8
  3153                           postinc1	equ	0xFE6
  3154                           postdec1	equ	0xFE5
  3155                           fsr1h	equ	0xFE2
  3156                           fsr1l	equ	0xFE1
  3157                           indf2	equ	0xFDF
  3158                           postinc2	equ	0xFDE
  3159                           postdec2	equ	0xFDD
  3160                           plusw2	equ	0xFDB
  3161                           fsr2h	equ	0xFDA
  3162                           fsr2l	equ	0xFD9
  3163                           status	equ	0xFD8
  3164                           
  3165 ;; *************** function _interrupcoes *****************
  3166 ;; Defined at:
  3167 ;;		line 10 in file "main.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;		None
  3170 ;; Auto vars:     Size  Location     Type
  3171 ;;		None
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      void 
  3174 ;; Registers used:
  3175 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3183 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3184 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3185 ;;Total ram usage:       18 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    3
  3188 ;; This function calls:
  3189 ;;		_MTouchAcquisition
  3190 ;; This function is called by:
  3191 ;;		Interrupt level 2
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	intcode
  3196  000008                     __pintcode:
  3197                           	opt stack 0
  3198  000008                     _interrupcoes:
  3199                           	opt stack 24
  3200                           
  3201                           ; BSR set to: 15
  3202                           ;incstack = 0
  3203  000008  8234               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3204  00000A  CFFA F021          	movff	pclath,??_interrupcoes
  3205  00000E  CFFB F022          	movff	pclatu,??_interrupcoes+1
  3206  000012  CFE9 F023          	movff	fsr0l,??_interrupcoes+2
  3207  000016  CFEA F024          	movff	fsr0h,??_interrupcoes+3
  3208  00001A  CFE1 F025          	movff	fsr1l,??_interrupcoes+4
  3209  00001E  CFE2 F026          	movff	fsr1h,??_interrupcoes+5
  3210  000022  CFD9 F027          	movff	fsr2l,??_interrupcoes+6
  3211  000026  CFDA F028          	movff	fsr2h,??_interrupcoes+7
  3212  00002A  CFF3 F029          	movff	prodl,??_interrupcoes+8
  3213  00002E  CFF4 F02A          	movff	prodh,??_interrupcoes+9
  3214  000032  CFF6 F02B          	movff	tblptrl,??_interrupcoes+10
  3215  000036  CFF7 F02C          	movff	tblptrh,??_interrupcoes+11
  3216  00003A  CFF8 F02D          	movff	tblptru,??_interrupcoes+12
  3217  00003E  CFF5 F02E          	movff	tablat,??_interrupcoes+13
  3218  000042  C034  F02F         	movff	btemp,??_interrupcoes+14
  3219  000046  C035  F030         	movff	btemp+1,??_interrupcoes+15
  3220  00004A  C036  F031         	movff	btemp+2,??_interrupcoes+16
  3221  00004E  C037  F032         	movff	btemp+3,??_interrupcoes+17
  3222                           
  3223                           ;main.c: 11: if(PIR1bits.TMR2IF == 1){
  3224  000052  A29E               	btfss	3998,1,c	;volatile
  3225  000054  D003               	goto	i2l296
  3226                           
  3227                           ;main.c: 12: PIR1bits.TMR2IF = 0;
  3228  000056  929E               	bcf	3998,1,c	;volatile
  3229                           
  3230                           ;main.c: 13: MTouchAcquisition();
  3231  000058  EC77  F004         	call	_MTouchAcquisition	;wreg free
  3232  00005C                     i2l296:
  3233  00005C  C032  F037         	movff	??_interrupcoes+17,btemp+3
  3234  000060  C031  F036         	movff	??_interrupcoes+16,btemp+2
  3235  000064  C030  F035         	movff	??_interrupcoes+15,btemp+1
  3236  000068  C02F  F034         	movff	??_interrupcoes+14,btemp
  3237  00006C  C02E  FFF5         	movff	??_interrupcoes+13,tablat
  3238  000070  C02D  FFF8         	movff	??_interrupcoes+12,tblptru
  3239  000074  C02C  FFF7         	movff	??_interrupcoes+11,tblptrh
  3240  000078  C02B  FFF6         	movff	??_interrupcoes+10,tblptrl
  3241  00007C  C02A  FFF4         	movff	??_interrupcoes+9,prodh
  3242  000080  C029  FFF3         	movff	??_interrupcoes+8,prodl
  3243  000084  C028  FFDA         	movff	??_interrupcoes+7,fsr2h
  3244  000088  C027  FFD9         	movff	??_interrupcoes+6,fsr2l
  3245  00008C  C026  FFE2         	movff	??_interrupcoes+5,fsr1h
  3246  000090  C025  FFE1         	movff	??_interrupcoes+4,fsr1l
  3247  000094  C024  FFEA         	movff	??_interrupcoes+3,fsr0h
  3248  000098  C023  FFE9         	movff	??_interrupcoes+2,fsr0l
  3249  00009C  C022  FFFB         	movff	??_interrupcoes+1,pclatu
  3250  0000A0  C021  FFFA         	movff	??_interrupcoes,pclath
  3251  0000A4  9234               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3252  0000A6  0011               	retfie		f
  3253  0000A8                     __end_of_interrupcoes:
  3254                           	opt stack 0
  3255                           pclatu	equ	0xFFB
  3256                           pclath	equ	0xFFA
  3257                           tblptru	equ	0xFF8
  3258                           tblptrh	equ	0xFF7
  3259                           tblptrl	equ	0xFF6
  3260                           tablat	equ	0xFF5
  3261                           prodh	equ	0xFF4
  3262                           prodl	equ	0xFF3
  3263                           intcon	equ	0xFF2
  3264                           postinc0	equ	0xFEE
  3265                           fsr0h	equ	0xFEA
  3266                           fsr0l	equ	0xFE9
  3267                           wreg	equ	0xFE8
  3268                           postinc1	equ	0xFE6
  3269                           postdec1	equ	0xFE5
  3270                           fsr1h	equ	0xFE2
  3271                           fsr1l	equ	0xFE1
  3272                           indf2	equ	0xFDF
  3273                           postinc2	equ	0xFDE
  3274                           postdec2	equ	0xFDD
  3275                           plusw2	equ	0xFDB
  3276                           fsr2h	equ	0xFDA
  3277                           fsr2l	equ	0xFD9
  3278                           status	equ	0xFD8
  3279                           
  3280 ;; *************** function _MTouchAcquisition *****************
  3281 ;; Defined at:
  3282 ;;		line 259 in file "includes/mtouch/mTouchSensor.c"
  3283 ;; Parameters:    Size  Location     Type
  3284 ;;		None
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  pCurrentSens    2   30[COMRAM] PTR struct tag_SENSOR
  3287 ;;		 -> sensors(224), 
  3288 ;;  pPreviousSen    2   27[COMRAM] PTR struct tag_SENSOR
  3289 ;;		 -> sensors(224), 
  3290 ;;  pLastSensor     2   25[COMRAM] PTR struct tag_SENSOR
  3291 ;;		 -> sensors(224), 
  3292 ;;  data            2   23[COMRAM] short 
  3293 ;;  i               1   29[COMRAM] unsigned char 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      void 
  3296 ;; Registers used:
  3297 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;Total ram usage:       12 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    2
  3310 ;; This function calls:
  3311 ;;		_MTouchAcquisitionCVD
  3312 ;;		_MTouchSensorDecode
  3313 ;; This function is called by:
  3314 ;;		_interrupcoes
  3315 ;; This function uses a non-reentrant model
  3316 ;;
  3317                           
  3318                           	psect	text20
  3319  0008EE                     __ptext20:
  3320                           	opt stack 0
  3321  0008EE                     _MTouchAcquisition:
  3322                           	opt stack 24
  3323                           
  3324                           ;mTouchSensor.c: 261: INT16 data;
  3325                           ;mTouchSensor.c: 262: UINT8 i;
  3326                           ;mTouchSensor.c: 264: static UINT8 startSensorNumber = 0;
  3327                           ;mTouchSensor.c: 265: SENSOR* pCurrentSensor;
  3328                           ;mTouchSensor.c: 266: SENSOR* pLastSensor;
  3329                           ;mTouchSensor.c: 269: SENSOR* pPreviousSensor;
  3330                           ;mTouchSensor.c: 274: pCurrentSensor = (SENSOR*)sensors + startSensorNumber;
  3331                           
  3332                           ;incstack = 0
  3333  0008EE  5033               	movf	MTouchAcquisition@startSensorNumber,w,c
  3334  0008F0  0D20               	mullw	32
  3335  0008F2  0E00               	movlw	low _sensors
  3336  0008F4  24F3               	addwf	prodl,w,c
  3337  0008F6  6E1F               	movwf	MTouchAcquisition@pCurrentSensor,c
  3338  0008F8  0E01               	movlw	high _sensors
  3339  0008FA  20F4               	addwfc	prodh,w,c
  3340  0008FC  6E20               	movwf	MTouchAcquisition@pCurrentSensor+1,c
  3341                           
  3342                           ;mTouchSensor.c: 275: pLastSensor = (SENSOR*)sensors + (7-1);
  3343  0008FE  0EC0               	movlw	low (_sensors+192)
  3344  000900  6E1A               	movwf	MTouchAcquisition@pLastSensor,c
  3345  000902  0E01               	movlw	high (_sensors+192)
  3346  000904  6E1B               	movwf	MTouchAcquisition@pLastSensor+1,c
  3347                           
  3348                           ;mTouchSensor.c: 278: if(startSensorNumber == (7-1))
  3349  000906  0E06               	movlw	6
  3350  000908  1833               	xorwf	MTouchAcquisition@startSensorNumber,w,c
  3351  00090A  A4D8               	btfss	status,2,c
  3352  00090C  D004               	goto	i2l188
  3353                           
  3354                           ;mTouchSensor.c: 279: {
  3355                           ;mTouchSensor.c: 280: pPreviousSensor = (SENSOR*)sensors;
  3356  00090E  0E00               	movlw	low _sensors
  3357  000910  6E1C               	movwf	MTouchAcquisition@pPreviousSensor,c
  3358  000912  0E01               	movlw	high _sensors
  3359  000914  D005               	goto	L4
  3360  000916                     i2l188:
  3361                           
  3362                           ;mTouchSensor.c: 282: pPreviousSensor = pCurrentSensor + 1;
  3363  000916  0E20               	movlw	32
  3364  000918  241F               	addwf	MTouchAcquisition@pCurrentSensor,w,c
  3365  00091A  6E1C               	movwf	MTouchAcquisition@pPreviousSensor,c
  3366  00091C  0E00               	movlw	0
  3367  00091E  2020               	addwfc	MTouchAcquisition@pCurrentSensor+1,w,c
  3368  000920                     L4:
  3369  000920  6E1D               	movwf	MTouchAcquisition@pPreviousSensor+1,c
  3370                           
  3371                           ;mTouchSensor.c: 283: }
  3372                           ;mTouchSensor.c: 286: for(i=0; i<7; i++)
  3373  000922  0E00               	movlw	0
  3374  000924  6E1E               	movwf	MTouchAcquisition@i,c
  3375  000926                     i2l1998:
  3376  000926  0E06               	movlw	6
  3377  000928  641E               	cpfsgt	MTouchAcquisition@i,c
  3378  00092A  D001               	goto	i2l190
  3379  00092C  D08C               	goto	i2u105_40
  3380  00092E                     i2l190:
  3381                           
  3382                           ;mTouchSensor.c: 287: {
  3383                           ;mTouchSensor.c: 288: if((pCurrentSensor->state&SENSOR_DISCONNECTED) == 0)
  3384  00092E  EE20 F01C          	lfsr	2,28
  3385  000932  501F               	movf	MTouchAcquisition@pCurrentSensor,w,c
  3386  000934  26D9               	addwf	fsr2l,f,c
  3387  000936  5020               	movf	MTouchAcquisition@pCurrentSensor+1,w,c
  3388  000938  22DA               	addwfc	fsr2h,f,c
  3389  00093A  BEDF               	btfsc	indf2,7,c
  3390  00093C  D06E               	goto	i2l195
  3391                           
  3392                           ;mTouchSensor.c: 289: {
  3393                           ;mTouchSensor.c: 297: data = MTouchAcquisitionCVD(pCurrentSensor,pPreviousSensor);
  3394  00093E  C01F  F001         	movff	MTouchAcquisition@pCurrentSensor,MTouchAcquisitionCVD@pCurrentSensor
  3395  000942  C020  F002         	movff	MTouchAcquisition@pCurrentSensor+1,MTouchAcquisitionCVD@pCurrentSensor+1
  3396  000946  C01C  F003         	movff	MTouchAcquisition@pPreviousSensor,MTouchAcquisitionCVD@pPreviousSensor
  3397  00094A  C01D  F004         	movff	MTouchAcquisition@pPreviousSensor+1,MTouchAcquisitionCVD@pPreviousSensor+1
  3398  00094E  EC56  F000         	call	_MTouchAcquisitionCVD	;wreg free
  3399  000952  C001  F018         	movff	?_MTouchAcquisitionCVD,MTouchAcquisition@data
  3400  000956  C002  F019         	movff	?_MTouchAcquisitionCVD+1,MTouchAcquisition@data+1
  3401                           
  3402                           ;mTouchSensor.c: 302: if(data > pCurrentSensor->decimateFilterData)
  3403  00095A  EE20 F00C          	lfsr	2,12
  3404  00095E  501F               	movf	MTouchAcquisition@pCurrentSensor,w,c
  3405  000960  26D9               	addwf	fsr2l,f,c
  3406  000962  5020               	movf	MTouchAcquisition@pCurrentSensor+1,w,c
  3407  000964  22DA               	addwfc	fsr2h,f,c
  3408  000966  5018               	movf	MTouchAcquisition@data,w,c
  3409  000968  5CDE               	subwf	postinc2,w,c
  3410  00096A  50DE               	movf	postinc2,w,c
  3411  00096C  0A80               	xorlw	128
  3412  00096E  6E17               	movwf	(??_MTouchAcquisition+2)& (0+255),c
  3413  000970  5019               	movf	MTouchAcquisition@data+1,w,c
  3414  000972  0A80               	xorlw	128
  3415  000974  5817               	subwfb	(??_MTouchAcquisition+2)& (0+255),w,c
  3416  000976  B0D8               	btfsc	status,0,c
  3417  000978  D00A               	goto	i2l193
  3418                           
  3419                           ;mTouchSensor.c: 303: {
  3420                           ;mTouchSensor.c: 304: pCurrentSensor->decimateFilterData++;
  3421  00097A  EE20 F00C          	lfsr	2,12
  3422  00097E  501F               	movf	MTouchAcquisition@pCurrentSensor,w,c
  3423  000980  26D9               	addwf	fsr2l,f,c
  3424  000982  5020               	movf	MTouchAcquisition@pCurrentSensor+1,w,c
  3425  000984  22DA               	addwfc	fsr2h,f,c
  3426  000986  2ADE               	incf	postinc2,f,c
  3427  000988  0E00               	movlw	0
  3428  00098A  22DD               	addwfc	postdec2,f,c
  3429                           
  3430                           ;mTouchSensor.c: 305: } else {
  3431  00098C  D009               	goto	i2l194
  3432  00098E                     i2l193:
  3433                           
  3434                           ;mTouchSensor.c: 306: pCurrentSensor->decimateFilterData--;
  3435  00098E  EE20 F00C          	lfsr	2,12
  3436  000992  501F               	movf	MTouchAcquisition@pCurrentSensor,w,c
  3437  000994  26D9               	addwf	fsr2l,f,c
  3438  000996  5020               	movf	MTouchAcquisition@pCurrentSensor+1,w,c
  3439  000998  22DA               	addwfc	fsr2h,f,c
  3440  00099A  06DE               	decf	postinc2,f,c
  3441  00099C  0E00               	movlw	0
  3442  00099E  5ADD               	subwfb	postdec2,f,c
  3443  0009A0                     i2l194:
  3444                           
  3445                           ;mTouchSensor.c: 307: }
  3446                           ;mTouchSensor.c: 310: pCurrentSensor->oversampleFilterData += pCurrentSensor->decimateFi
      +                          lterData;
  3447  0009A0  EE20 F00C          	lfsr	2,12
  3448  0009A4  501F               	movf	MTouchAcquisition@pCurrentSensor,w,c
  3449  0009A6  26D9               	addwf	fsr2l,f,c
  3450  0009A8  5020               	movf	MTouchAcquisition@pCurrentSensor+1,w,c
  3451  0009AA  22DA               	addwfc	fsr2h,f,c
  3452  0009AC  CFDE F015          	movff	postinc2,??_MTouchAcquisition
  3453  0009B0  CFDD F016          	movff	postdec2,??_MTouchAcquisition+1
  3454  0009B4  EE20 F004          	lfsr	2,4
  3455  0009B8  501F               	movf	MTouchAcquisition@pCurrentSensor,w,c
  3456  0009BA  26D9               	addwf	fsr2l,f,c
  3457  0009BC  5020               	movf	MTouchAcquisition@pCurrentSensor+1,w,c
  3458  0009BE  22DA               	addwfc	fsr2h,f,c
  3459  0009C0  5015               	movf	??_MTouchAcquisition,w,c
  3460  0009C2  26DE               	addwf	postinc2,f,c
  3461  0009C4  5016               	movf	??_MTouchAcquisition+1,w,c
  3462  0009C6  22DE               	addwfc	postinc2,f,c
  3463  0009C8  0E00               	movlw	0
  3464  0009CA  BE16               	btfsc	??_MTouchAcquisition+1,7,c
  3465  0009CC  0EFF               	movlw	255
  3466  0009CE  22DE               	addwfc	postinc2,f,c
  3467  0009D0  22DE               	addwfc	postinc2,f,c
  3468                           
  3469                           ;mTouchSensor.c: 312: if((pCurrentSensor->sampleCounter)-- <= 0)
  3470  0009D2  EE20 F00E          	lfsr	2,14
  3471  0009D6  501F               	movf	MTouchAcquisition@pCurrentSensor,w,c
  3472  0009D8  26D9               	addwf	fsr2l,f,c
  3473  0009DA  5020               	movf	MTouchAcquisition@pCurrentSensor+1,w,c
  3474  0009DC  22DA               	addwfc	fsr2h,f,c
  3475  0009DE  06DE               	decf	postinc2,f,c
  3476  0009E0  0E00               	movlw	0
  3477  0009E2  5ADD               	subwfb	postdec2,f,c
  3478  0009E4  28DE               	incf	postinc2,w,c
  3479  0009E6  E119               	bnz	i2l2016
  3480  0009E8  28DE               	incf	postinc2,w,c
  3481  0009EA  A4D8               	btfss	status,2,c
  3482  0009EC  D016               	goto	i2l195
  3483                           
  3484                           ;mTouchSensor.c: 313: {
  3485                           ;mTouchSensor.c: 314: MTouchSensorDecode(pCurrentSensor);
  3486  0009EE  C01F  F00A         	movff	MTouchAcquisition@pCurrentSensor,MTouchSensorDecode@pSensor
  3487  0009F2  C020  F00B         	movff	MTouchAcquisition@pCurrentSensor+1,MTouchSensorDecode@pSensor+1
  3488  0009F6  ECC2  F002         	call	_MTouchSensorDecode	;wreg free
  3489                           
  3490                           ;mTouchSensor.c: 315: pCurrentSensor->sampleCounter = pCurrentSensor->samplesNumber;
  3491  0009FA  EE20 F010          	lfsr	2,16
  3492  0009FE  501F               	movf	MTouchAcquisition@pCurrentSensor,w,c
  3493  000A00  26D9               	addwf	fsr2l,f,c
  3494  000A02  5020               	movf	MTouchAcquisition@pCurrentSensor+1,w,c
  3495  000A04  22DA               	addwfc	fsr2h,f,c
  3496  000A06  EE10 F00E          	lfsr	1,14
  3497  000A0A  501F               	movf	MTouchAcquisition@pCurrentSensor,w,c
  3498  000A0C  26E1               	addwf	fsr1l,f,c
  3499  000A0E  5020               	movf	MTouchAcquisition@pCurrentSensor+1,w,c
  3500  000A10  22E2               	addwfc	fsr1h,f,c
  3501  000A12  CFDE FFE6          	movff	postinc2,postinc1
  3502  000A16  CFDD FFE5          	movff	postdec2,postdec1
  3503  000A1A                     i2l195:
  3504  000A1A                     i2l2016:
  3505                           
  3506                           ;mTouchSensor.c: 316: }
  3507                           ;mTouchSensor.c: 318: }
  3508                           ;mTouchSensor.c: 322: pPreviousSensor = pCurrentSensor;
  3509  000A1A  C01F  F01C         	movff	MTouchAcquisition@pCurrentSensor,MTouchAcquisition@pPreviousSensor
  3510  000A1E  C020  F01D         	movff	MTouchAcquisition@pCurrentSensor+1,MTouchAcquisition@pPreviousSensor+1
  3511                           
  3512                           ;mTouchSensor.c: 325: if(pCurrentSensor == pLastSensor)
  3513  000A22  501A               	movf	MTouchAcquisition@pLastSensor,w,c
  3514  000A24  181F               	xorwf	MTouchAcquisition@pCurrentSensor,w,c
  3515  000A26  E109               	bnz	i2l2022
  3516  000A28  501B               	movf	MTouchAcquisition@pLastSensor+1,w,c
  3517  000A2A  1820               	xorwf	MTouchAcquisition@pCurrentSensor+1,w,c
  3518  000A2C  A4D8               	btfss	status,2,c
  3519  000A2E  D005               	goto	i2l196
  3520                           
  3521                           ;mTouchSensor.c: 326: {
  3522                           ;mTouchSensor.c: 327: pCurrentSensor = (SENSOR*)sensors;
  3523  000A30  0E00               	movlw	low _sensors
  3524  000A32  6E1F               	movwf	MTouchAcquisition@pCurrentSensor,c
  3525  000A34  0E01               	movlw	high _sensors
  3526  000A36  6E20               	movwf	MTouchAcquisition@pCurrentSensor+1,c
  3527                           
  3528                           ;mTouchSensor.c: 328: continue;
  3529  000A38  D004               	goto	i2l197
  3530  000A3A                     i2l196:
  3531  000A3A                     i2l2022:
  3532                           
  3533                           ;mTouchSensor.c: 329: }
  3534                           ;mTouchSensor.c: 331: pCurrentSensor++;
  3535  000A3A  0E20               	movlw	32
  3536  000A3C  261F               	addwf	MTouchAcquisition@pCurrentSensor,f,c
  3537  000A3E  0E00               	movlw	0
  3538  000A40  2220               	addwfc	MTouchAcquisition@pCurrentSensor+1,f,c
  3539  000A42                     i2l197:
  3540  000A42  2A1E               	incf	MTouchAcquisition@i,f,c
  3541  000A44  D770               	goto	i2l1998
  3542  000A46                     i2u105_40:
  3543                           
  3544                           ;mTouchSensor.c: 332: }
  3545                           ;mTouchSensor.c: 334: startSensorNumber++;
  3546  000A46  2A33               	incf	MTouchAcquisition@startSensorNumber,f,c
  3547                           
  3548                           ;mTouchSensor.c: 336: if(startSensorNumber > (7-1))
  3549  000A48  0E06               	movlw	6
  3550  000A4A  6433               	cpfsgt	MTouchAcquisition@startSensorNumber,c
  3551  000A4C  0012               	return	
  3552                           
  3553                           ;mTouchSensor.c: 337: {
  3554                           ;mTouchSensor.c: 338: startSensorNumber = 0;
  3555  000A4E  0E00               	movlw	0
  3556  000A50  6E33               	movwf	MTouchAcquisition@startSensorNumber,c
  3557  000A52  0012               	return	
  3558  000A54                     __end_of_MTouchAcquisition:
  3559                           	opt stack 0
  3560                           pclatu	equ	0xFFB
  3561                           pclath	equ	0xFFA
  3562                           tblptru	equ	0xFF8
  3563                           tblptrh	equ	0xFF7
  3564                           tblptrl	equ	0xFF6
  3565                           tablat	equ	0xFF5
  3566                           prodh	equ	0xFF4
  3567                           prodl	equ	0xFF3
  3568                           intcon	equ	0xFF2
  3569                           postinc0	equ	0xFEE
  3570                           fsr0h	equ	0xFEA
  3571                           fsr0l	equ	0xFE9
  3572                           wreg	equ	0xFE8
  3573                           postinc1	equ	0xFE6
  3574                           postdec1	equ	0xFE5
  3575                           fsr1h	equ	0xFE2
  3576                           fsr1l	equ	0xFE1
  3577                           indf2	equ	0xFDF
  3578                           postinc2	equ	0xFDE
  3579                           postdec2	equ	0xFDD
  3580                           plusw2	equ	0xFDB
  3581                           fsr2h	equ	0xFDA
  3582                           fsr2l	equ	0xFD9
  3583                           status	equ	0xFD8
  3584                           
  3585 ;; *************** function _MTouchSensorDecode *****************
  3586 ;; Defined at:
  3587 ;;		line 146 in file "includes/mtouch/mTouchSensor.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  pSensor         2    9[COMRAM] PTR struct tag_SENSOR
  3590 ;;		 -> sensors(224), 
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;  delta           2   15[COMRAM] short 
  3593 ;; Return value:  Size  Location     Type
  3594 ;;                  1    wreg      void 
  3595 ;; Registers used:
  3596 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3597 ;; Tracked objects:
  3598 ;;		On entry : 0/0
  3599 ;;		On exit  : 0/0
  3600 ;;		Unchanged: 0/0
  3601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3602 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3603 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3604 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3605 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3606 ;;Total ram usage:        8 bytes
  3607 ;; Hardware stack levels used:    1
  3608 ;; Hardware stack levels required when called:    1
  3609 ;; This function calls:
  3610 ;;		_MTouchUpdateSensorAverage
  3611 ;; This function is called by:
  3612 ;;		_MTouchAcquisition
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text21
  3617  000584                     __ptext21:
  3618                           	opt stack 0
  3619  000584                     _MTouchSensorDecode:
  3620                           	opt stack 24
  3621                           
  3622                           ;mTouchSensor.c: 149: INT16 delta;
  3623                           ;mTouchSensor.c: 151: delta = pSensor->oversampleFilterData - pSensor->average;
  3624                           
  3625                           ;incstack = 0
  3626  000584  EE20 F004          	lfsr	2,4
  3627  000588  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3628  00058A  26D9               	addwf	fsr2l,f,c
  3629  00058C  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3630  00058E  22DA               	addwfc	fsr2h,f,c
  3631  000590  CFDE F00C          	movff	postinc2,??_MTouchSensorDecode
  3632  000594  CFDD F00D          	movff	postdec2,??_MTouchSensorDecode+1
  3633  000598  C00A  FFD9         	movff	MTouchSensorDecode@pSensor,fsr2l
  3634  00059C  C00B  FFDA         	movff	MTouchSensorDecode@pSensor+1,fsr2h
  3635  0005A0  CFDE F00E          	movff	postinc2,??_MTouchSensorDecode+2
  3636  0005A4  CFDD F00F          	movff	postdec2,??_MTouchSensorDecode+3
  3637  0005A8  1E0E               	comf	??_MTouchSensorDecode+2,f,c
  3638  0005AA  1E0F               	comf	??_MTouchSensorDecode+3,f,c
  3639  0005AC  4A0E               	infsnz	??_MTouchSensorDecode+2,f,c
  3640  0005AE  2A0F               	incf	??_MTouchSensorDecode+3,f,c
  3641  0005B0  500C               	movf	??_MTouchSensorDecode,w,c
  3642  0005B2  240E               	addwf	??_MTouchSensorDecode+2,w,c
  3643  0005B4  6E10               	movwf	MTouchSensorDecode@delta,c
  3644  0005B6  500D               	movf	??_MTouchSensorDecode+1,w,c
  3645  0005B8  200F               	addwfc	??_MTouchSensorDecode+3,w,c
  3646  0005BA  6E11               	movwf	MTouchSensorDecode@delta+1,c
  3647                           
  3648                           ;mTouchSensor.c: 153: if(delta < 0)
  3649  0005BC  AE11               	btfss	MTouchSensorDecode@delta+1,7,c
  3650  0005BE  D004               	goto	i2l165
  3651                           
  3652                           ;mTouchSensor.c: 154: {
  3653                           ;mTouchSensor.c: 155: delta = 0;
  3654  0005C0  0E00               	movlw	0
  3655  0005C2  6E11               	movwf	MTouchSensorDecode@delta+1,c
  3656  0005C4  0E00               	movlw	0
  3657  0005C6  6E10               	movwf	MTouchSensorDecode@delta,c
  3658  0005C8                     i2l165:
  3659                           
  3660                           ;mTouchSensor.c: 156: }
  3661                           ;mTouchSensor.c: 158: pSensor->delta = delta;
  3662  0005C8  EE20 F018          	lfsr	2,24
  3663  0005CC  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3664  0005CE  26D9               	addwf	fsr2l,f,c
  3665  0005D0  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3666  0005D2  22DA               	addwfc	fsr2h,f,c
  3667  0005D4  C010  FFDE         	movff	MTouchSensorDecode@delta,postinc2
  3668  0005D8  C011  FFDD         	movff	MTouchSensorDecode@delta+1,postdec2
  3669                           
  3670                           ;mTouchSensor.c: 160: switch(pSensor->state)
  3671  0005DC  D0A1               	goto	i2l166
  3672  0005DE                     
  3673                           ;mTouchSensor.c: 163: {
  3674                           ;mTouchSensor.c: 164: if (pSensor->debounceCount-- <= 0)
  3675  0005DE  EE20 F01A          	lfsr	2,26
  3676  0005E2  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3677  0005E4  26D9               	addwf	fsr2l,f,c
  3678  0005E6  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3679  0005E8  22DA               	addwfc	fsr2h,f,c
  3680  0005EA  06DE               	decf	postinc2,f,c
  3681  0005EC  0E00               	movlw	0
  3682  0005EE  5ADD               	subwfb	postdec2,f,c
  3683  0005F0  28DE               	incf	postinc2,w,c
  3684  0005F2  E115               	bnz	i2l1924
  3685  0005F4  28DE               	incf	postinc2,w,c
  3686  0005F6  A4D8               	btfss	status,2,c
  3687  0005F8  D012               	goto	i2l168
  3688                           
  3689                           ;mTouchSensor.c: 165: {
  3690                           ;mTouchSensor.c: 166: pSensor->state = SENSOR_RELEASED;
  3691  0005FA  EE20 F01C          	lfsr	2,28
  3692  0005FE  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3693  000600  26D9               	addwf	fsr2l,f,c
  3694  000602  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3695  000604  22DA               	addwfc	fsr2h,f,c
  3696  000606  0E01               	movlw	1
  3697  000608  6EDF               	movwf	indf2,c
  3698                           
  3699                           ;mTouchSensor.c: 167: pSensor->debounceCount = 2;
  3700  00060A  EE20 F01A          	lfsr	2,26
  3701  00060E  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3702  000610  26D9               	addwf	fsr2l,f,c
  3703  000612  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3704  000614  22DA               	addwfc	fsr2h,f,c
  3705  000616  0E02               	movlw	2
  3706  000618  6EDE               	movwf	postinc2,c
  3707  00061A  0E00               	movlw	0
  3708  00061C  6EDD               	movwf	postdec2,c
  3709  00061E                     i2l168:
  3710  00061E                     i2l1924:
  3711                           
  3712                           ;mTouchSensor.c: 168: }
  3713                           ;mTouchSensor.c: 169: pSensor->average = pSensor->oversampleFilterData;
  3714  00061E  EE20 F004          	lfsr	2,4
  3715  000622  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3716  000624  26D9               	addwf	fsr2l,f,c
  3717  000626  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3718  000628  22DA               	addwfc	fsr2h,f,c
  3719  00062A  C00A  FFE1         	movff	MTouchSensorDecode@pSensor,fsr1l
  3720  00062E  C00B  FFE2         	movff	MTouchSensorDecode@pSensor+1,fsr1h
  3721  000632  CFDE FFE6          	movff	postinc2,postinc1
  3722  000636  CFDE FFE6          	movff	postinc2,postinc1
  3723  00063A  CFDE FFE6          	movff	postinc2,postinc1
  3724  00063E  CFDE FFE6          	movff	postinc2,postinc1
  3725                           
  3726                           ;mTouchSensor.c: 170: break;
  3727  000642  D07E               	goto	i2l169
  3728  000644                     
  3729                           ;mTouchSensor.c: 175: {
  3730                           ;mTouchSensor.c: 176: if(delta > pSensor->pressThreshold)
  3731  000644  EE20 F012          	lfsr	2,18
  3732  000648  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3733  00064A  26D9               	addwf	fsr2l,f,c
  3734  00064C  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3735  00064E  22DA               	addwfc	fsr2h,f,c
  3736  000650  5010               	movf	MTouchSensorDecode@delta,w,c
  3737  000652  5CDE               	subwf	postinc2,w,c
  3738  000654  5011               	movf	MTouchSensorDecode@delta+1,w,c
  3739  000656  58DE               	subwfb	postinc2,w,c
  3740  000658  B0D8               	btfsc	status,0,c
  3741  00065A  D016               	goto	i2l171
  3742                           
  3743                           ;mTouchSensor.c: 177: {
  3744                           ;mTouchSensor.c: 178: if (pSensor->debounceCount-- <= 0)
  3745  00065C  EE20 F01A          	lfsr	2,26
  3746  000660  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3747  000662  26D9               	addwf	fsr2l,f,c
  3748  000664  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3749  000666  22DA               	addwfc	fsr2h,f,c
  3750  000668  06DE               	decf	postinc2,f,c
  3751  00066A  0E00               	movlw	0
  3752  00066C  5ADD               	subwfb	postdec2,f,c
  3753  00066E  28DE               	incf	postinc2,w,c
  3754  000670  E115               	bnz	i2l1934
  3755  000672  28DE               	incf	postinc2,w,c
  3756  000674  A4D8               	btfss	status,2,c
  3757  000676  D012               	goto	i2l173
  3758                           
  3759                           ;mTouchSensor.c: 179: {
  3760                           ;mTouchSensor.c: 180: pSensor->state = SENSOR_PRESSED;
  3761  000678  EE20 F01C          	lfsr	2,28
  3762  00067C  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3763  00067E  26D9               	addwf	fsr2l,f,c
  3764  000680  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3765  000682  22DA               	addwfc	fsr2h,f,c
  3766  000684  0E02               	movlw	2
  3767  000686  6EDF               	movwf	indf2,c
  3768  000688                     i2l171:
  3769                           
  3770                           ;mTouchSensor.c: 184: else
  3771                           ;mTouchSensor.c: 185: {
  3772                           ;mTouchSensor.c: 186: pSensor->debounceCount = 2;
  3773  000688  EE20 F01A          	lfsr	2,26
  3774  00068C  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3775  00068E  26D9               	addwf	fsr2l,f,c
  3776  000690  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3777  000692  22DA               	addwfc	fsr2h,f,c
  3778  000694  0E02               	movlw	2
  3779  000696  6EDE               	movwf	postinc2,c
  3780  000698  0E00               	movlw	0
  3781  00069A  6EDD               	movwf	postdec2,c
  3782  00069C                     i2l173:
  3783  00069C                     i2l1934:
  3784                           
  3785                           ;mTouchSensor.c: 187: }
  3786                           ;mTouchSensor.c: 189: MTouchUpdateSensorAverage(pSensor, 4);
  3787  00069C  C00A  F001         	movff	MTouchSensorDecode@pSensor,MTouchUpdateSensorAverage@pSensor
  3788  0006A0  C00B  F002         	movff	MTouchSensorDecode@pSensor+1,MTouchUpdateSensorAverage@pSensor+1
  3789  0006A4  0E00               	movlw	0
  3790  0006A6  6E04               	movwf	MTouchUpdateSensorAverage@rate+1,c
  3791  0006A8  0E04               	movlw	4
  3792  0006AA  6E03               	movwf	MTouchUpdateSensorAverage@rate,c
  3793  0006AC  EC7A  F006         	call	_MTouchUpdateSensorAverage	;wreg free
  3794                           
  3795                           ;mTouchSensor.c: 191: break;
  3796  0006B0  D047               	goto	i2l169
  3797  0006B2                     
  3798                           ;mTouchSensor.c: 196: {
  3799                           ;mTouchSensor.c: 197: if(delta < pSensor->releaseThreshold)
  3800  0006B2  EE20 F014          	lfsr	2,20
  3801  0006B6  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3802  0006B8  26D9               	addwf	fsr2l,f,c
  3803  0006BA  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3804  0006BC  22DA               	addwfc	fsr2h,f,c
  3805  0006BE  50DE               	movf	postinc2,w,c
  3806  0006C0  5C10               	subwf	MTouchSensorDecode@delta,w,c
  3807  0006C2  50DE               	movf	postinc2,w,c
  3808  0006C4  5811               	subwfb	MTouchSensorDecode@delta+1,w,c
  3809  0006C6  B0D8               	btfsc	status,0,c
  3810  0006C8  D016               	goto	i2l175
  3811                           
  3812                           ;mTouchSensor.c: 198: {
  3813                           ;mTouchSensor.c: 199: if (pSensor->debounceCount-- <= 0)
  3814  0006CA  EE20 F01A          	lfsr	2,26
  3815  0006CE  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3816  0006D0  26D9               	addwf	fsr2l,f,c
  3817  0006D2  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3818  0006D4  22DA               	addwfc	fsr2h,f,c
  3819  0006D6  06DE               	decf	postinc2,f,c
  3820  0006D8  0E00               	movlw	0
  3821  0006DA  5ADD               	subwfb	postdec2,f,c
  3822  0006DC  28DE               	incf	postinc2,w,c
  3823  0006DE  E115               	bnz	i2l1944
  3824  0006E0  28DE               	incf	postinc2,w,c
  3825  0006E2  A4D8               	btfss	status,2,c
  3826  0006E4  D012               	goto	i2l177
  3827                           
  3828                           ;mTouchSensor.c: 200: {
  3829                           ;mTouchSensor.c: 201: pSensor->state = SENSOR_RELEASED;
  3830  0006E6  EE20 F01C          	lfsr	2,28
  3831  0006EA  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3832  0006EC  26D9               	addwf	fsr2l,f,c
  3833  0006EE  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3834  0006F0  22DA               	addwfc	fsr2h,f,c
  3835  0006F2  0E01               	movlw	1
  3836  0006F4  6EDF               	movwf	indf2,c
  3837  0006F6                     i2l175:
  3838                           
  3839                           ;mTouchSensor.c: 205: else
  3840                           ;mTouchSensor.c: 206: {
  3841                           ;mTouchSensor.c: 207: pSensor->debounceCount = 2;
  3842  0006F6  EE20 F01A          	lfsr	2,26
  3843  0006FA  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3844  0006FC  26D9               	addwf	fsr2l,f,c
  3845  0006FE  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3846  000700  22DA               	addwfc	fsr2h,f,c
  3847  000702  0E02               	movlw	2
  3848  000704  6EDE               	movwf	postinc2,c
  3849  000706  0E00               	movlw	0
  3850  000708  6EDD               	movwf	postdec2,c
  3851  00070A                     i2l177:
  3852  00070A                     i2l1944:
  3853                           
  3854                           ;mTouchSensor.c: 208: }
  3855                           ;mTouchSensor.c: 210: MTouchUpdateSensorAverage(pSensor, 400);
  3856  00070A  C00A  F001         	movff	MTouchSensorDecode@pSensor,MTouchUpdateSensorAverage@pSensor
  3857  00070E  C00B  F002         	movff	MTouchSensorDecode@pSensor+1,MTouchUpdateSensorAverage@pSensor+1
  3858  000712  0E01               	movlw	1
  3859  000714  6E04               	movwf	MTouchUpdateSensorAverage@rate+1,c
  3860  000716  0E90               	movlw	144
  3861  000718  6E03               	movwf	MTouchUpdateSensorAverage@rate,c
  3862  00071A  EC7A  F006         	call	_MTouchUpdateSensorAverage	;wreg free
  3863                           
  3864                           ;mTouchSensor.c: 217: }
  3865                           
  3866                           ;mTouchSensor.c: 213: }
  3867                           ;mTouchSensor.c: 215: default: break;
  3868                           
  3869                           ;mTouchSensor.c: 212: break;
  3870  00071E  D010               	goto	i2l169
  3871  000720                     i2l166:
  3872  000720  EE20 F01C          	lfsr	2,28
  3873  000724  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3874  000726  26D9               	addwf	fsr2l,f,c
  3875  000728  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3876  00072A  22DA               	addwfc	fsr2h,f,c
  3877  00072C  50DF               	movf	indf2,w,c
  3878                           
  3879                           ; Switch size 1, requested type "space"
  3880                           ; Number of cases is 3, Range of values is 0 to 2
  3881                           ; switch strategies available:
  3882                           ; Name         Instructions Cycles
  3883                           ; simple_byte           10     6 (average)
  3884                           ;	Chosen strategy is simple_byte
  3885  00072E  0A00               	xorlw	0	; case 0
  3886  000730  B4D8               	btfsc	status,2,c
  3887  000732  D755               	goto	i2l167
  3888  000734  0A01               	xorlw	1	; case 1
  3889  000736  B4D8               	btfsc	status,2,c
  3890  000738  D785               	goto	i2l170
  3891  00073A  0A03               	xorlw	3	; case 2
  3892  00073C  B4D8               	btfsc	status,2,c
  3893  00073E  D7B9               	goto	i2l174
  3894  000740                     i2l169:
  3895                           
  3896                           ;mTouchSensor.c: 219: pSensor->oversampleFilterData = 0;
  3897  000740  EE20 F004          	lfsr	2,4
  3898  000744  500A               	movf	MTouchSensorDecode@pSensor,w,c
  3899  000746  26D9               	addwf	fsr2l,f,c
  3900  000748  500B               	movf	MTouchSensorDecode@pSensor+1,w,c
  3901  00074A  22DA               	addwfc	fsr2h,f,c
  3902  00074C  6ADE               	clrf	postinc2,c
  3903  00074E  6ADE               	clrf	postinc2,c
  3904  000750  6ADE               	clrf	postinc2,c
  3905  000752  6ADD               	clrf	postdec2,c
  3906  000754  0012               	return		;funcret
  3907  000756                     __end_of_MTouchSensorDecode:
  3908                           	opt stack 0
  3909                           pclatu	equ	0xFFB
  3910                           pclath	equ	0xFFA
  3911                           tblptru	equ	0xFF8
  3912                           tblptrh	equ	0xFF7
  3913                           tblptrl	equ	0xFF6
  3914                           tablat	equ	0xFF5
  3915                           prodh	equ	0xFF4
  3916                           prodl	equ	0xFF3
  3917                           intcon	equ	0xFF2
  3918                           postinc0	equ	0xFEE
  3919                           fsr0h	equ	0xFEA
  3920                           fsr0l	equ	0xFE9
  3921                           wreg	equ	0xFE8
  3922                           postinc1	equ	0xFE6
  3923                           postdec1	equ	0xFE5
  3924                           fsr1h	equ	0xFE2
  3925                           fsr1l	equ	0xFE1
  3926                           indf2	equ	0xFDF
  3927                           postinc2	equ	0xFDE
  3928                           postdec2	equ	0xFDD
  3929                           plusw2	equ	0xFDB
  3930                           fsr2h	equ	0xFDA
  3931                           fsr2l	equ	0xFD9
  3932                           status	equ	0xFD8
  3933                           
  3934 ;; *************** function _MTouchUpdateSensorAverage *****************
  3935 ;; Defined at:
  3936 ;;		line 224 in file "includes/mtouch/mTouchSensor.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;  pSensor         2    0[COMRAM] PTR struct tag_SENSOR
  3939 ;;		 -> sensors(224), 
  3940 ;;  rate            2    2[COMRAM] unsigned short 
  3941 ;; Auto vars:     Size  Location     Type
  3942 ;;		None
  3943 ;; Return value:  Size  Location     Type
  3944 ;;                  1    wreg      void 
  3945 ;; Registers used:
  3946 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3947 ;; Tracked objects:
  3948 ;;		On entry : 0/0
  3949 ;;		On exit  : 0/0
  3950 ;;		Unchanged: 0/0
  3951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3952 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3954 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3955 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3956 ;;Total ram usage:        9 bytes
  3957 ;; Hardware stack levels used:    1
  3958 ;; This function calls:
  3959 ;;		Nothing
  3960 ;; This function is called by:
  3961 ;;		_MTouchSensorDecode
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           	psect	text22
  3966  000CF4                     __ptext22:
  3967                           	opt stack 0
  3968  000CF4                     _MTouchUpdateSensorAverage:
  3969                           	opt stack 24
  3970                           
  3971                           ;mTouchSensor.c: 226: if(pSensor->averageCount++ >= rate)
  3972                           
  3973                           ;incstack = 0
  3974  000CF4  EE20 F016          	lfsr	2,22
  3975  000CF8  5001               	movf	MTouchUpdateSensorAverage@pSensor,w,c
  3976  000CFA  26D9               	addwf	fsr2l,f,c
  3977  000CFC  5002               	movf	MTouchUpdateSensorAverage@pSensor+1,w,c
  3978  000CFE  22DA               	addwfc	fsr2h,f,c
  3979  000D00  CFDF F005          	movff	indf2,??_MTouchUpdateSensorAverage
  3980  000D04  0E01               	movlw	1
  3981  000D06  26DE               	addwf	postinc2,f,c
  3982  000D08  CFDF F006          	movff	indf2,??_MTouchUpdateSensorAverage+1
  3983  000D0C  0E00               	movlw	0
  3984  000D0E  22DD               	addwfc	postdec2,f,c
  3985  000D10  5003               	movf	MTouchUpdateSensorAverage@rate,w,c
  3986  000D12  5C05               	subwf	??_MTouchUpdateSensorAverage,w,c
  3987  000D14  5004               	movf	MTouchUpdateSensorAverage@rate+1,w,c
  3988  000D16  5806               	subwfb	??_MTouchUpdateSensorAverage+1,w,c
  3989  000D18  A0D8               	btfss	status,0,c
  3990  000D1A  0012               	return	
  3991                           
  3992                           ;mTouchSensor.c: 227: {
  3993                           ;mTouchSensor.c: 228: pSensor->averageCount = 0;
  3994  000D1C  EE20 F016          	lfsr	2,22
  3995  000D20  5001               	movf	MTouchUpdateSensorAverage@pSensor,w,c
  3996  000D22  26D9               	addwf	fsr2l,f,c
  3997  000D24  5002               	movf	MTouchUpdateSensorAverage@pSensor+1,w,c
  3998  000D26  22DA               	addwfc	fsr2h,f,c
  3999  000D28  0E00               	movlw	0
  4000  000D2A  6EDE               	movwf	postinc2,c
  4001  000D2C  0E00               	movlw	0
  4002  000D2E  6EDD               	movwf	postdec2,c
  4003                           
  4004                           ;mTouchSensor.c: 245: pSensor->average -= pSensor->average >> 3;
  4005  000D30  0E03               	movlw	3
  4006  000D32  6E05               	movwf	??_MTouchUpdateSensorAverage& (0+255),c
  4007  000D34  C001  FFD9         	movff	MTouchUpdateSensorAverage@pSensor,fsr2l
  4008  000D38  C002  FFDA         	movff	MTouchUpdateSensorAverage@pSensor+1,fsr2h
  4009  000D3C  CFDE F006          	movff	postinc2,??_MTouchUpdateSensorAverage+1
  4010  000D40  CFDE F007          	movff	postinc2,??_MTouchUpdateSensorAverage+2
  4011  000D44  CFDE F008          	movff	postinc2,??_MTouchUpdateSensorAverage+3
  4012  000D48  CFDE F009          	movff	postinc2,??_MTouchUpdateSensorAverage+4
  4013  000D4C                     i2u85_45:
  4014  000D4C  6605               	tstfsz	??_MTouchUpdateSensorAverage,c
  4015  000D4E  D001               	goto	i2u85_46
  4016  000D50  D007               	goto	i2u85_47
  4017  000D52                     i2u85_46:
  4018  000D52  3409               	rlcf	??_MTouchUpdateSensorAverage+4,w,c
  4019  000D54  3209               	rrcf	??_MTouchUpdateSensorAverage+4,f,c
  4020  000D56  3208               	rrcf	??_MTouchUpdateSensorAverage+3,f,c
  4021  000D58  3207               	rrcf	??_MTouchUpdateSensorAverage+2,f,c
  4022  000D5A  3206               	rrcf	??_MTouchUpdateSensorAverage+1,f,c
  4023  000D5C  2E05               	decfsz	??_MTouchUpdateSensorAverage,f,c
  4024  000D5E  D7F6               	goto	i2u85_45
  4025  000D60                     i2u85_47:
  4026  000D60  C001  FFD9         	movff	MTouchUpdateSensorAverage@pSensor,fsr2l
  4027  000D64  C002  FFDA         	movff	MTouchUpdateSensorAverage@pSensor+1,fsr2h
  4028  000D68  5006               	movf	??_MTouchUpdateSensorAverage+1,w,c
  4029  000D6A  5EDE               	subwf	postinc2,f,c
  4030  000D6C  5007               	movf	??_MTouchUpdateSensorAverage+2,w,c
  4031  000D6E  5ADE               	subwfb	postinc2,f,c
  4032  000D70  5008               	movf	??_MTouchUpdateSensorAverage+3,w,c
  4033  000D72  5ADE               	subwfb	postinc2,f,c
  4034  000D74  5009               	movf	??_MTouchUpdateSensorAverage+4,w,c
  4035  000D76  5ADE               	subwfb	postinc2,f,c
  4036                           
  4037                           ;mTouchSensor.c: 246: pSensor->average += pSensor->oversampleFilterData >> 3;
  4038  000D78  0E03               	movlw	3
  4039  000D7A  6E05               	movwf	??_MTouchUpdateSensorAverage& (0+255),c
  4040  000D7C  EE20 F004          	lfsr	2,4
  4041  000D80  5001               	movf	MTouchUpdateSensorAverage@pSensor,w,c
  4042  000D82  26D9               	addwf	fsr2l,f,c
  4043  000D84  5002               	movf	MTouchUpdateSensorAverage@pSensor+1,w,c
  4044  000D86  22DA               	addwfc	fsr2h,f,c
  4045  000D88  CFDE F006          	movff	postinc2,??_MTouchUpdateSensorAverage+1
  4046  000D8C  CFDE F007          	movff	postinc2,??_MTouchUpdateSensorAverage+2
  4047  000D90  CFDE F008          	movff	postinc2,??_MTouchUpdateSensorAverage+3
  4048  000D94  CFDE F009          	movff	postinc2,??_MTouchUpdateSensorAverage+4
  4049  000D98                     i2u86_45:
  4050  000D98  6605               	tstfsz	??_MTouchUpdateSensorAverage,c
  4051  000D9A  D001               	goto	i2u86_46
  4052  000D9C  D007               	goto	i2u86_47
  4053  000D9E                     i2u86_46:
  4054  000D9E  3409               	rlcf	??_MTouchUpdateSensorAverage+4,w,c
  4055  000DA0  3209               	rrcf	??_MTouchUpdateSensorAverage+4,f,c
  4056  000DA2  3208               	rrcf	??_MTouchUpdateSensorAverage+3,f,c
  4057  000DA4  3207               	rrcf	??_MTouchUpdateSensorAverage+2,f,c
  4058  000DA6  3206               	rrcf	??_MTouchUpdateSensorAverage+1,f,c
  4059  000DA8  2E05               	decfsz	??_MTouchUpdateSensorAverage,f,c
  4060  000DAA  D7F6               	goto	i2u86_45
  4061  000DAC                     i2u86_47:
  4062  000DAC  C001  FFD9         	movff	MTouchUpdateSensorAverage@pSensor,fsr2l
  4063  000DB0  C002  FFDA         	movff	MTouchUpdateSensorAverage@pSensor+1,fsr2h
  4064  000DB4  5006               	movf	??_MTouchUpdateSensorAverage+1,w,c
  4065  000DB6  26DE               	addwf	postinc2,f,c
  4066  000DB8  5007               	movf	??_MTouchUpdateSensorAverage+2,w,c
  4067  000DBA  22DE               	addwfc	postinc2,f,c
  4068  000DBC  5008               	movf	??_MTouchUpdateSensorAverage+3,w,c
  4069  000DBE  22DE               	addwfc	postinc2,f,c
  4070  000DC0  5009               	movf	??_MTouchUpdateSensorAverage+4,w,c
  4071  000DC2  22DE               	addwfc	postinc2,f,c
  4072  000DC4  0012               	return	
  4073  000DC6                     __end_of_MTouchUpdateSensorAverage:
  4074                           	opt stack 0
  4075                           pclatu	equ	0xFFB
  4076                           pclath	equ	0xFFA
  4077                           tblptru	equ	0xFF8
  4078                           tblptrh	equ	0xFF7
  4079                           tblptrl	equ	0xFF6
  4080                           tablat	equ	0xFF5
  4081                           prodh	equ	0xFF4
  4082                           prodl	equ	0xFF3
  4083                           intcon	equ	0xFF2
  4084                           postinc0	equ	0xFEE
  4085                           fsr0h	equ	0xFEA
  4086                           fsr0l	equ	0xFE9
  4087                           wreg	equ	0xFE8
  4088                           postinc1	equ	0xFE6
  4089                           postdec1	equ	0xFE5
  4090                           fsr1h	equ	0xFE2
  4091                           fsr1l	equ	0xFE1
  4092                           indf2	equ	0xFDF
  4093                           postinc2	equ	0xFDE
  4094                           postdec2	equ	0xFDD
  4095                           plusw2	equ	0xFDB
  4096                           fsr2h	equ	0xFDA
  4097                           fsr2l	equ	0xFD9
  4098                           status	equ	0xFD8
  4099                           
  4100 ;; *************** function _MTouchAcquisitionCVD *****************
  4101 ;; Defined at:
  4102 ;;		line 122 in file "includes/mtouch/mTouchAcquistion.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;  pCurrentSens    2    0[COMRAM] PTR struct tag_SENSOR
  4105 ;;		 -> sensors(224), 
  4106 ;;  pPreviousSen    2    2[COMRAM] PTR struct tag_SENSOR
  4107 ;;		 -> sensors(224), 
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;  curTris         2   17[COMRAM] PTR volatile unsigned ch
  4110 ;;		 -> TRISA(1), TRISB(1), 
  4111 ;;  curLat          2   14[COMRAM] PTR volatile unsigned ch
  4112 ;;		 -> LATA(1), LATB(1), 
  4113 ;;  prevLat         2   12[COMRAM] PTR volatile unsigned ch
  4114 ;;		 -> LATA(1), LATB(1), 
  4115 ;;  prevTris        2    8[COMRAM] PTR volatile unsigned ch
  4116 ;;		 -> TRISA(1), TRISB(1), 
  4117 ;;  result          2    6[COMRAM] short 
  4118 ;;  curIOMask       1   19[COMRAM] unsigned char 
  4119 ;;  prevIOMask      1   16[COMRAM] unsigned char 
  4120 ;;  curChannelNu    1   11[COMRAM] unsigned char 
  4121 ;;  prevChannelN    1   10[COMRAM] unsigned char 
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  2    0[COMRAM] short 
  4124 ;; Registers used:
  4125 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4131 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;Total ram usage:       20 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; This function calls:
  4138 ;;		Nothing
  4139 ;; This function is called by:
  4140 ;;		_MTouchAcquisition
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text23
  4145  0000AC                     __ptext23:
  4146                           	opt stack 0
  4147  0000AC                     _MTouchAcquisitionCVD:
  4148                           	opt stack 25
  4149                           
  4150                           ;mTouchAcquistion.c: 124: SFR prevTris;
  4151                           ;mTouchAcquistion.c: 125: SFR prevLat;
  4152                           ;mTouchAcquistion.c: 126: IOMASK prevIOMask;
  4153                           ;mTouchAcquistion.c: 127: SFR curTris;
  4154                           ;mTouchAcquistion.c: 128: SFR curLat;
  4155                           ;mTouchAcquistion.c: 129: IOMASK curIOMask;
  4156                           ;mTouchAcquistion.c: 130: UINT8 prevChannelNumber;
  4157                           ;mTouchAcquistion.c: 131: UINT8 curChannelNumber;
  4158                           ;mTouchAcquistion.c: 132: INT16 result;
  4159                           ;mTouchAcquistion.c: 136: prevTris = pPreviousSensor->trisReg;
  4160                           
  4161                           ;incstack = 0
  4162  0000AC  EE20 F008          	lfsr	2,8
  4163  0000B0  5003               	movf	MTouchAcquisitionCVD@pPreviousSensor,w,c
  4164  0000B2  26D9               	addwf	fsr2l,f,c
  4165  0000B4  5004               	movf	MTouchAcquisitionCVD@pPreviousSensor+1,w,c
  4166  0000B6  22DA               	addwfc	fsr2h,f,c
  4167  0000B8  CFDE F009          	movff	postinc2,MTouchAcquisitionCVD@prevTris
  4168  0000BC  CFDD F00A          	movff	postdec2,MTouchAcquisitionCVD@prevTris+1
  4169                           
  4170                           ;mTouchAcquistion.c: 137: prevLat = pPreviousSensor->latReg;
  4171  0000C0  EE20 F00A          	lfsr	2,10
  4172  0000C4  5003               	movf	MTouchAcquisitionCVD@pPreviousSensor,w,c
  4173  0000C6  26D9               	addwf	fsr2l,f,c
  4174  0000C8  5004               	movf	MTouchAcquisitionCVD@pPreviousSensor+1,w,c
  4175  0000CA  22DA               	addwfc	fsr2h,f,c
  4176  0000CC  CFDE F00D          	movff	postinc2,MTouchAcquisitionCVD@prevLat
  4177  0000D0  CFDD F00E          	movff	postdec2,MTouchAcquisitionCVD@prevLat+1
  4178                           
  4179                           ;mTouchAcquistion.c: 138: prevIOMask = pPreviousSensor->ioMask;
  4180  0000D4  EE20 F01D          	lfsr	2,29
  4181  0000D8  5003               	movf	MTouchAcquisitionCVD@pPreviousSensor,w,c
  4182  0000DA  26D9               	addwf	fsr2l,f,c
  4183  0000DC  5004               	movf	MTouchAcquisitionCVD@pPreviousSensor+1,w,c
  4184  0000DE  22DA               	addwfc	fsr2h,f,c
  4185  0000E0  50DF               	movf	indf2,w,c
  4186  0000E2  6E11               	movwf	MTouchAcquisitionCVD@prevIOMask,c
  4187                           
  4188                           ;mTouchAcquistion.c: 139: curTris = pCurrentSensor->trisReg;
  4189  0000E4  EE20 F008          	lfsr	2,8
  4190  0000E8  5001               	movf	MTouchAcquisitionCVD@pCurrentSensor,w,c
  4191  0000EA  26D9               	addwf	fsr2l,f,c
  4192  0000EC  5002               	movf	MTouchAcquisitionCVD@pCurrentSensor+1,w,c
  4193  0000EE  22DA               	addwfc	fsr2h,f,c
  4194  0000F0  CFDE F012          	movff	postinc2,MTouchAcquisitionCVD@curTris
  4195  0000F4  CFDD F013          	movff	postdec2,MTouchAcquisitionCVD@curTris+1
  4196                           
  4197                           ;mTouchAcquistion.c: 140: curLat = pCurrentSensor->latReg;
  4198  0000F8  EE20 F00A          	lfsr	2,10
  4199  0000FC  5001               	movf	MTouchAcquisitionCVD@pCurrentSensor,w,c
  4200  0000FE  26D9               	addwf	fsr2l,f,c
  4201  000100  5002               	movf	MTouchAcquisitionCVD@pCurrentSensor+1,w,c
  4202  000102  22DA               	addwfc	fsr2h,f,c
  4203  000104  CFDE F00F          	movff	postinc2,MTouchAcquisitionCVD@curLat
  4204  000108  CFDD F010          	movff	postdec2,MTouchAcquisitionCVD@curLat+1
  4205                           
  4206                           ;mTouchAcquistion.c: 141: curIOMask = pCurrentSensor->ioMask;
  4207  00010C  EE20 F01D          	lfsr	2,29
  4208  000110  5001               	movf	MTouchAcquisitionCVD@pCurrentSensor,w,c
  4209  000112  26D9               	addwf	fsr2l,f,c
  4210  000114  5002               	movf	MTouchAcquisitionCVD@pCurrentSensor+1,w,c
  4211  000116  22DA               	addwfc	fsr2h,f,c
  4212  000118  50DF               	movf	indf2,w,c
  4213  00011A  6E14               	movwf	MTouchAcquisitionCVD@curIOMask,c
  4214                           
  4215                           ;mTouchAcquistion.c: 142: prevChannelNumber = pPreviousSensor->channelNumber;
  4216  00011C  EE20 F01E          	lfsr	2,30
  4217  000120  5003               	movf	MTouchAcquisitionCVD@pPreviousSensor,w,c
  4218  000122  26D9               	addwf	fsr2l,f,c
  4219  000124  5004               	movf	MTouchAcquisitionCVD@pPreviousSensor+1,w,c
  4220  000126  22DA               	addwfc	fsr2h,f,c
  4221  000128  50DF               	movf	indf2,w,c
  4222  00012A  6E0B               	movwf	MTouchAcquisitionCVD@prevChannelNumber,c
  4223                           
  4224                           ;mTouchAcquistion.c: 143: curChannelNumber = pCurrentSensor->channelNumber;
  4225  00012C  EE20 F01E          	lfsr	2,30
  4226  000130  5001               	movf	MTouchAcquisitionCVD@pCurrentSensor,w,c
  4227  000132  26D9               	addwf	fsr2l,f,c
  4228  000134  5002               	movf	MTouchAcquisitionCVD@pCurrentSensor+1,w,c
  4229  000136  22DA               	addwfc	fsr2h,f,c
  4230  000138  50DF               	movf	indf2,w,c
  4231  00013A  6E0C               	movwf	MTouchAcquisitionCVD@curChannelNumber,c
  4232                           
  4233                           ;mTouchAcquistion.c: 149: {ADCON0bits.CHS = prevChannelNumber;};
  4234  00013C  C00B  F005         	movff	MTouchAcquisitionCVD@prevChannelNumber,??_MTouchAcquisitionCVD
  4235  000140  4605               	rlncf	??_MTouchAcquisitionCVD,f,c
  4236  000142  4605               	rlncf	??_MTouchAcquisitionCVD,f,c
  4237  000144  50C2               	movf	4034,w,c	;volatile
  4238  000146  1805               	xorwf	??_MTouchAcquisitionCVD,w,c
  4239  000148  0B83               	andlw	-125
  4240  00014A  1805               	xorwf	??_MTouchAcquisitionCVD,w,c
  4241  00014C  6EC2               	movwf	4034,c	;volatile
  4242                           
  4243                           ;mTouchAcquistion.c: 152: *prevLat |= prevIOMask; *prevTris &= ~prevIOMask;
  4244  00014E  C00D  FFD9         	movff	MTouchAcquisitionCVD@prevLat,fsr2l
  4245  000152  C00E  FFDA         	movff	MTouchAcquisitionCVD@prevLat+1,fsr2h
  4246  000156  5011               	movf	MTouchAcquisitionCVD@prevIOMask,w,c
  4247  000158  12DF               	iorwf	indf2,f,c
  4248  00015A  5011               	movf	MTouchAcquisitionCVD@prevIOMask,w,c
  4249  00015C  0AFF               	xorlw	255
  4250  00015E  6E05               	movwf	??_MTouchAcquisitionCVD& (0+255),c
  4251  000160  C009  FFD9         	movff	MTouchAcquisitionCVD@prevTris,fsr2l
  4252  000164  C00A  FFDA         	movff	MTouchAcquisitionCVD@prevTris+1,fsr2h
  4253  000168  5005               	movf	??_MTouchAcquisitionCVD,w,c
  4254  00016A  16DF               	andwf	indf2,f,c
  4255                           
  4256                           ;mTouchAcquistion.c: 155: *curLat &= ~curIOMask; *curTris &= ~curIOMask;
  4257  00016C  5014               	movf	MTouchAcquisitionCVD@curIOMask,w,c
  4258  00016E  0AFF               	xorlw	255
  4259  000170  6E05               	movwf	??_MTouchAcquisitionCVD& (0+255),c
  4260  000172  C00F  FFD9         	movff	MTouchAcquisitionCVD@curLat,fsr2l
  4261  000176  C010  FFDA         	movff	MTouchAcquisitionCVD@curLat+1,fsr2h
  4262  00017A  5005               	movf	??_MTouchAcquisitionCVD,w,c
  4263  00017C  16DF               	andwf	indf2,f,c
  4264  00017E  5014               	movf	MTouchAcquisitionCVD@curIOMask,w,c
  4265  000180  0AFF               	xorlw	255
  4266  000182  6E05               	movwf	??_MTouchAcquisitionCVD& (0+255),c
  4267  000184  C012  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
  4268  000188  C013  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
  4269  00018C  5005               	movf	??_MTouchAcquisitionCVD,w,c
  4270  00018E  16DF               	andwf	indf2,f,c
  4271                           
  4272                           ;mTouchAcquistion.c: 158: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
  4273  000190  F000               	nop	
  4274  000192  F000               	nop	
  4275  000194  F000               	nop	
  4276  000196  F000               	nop	
  4277  000198  F000               	nop	
  4278  00019A  F000               	nop	
  4279  00019C  F000               	nop	
  4280  00019E  F000               	nop	
  4281  0001A0  F000               	nop	
  4282  0001A2  F000               	nop	
  4283  0001A4  F000               	nop	
  4284  0001A6  F000               	nop	
  4285  0001A8  F000               	nop	
  4286  0001AA  F000               	nop	
  4287  0001AC  F000               	nop	
  4288  0001AE  F000               	nop	
  4289  0001B0  F000               	nop	
  4290  0001B2  F000               	nop	
  4291  0001B4  F000               	nop	
  4292  0001B6  F000               	nop	
  4293                           
  4294                           ;mTouchAcquistion.c: 161: *curTris |= curIOMask;
  4295  0001B8  C012  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
  4296  0001BC  C013  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
  4297  0001C0  5014               	movf	MTouchAcquisitionCVD@curIOMask,w,c
  4298  0001C2  12DF               	iorwf	indf2,f,c
  4299                           
  4300                           ;mTouchAcquistion.c: 164: {ADCON0bits.CHS = curChannelNumber;};
  4301  0001C4  C00C  F005         	movff	MTouchAcquisitionCVD@curChannelNumber,??_MTouchAcquisitionCVD
  4302  0001C8  4605               	rlncf	??_MTouchAcquisitionCVD,f,c
  4303  0001CA  4605               	rlncf	??_MTouchAcquisitionCVD,f,c
  4304  0001CC  50C2               	movf	4034,w,c	;volatile
  4305  0001CE  1805               	xorwf	??_MTouchAcquisitionCVD,w,c
  4306  0001D0  0B83               	andlw	-125
  4307  0001D2  1805               	xorwf	??_MTouchAcquisitionCVD,w,c
  4308  0001D4  6EC2               	movwf	4034,c	;volatile
  4309                           
  4310                           ;mTouchAcquistion.c: 167: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
  4311  0001D6  F000               	nop	
  4312  0001D8  F000               	nop	
  4313  0001DA  F000               	nop	
  4314  0001DC  F000               	nop	
  4315  0001DE  F000               	nop	
  4316  0001E0  F000               	nop	
  4317  0001E2  F000               	nop	
  4318  0001E4  F000               	nop	
  4319  0001E6  F000               	nop	
  4320  0001E8  F000               	nop	
  4321  0001EA  F000               	nop	
  4322  0001EC  F000               	nop	
  4323  0001EE  F000               	nop	
  4324  0001F0  F000               	nop	
  4325  0001F2  F000               	nop	
  4326  0001F4  F000               	nop	
  4327  0001F6  F000               	nop	
  4328  0001F8  F000               	nop	
  4329  0001FA  F000               	nop	
  4330  0001FC  F000               	nop	
  4331                           
  4332                           ;mTouchAcquistion.c: 170: {ADCON0bits.DONE = 1;while(ADCON0bits.DONE);};
  4333  0001FE  82C2               	bsf	4034,1,c	;volatile
  4334  000200  B2C2               	btfsc	4034,1,c	;volatile
  4335  000202  D7FE               	goto	i2l90
  4336                           
  4337                           ;mTouchAcquistion.c: 173: *curTris &= ~curIOMask;
  4338  000204  5014               	movf	MTouchAcquisitionCVD@curIOMask,w,c
  4339  000206  0AFF               	xorlw	255
  4340  000208  6E05               	movwf	??_MTouchAcquisitionCVD& (0+255),c
  4341  00020A  C012  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
  4342  00020E  C013  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
  4343  000212  5005               	movf	??_MTouchAcquisitionCVD,w,c
  4344  000214  16DF               	andwf	indf2,f,c
  4345                           
  4346                           ;mTouchAcquistion.c: 174: *prevLat &= ~prevIOMask;
  4347  000216  5011               	movf	MTouchAcquisitionCVD@prevIOMask,w,c
  4348  000218  0AFF               	xorlw	255
  4349  00021A  6E05               	movwf	??_MTouchAcquisitionCVD& (0+255),c
  4350  00021C  C00D  FFD9         	movff	MTouchAcquisitionCVD@prevLat,fsr2l
  4351  000220  C00E  FFDA         	movff	MTouchAcquisitionCVD@prevLat+1,fsr2h
  4352  000224  5005               	movf	??_MTouchAcquisitionCVD,w,c
  4353  000226  16DF               	andwf	indf2,f,c
  4354                           
  4355                           ;mTouchAcquistion.c: 180: result = 1024;
  4356  000228  0E04               	movlw	4
  4357  00022A  6E08               	movwf	MTouchAcquisitionCVD@result+1,c
  4358  00022C  0E00               	movlw	0
  4359  00022E  6E07               	movwf	MTouchAcquisitionCVD@result,c
  4360                           
  4361                           ;mTouchAcquistion.c: 182: result -= (((INT16)ADRESH << 8)+ADRESL);
  4362  000230  50C3               	movf	4035,w,c	;volatile
  4363  000232  CFC4 F005          	movff	4036,??_MTouchAcquisitionCVD	;volatile
  4364  000236  6A06               	clrf	(??_MTouchAcquisitionCVD+1)& (0+255),c
  4365  000238  C005  F006         	movff	??_MTouchAcquisitionCVD,??_MTouchAcquisitionCVD+1
  4366  00023C  6A05               	clrf	??_MTouchAcquisitionCVD,c
  4367  00023E  2605               	addwf	??_MTouchAcquisitionCVD,f,c
  4368  000240  0E00               	movlw	0
  4369  000242  2206               	addwfc	??_MTouchAcquisitionCVD+1,f,c
  4370  000244  5005               	movf	??_MTouchAcquisitionCVD,w,c
  4371  000246  5E07               	subwf	MTouchAcquisitionCVD@result,f,c
  4372  000248  5006               	movf	??_MTouchAcquisitionCVD+1,w,c
  4373  00024A  5A08               	subwfb	MTouchAcquisitionCVD@result+1,f,c
  4374                           
  4375                           ;mTouchAcquistion.c: 187: {ADCON0bits.CHS = prevChannelNumber;};
  4376  00024C  C00B  F005         	movff	MTouchAcquisitionCVD@prevChannelNumber,??_MTouchAcquisitionCVD
  4377  000250  4605               	rlncf	??_MTouchAcquisitionCVD,f,c
  4378  000252  4605               	rlncf	??_MTouchAcquisitionCVD,f,c
  4379  000254  50C2               	movf	4034,w,c	;volatile
  4380  000256  1805               	xorwf	??_MTouchAcquisitionCVD,w,c
  4381  000258  0B83               	andlw	-125
  4382  00025A  1805               	xorwf	??_MTouchAcquisitionCVD,w,c
  4383  00025C  6EC2               	movwf	4034,c	;volatile
  4384                           
  4385                           ;mTouchAcquistion.c: 190: *prevLat &= ~prevIOMask; *prevTris &= ~prevIOMask;
  4386  00025E  5011               	movf	MTouchAcquisitionCVD@prevIOMask,w,c
  4387  000260  0AFF               	xorlw	255
  4388  000262  6E05               	movwf	??_MTouchAcquisitionCVD& (0+255),c
  4389  000264  C00D  FFD9         	movff	MTouchAcquisitionCVD@prevLat,fsr2l
  4390  000268  C00E  FFDA         	movff	MTouchAcquisitionCVD@prevLat+1,fsr2h
  4391  00026C  5005               	movf	??_MTouchAcquisitionCVD,w,c
  4392  00026E  16DF               	andwf	indf2,f,c
  4393  000270  5011               	movf	MTouchAcquisitionCVD@prevIOMask,w,c
  4394  000272  0AFF               	xorlw	255
  4395  000274  6E05               	movwf	??_MTouchAcquisitionCVD& (0+255),c
  4396  000276  C009  FFD9         	movff	MTouchAcquisitionCVD@prevTris,fsr2l
  4397  00027A  C00A  FFDA         	movff	MTouchAcquisitionCVD@prevTris+1,fsr2h
  4398  00027E  5005               	movf	??_MTouchAcquisitionCVD,w,c
  4399  000280  16DF               	andwf	indf2,f,c
  4400                           
  4401                           ;mTouchAcquistion.c: 193: *curLat |= curIOMask; *curTris &= ~curIOMask;
  4402  000282  C00F  FFD9         	movff	MTouchAcquisitionCVD@curLat,fsr2l
  4403  000286  C010  FFDA         	movff	MTouchAcquisitionCVD@curLat+1,fsr2h
  4404  00028A  5014               	movf	MTouchAcquisitionCVD@curIOMask,w,c
  4405  00028C  12DF               	iorwf	indf2,f,c
  4406  00028E  5014               	movf	MTouchAcquisitionCVD@curIOMask,w,c
  4407  000290  0AFF               	xorlw	255
  4408  000292  6E05               	movwf	??_MTouchAcquisitionCVD& (0+255),c
  4409  000294  C012  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
  4410  000298  C013  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
  4411  00029C  5005               	movf	??_MTouchAcquisitionCVD,w,c
  4412  00029E  16DF               	andwf	indf2,f,c
  4413                           
  4414                           ;mTouchAcquistion.c: 196: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
  4415  0002A0  F000               	nop	
  4416  0002A2  F000               	nop	
  4417  0002A4  F000               	nop	
  4418  0002A6  F000               	nop	
  4419  0002A8  F000               	nop	
  4420  0002AA  F000               	nop	
  4421  0002AC  F000               	nop	
  4422  0002AE  F000               	nop	
  4423  0002B0  F000               	nop	
  4424  0002B2  F000               	nop	
  4425  0002B4  F000               	nop	
  4426  0002B6  F000               	nop	
  4427  0002B8  F000               	nop	
  4428  0002BA  F000               	nop	
  4429  0002BC  F000               	nop	
  4430  0002BE  F000               	nop	
  4431  0002C0  F000               	nop	
  4432  0002C2  F000               	nop	
  4433  0002C4  F000               	nop	
  4434  0002C6  F000               	nop	
  4435                           
  4436                           ;mTouchAcquistion.c: 199: *curTris |= curIOMask;
  4437  0002C8  C012  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
  4438  0002CC  C013  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
  4439  0002D0  5014               	movf	MTouchAcquisitionCVD@curIOMask,w,c
  4440  0002D2  12DF               	iorwf	indf2,f,c
  4441                           
  4442                           ;mTouchAcquistion.c: 202: {ADCON0bits.CHS = curChannelNumber;};
  4443  0002D4  C00C  F005         	movff	MTouchAcquisitionCVD@curChannelNumber,??_MTouchAcquisitionCVD
  4444  0002D8  4605               	rlncf	??_MTouchAcquisitionCVD,f,c
  4445  0002DA  4605               	rlncf	??_MTouchAcquisitionCVD,f,c
  4446  0002DC  50C2               	movf	4034,w,c	;volatile
  4447  0002DE  1805               	xorwf	??_MTouchAcquisitionCVD,w,c
  4448  0002E0  0B83               	andlw	-125
  4449  0002E2  1805               	xorwf	??_MTouchAcquisitionCVD,w,c
  4450  0002E4  6EC2               	movwf	4034,c	;volatile
  4451                           
  4452                           ;mTouchAcquistion.c: 205: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
  4453  0002E6  F000               	nop	
  4454  0002E8  F000               	nop	
  4455  0002EA  F000               	nop	
  4456  0002EC  F000               	nop	
  4457  0002EE  F000               	nop	
  4458  0002F0  F000               	nop	
  4459  0002F2  F000               	nop	
  4460  0002F4  F000               	nop	
  4461  0002F6  F000               	nop	
  4462  0002F8  F000               	nop	
  4463  0002FA  F000               	nop	
  4464  0002FC  F000               	nop	
  4465  0002FE  F000               	nop	
  4466  000300  F000               	nop	
  4467  000302  F000               	nop	
  4468  000304  F000               	nop	
  4469  000306  F000               	nop	
  4470  000308  F000               	nop	
  4471  00030A  F000               	nop	
  4472  00030C  F000               	nop	
  4473                           
  4474                           ;mTouchAcquistion.c: 208: {ADCON0bits.DONE = 1;while(ADCON0bits.DONE);};
  4475  00030E  82C2               	bsf	4034,1,c	;volatile
  4476  000310  B2C2               	btfsc	4034,1,c	;volatile
  4477  000312  D7FE               	goto	i2l93
  4478                           
  4479                           ;mTouchAcquistion.c: 211: *curLat &= ~curIOMask;
  4480  000314  5014               	movf	MTouchAcquisitionCVD@curIOMask,w,c
  4481  000316  0AFF               	xorlw	255
  4482  000318  6E05               	movwf	??_MTouchAcquisitionCVD& (0+255),c
  4483  00031A  C00F  FFD9         	movff	MTouchAcquisitionCVD@curLat,fsr2l
  4484  00031E  C010  FFDA         	movff	MTouchAcquisitionCVD@curLat+1,fsr2h
  4485  000322  5005               	movf	??_MTouchAcquisitionCVD,w,c
  4486  000324  16DF               	andwf	indf2,f,c
  4487                           
  4488                           ;mTouchAcquistion.c: 212: *curTris &= ~curIOMask;
  4489  000326  5014               	movf	MTouchAcquisitionCVD@curIOMask,w,c
  4490  000328  0AFF               	xorlw	255
  4491  00032A  6E05               	movwf	??_MTouchAcquisitionCVD& (0+255),c
  4492  00032C  C012  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
  4493  000330  C013  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
  4494  000334  5005               	movf	??_MTouchAcquisitionCVD,w,c
  4495  000336  16DF               	andwf	indf2,f,c
  4496                           
  4497                           ;mTouchAcquistion.c: 215: result += (((INT16)ADRESH << 8)+ADRESL);
  4498  000338  50C3               	movf	4035,w,c	;volatile
  4499  00033A  CFC4 F005          	movff	4036,??_MTouchAcquisitionCVD	;volatile
  4500  00033E  6A06               	clrf	(??_MTouchAcquisitionCVD+1)& (0+255),c
  4501  000340  C005  F006         	movff	??_MTouchAcquisitionCVD,??_MTouchAcquisitionCVD+1
  4502  000344  6A05               	clrf	??_MTouchAcquisitionCVD,c
  4503  000346  2605               	addwf	??_MTouchAcquisitionCVD,f,c
  4504  000348  0E00               	movlw	0
  4505  00034A  2206               	addwfc	??_MTouchAcquisitionCVD+1,f,c
  4506  00034C  5005               	movf	??_MTouchAcquisitionCVD,w,c
  4507  00034E  2607               	addwf	MTouchAcquisitionCVD@result,f,c
  4508  000350  5006               	movf	??_MTouchAcquisitionCVD+1,w,c
  4509  000352  2208               	addwfc	MTouchAcquisitionCVD@result+1,f,c
  4510                           
  4511                           ;mTouchAcquistion.c: 217: return (UINT16)result;
  4512  000354  C007  F001         	movff	MTouchAcquisitionCVD@result,?_MTouchAcquisitionCVD
  4513  000358  C008  F002         	movff	MTouchAcquisitionCVD@result+1,?_MTouchAcquisitionCVD+1
  4514  00035C  0012               	return	
  4515  00035E                     __end_of_MTouchAcquisitionCVD:
  4516                           	opt stack 0
  4517  0000                     pclatu	equ	0xFFB
  4518                           pclath	equ	0xFFA
  4519                           tblptru	equ	0xFF8
  4520                           tblptrh	equ	0xFF7
  4521                           tblptrl	equ	0xFF6
  4522                           tablat	equ	0xFF5
  4523                           prodh	equ	0xFF4
  4524                           prodl	equ	0xFF3
  4525                           intcon	equ	0xFF2
  4526                           postinc0	equ	0xFEE
  4527                           fsr0h	equ	0xFEA
  4528                           fsr0l	equ	0xFE9
  4529                           wreg	equ	0xFE8
  4530                           postinc1	equ	0xFE6
  4531                           postdec1	equ	0xFE5
  4532                           fsr1h	equ	0xFE2
  4533                           fsr1l	equ	0xFE1
  4534                           indf2	equ	0xFDF
  4535                           postinc2	equ	0xFDE
  4536                           postdec2	equ	0xFDD
  4537                           plusw2	equ	0xFDB
  4538                           fsr2h	equ	0xFDA
  4539                           fsr2l	equ	0xFD9
  4540                           status	equ	0xFD8
  4541                           pclatu	equ	0xFFB
  4542                           pclath	equ	0xFFA
  4543                           tblptru	equ	0xFF8
  4544                           tblptrh	equ	0xFF7
  4545                           tblptrl	equ	0xFF6
  4546                           tablat	equ	0xFF5
  4547                           prodh	equ	0xFF4
  4548                           prodl	equ	0xFF3
  4549                           intcon	equ	0xFF2
  4550                           postinc0	equ	0xFEE
  4551                           fsr0h	equ	0xFEA
  4552                           fsr0l	equ	0xFE9
  4553                           wreg	equ	0xFE8
  4554                           postinc1	equ	0xFE6
  4555                           postdec1	equ	0xFE5
  4556                           fsr1h	equ	0xFE2
  4557                           fsr1l	equ	0xFE1
  4558                           indf2	equ	0xFDF
  4559                           postinc2	equ	0xFDE
  4560                           postdec2	equ	0xFDD
  4561                           plusw2	equ	0xFDB
  4562                           fsr2h	equ	0xFDA
  4563                           fsr2l	equ	0xFD9
  4564                           status	equ	0xFD8
  4565                           
  4566                           	psect	rparam
  4567  0000                     pclatu	equ	0xFFB
  4568                           pclath	equ	0xFFA
  4569                           tblptru	equ	0xFF8
  4570                           tblptrh	equ	0xFF7
  4571                           tblptrl	equ	0xFF6
  4572                           tablat	equ	0xFF5
  4573                           prodh	equ	0xFF4
  4574                           prodl	equ	0xFF3
  4575                           intcon	equ	0xFF2
  4576                           postinc0	equ	0xFEE
  4577                           fsr0h	equ	0xFEA
  4578                           fsr0l	equ	0xFE9
  4579                           wreg	equ	0xFE8
  4580                           postinc1	equ	0xFE6
  4581                           postdec1	equ	0xFE5
  4582                           fsr1h	equ	0xFE2
  4583                           fsr1l	equ	0xFE1
  4584                           indf2	equ	0xFDF
  4585                           postinc2	equ	0xFDE
  4586                           postdec2	equ	0xFDD
  4587                           plusw2	equ	0xFDB
  4588                           fsr2h	equ	0xFDA
  4589                           fsr2l	equ	0xFD9
  4590                           status	equ	0xFD8
  4591                           
  4592                           	psect	temp
  4593  000034                     btemp:
  4594                           	opt stack 0
  4595  000034                     	ds	1
  4596  0000                     int$flags	set	btemp
  4597  0000                     wtemp6	set	btemp+1
  4598                           pclatu	equ	0xFFB
  4599                           pclath	equ	0xFFA
  4600                           tblptru	equ	0xFF8
  4601                           tblptrh	equ	0xFF7
  4602                           tblptrl	equ	0xFF6
  4603                           tablat	equ	0xFF5
  4604                           prodh	equ	0xFF4
  4605                           prodl	equ	0xFF3
  4606                           intcon	equ	0xFF2
  4607                           postinc0	equ	0xFEE
  4608                           fsr0h	equ	0xFEA
  4609                           fsr0l	equ	0xFE9
  4610                           wreg	equ	0xFE8
  4611                           postinc1	equ	0xFE6
  4612                           postdec1	equ	0xFE5
  4613                           fsr1h	equ	0xFE2
  4614                           fsr1l	equ	0xFE1
  4615                           indf2	equ	0xFDF
  4616                           postinc2	equ	0xFDE
  4617                           postdec2	equ	0xFDD
  4618                           plusw2	equ	0xFDB
  4619                           fsr2h	equ	0xFDA
  4620                           fsr2l	equ	0xFD9
  4621                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         281
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      51
    BANK0           160     16      72
    BANK1           256      0     224
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    sensors.latReg	PTR volatile unsigned char  size(2) Largest target is 0
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    sensors.trisReg	PTR volatile unsigned char  size(2) Largest target is 0
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    buttons.pSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchAcquisition@pCurrentSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    MTouchAcquisition@pCurrentSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchAcquisition@pPreviousSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    MTouchAcquisition@pPreviousSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchAcquisition@pPreviousSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchAcquisition@pLastSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchAcquisition@pCurrentSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchUpdateSensorAverage@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    MTouchUpdateSensorAverage@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchUpdateSensorAverage@pSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchSensorDecode@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    MTouchSensorDecode@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchSensorDecode@pSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchSetSensor@lat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    MTouchSetSensor@tris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchSetSensor@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    MTouchSetSensor@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchSetSensor@pSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchDecodeButtons@pMostPressedButton.pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    MTouchDecodeButtons@pMostPressedButton.pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchDecodeButtons@pMostPressedButton.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    MTouchDecodeButtons@pMostPressedButton.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchDecodeButtons@pMostPressedButton.pSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchDecodeButtons@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    MTouchDecodeButtons@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchDecodeButtons@pButton.pSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchDecodeButtons@pSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchDecodeButtons@pMostPressedButton	PTR struct tag_MTOUCHBUTTON size(2) Largest target is 63
		 -> NULL(NULL[0]), buttons(BANK0[56]), 

    MTouchDecodeButtons@pButton	PTR struct tag_MTOUCHBUTTON size(2) Largest target is 63
		 -> buttons(BANK0[56]), 

    S318tag_MTOUCHBUTTON$pSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchSetButton@pButton.pSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchSetButton@pButton	PTR struct tag_MTOUCHBUTTON size(2) Largest target is 63
		 -> buttons(BANK0[56]), 

    MTouchAcquisitionCVD@curLat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    MTouchAcquisitionCVD@pCurrentSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    MTouchAcquisitionCVD@pCurrentSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchAcquisitionCVD@pCurrentSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchAcquisitionCVD@curTris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchAcquisitionCVD@prevLat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    S159tag_SENSOR$latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    MTouchAcquisitionCVD@pPreviousSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(SFR_1[1]), LATB(SFR_1[1]), 

    S159tag_SENSOR$trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchAcquisitionCVD@pPreviousSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 

    MTouchAcquisitionCVD@pPreviousSensor	PTR struct tag_SENSOR size(2) Largest target is 238
		 -> sensors(BANK1[224]), 

    MTouchAcquisitionCVD@prevTris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(SFR_1[1]), TRISB(SFR_1[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _interrupcoes in COMRAM

    _interrupcoes->_MTouchAcquisition
    _MTouchAcquisition->_MTouchAcquisitionCVD
    _MTouchSensorDecode->_MTouchUpdateSensorAverage

Critical Paths under _main in BANK0

    _MTouchDecode->_MTouchDecodeButtons
    _touch_step_3->_MTouchSetButton
    _touch_step_2->_MTouchSetSensor

Critical Paths under _interrupcoes in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupcoes in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupcoes in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupcoes in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interrupcoes in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interrupcoes in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interrupcoes in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interrupcoes in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interrupcoes in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interrupcoes in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interrupcoes in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interrupcoes in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interrupcoes in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interrupcoes in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interrupcoes in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interrupcoes in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6565
                    _I2C_Master_Init
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
             _PIN_MANAGER_Initialize
                    _TMR2_Initialize
               _configuration_mTouch
                       _touch_step_5
 ---------------------------------------------------------------------------------
 (1) _touch_step_5                                         0     0      0     916
                       _MTouchDecode
 ---------------------------------------------------------------------------------
 (2) _MTouchDecode                                         0     0      0     916
                _MTouchDecodeButtons
 ---------------------------------------------------------------------------------
 (3) _MTouchDecodeButtons                                 14    14      0     916
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (1) _configuration_mTouch                                 0     0      0    5582
                       _touch_step_1
                       _touch_step_2
                       _touch_step_3
                       _touch_step_4
 ---------------------------------------------------------------------------------
 (2) _touch_step_4                                         0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _touch_step_3                                         0     0      0    1263
                    _MTouchSetButton
 ---------------------------------------------------------------------------------
 (3) _MTouchSetButton                                      7     5      2    1263
                                              0 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (2) _touch_step_2                                         0     0      0    4319
                    _MTouchSetSensor
 ---------------------------------------------------------------------------------
 (3) _MTouchSetSensor                                     16     5     11    4319
                                              0 BANK0     16     5     11
 ---------------------------------------------------------------------------------
 (2) _touch_step_1                                         0     0      0       0
                         _MTouchInit
 ---------------------------------------------------------------------------------
 (3) _MTouchInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     4     4      0      67
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interrupcoes                                        18    18      0    2601
                                             32 COMRAM    18    18      0
                  _MTouchAcquisition
 ---------------------------------------------------------------------------------
 (5) _MTouchAcquisition                                   12    12      0    2601
                                             20 COMRAM    12    12      0
               _MTouchAcquisitionCVD
                 _MTouchSensorDecode
 ---------------------------------------------------------------------------------
 (6) _MTouchSensorDecode                                   8     6      2    1108
                                              9 COMRAM     8     6      2
          _MTouchUpdateSensorAverage
 ---------------------------------------------------------------------------------
 (7) _MTouchUpdateSensorAverage                            9     5      4     458
                                              0 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (6) _MTouchAcquisitionCVD                                20    16      4    1065
                                              0 COMRAM    20    16      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
   _I2C_Master_Start
   _I2C_Master_Stop
   _I2C_Master_Write
   _PIN_MANAGER_Initialize
   _TMR2_Initialize
   _configuration_mTouch
     _touch_step_1
       _MTouchInit
     _touch_step_2
       _MTouchSetSensor
     _touch_step_3
       _MTouchSetButton
     _touch_step_4
       _TMR2_StartTimer
   _touch_step_5
     _MTouchDecode
       _MTouchDecodeButtons

 _interrupcoes (ROOT)
   _MTouchAcquisition
     _MTouchAcquisitionCVD
     _MTouchSensorDecode
       _MTouchUpdateSensorAverage

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E0       7       87.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     10      48       5       45.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      33       1       54.3%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15B      12        0.0%
DATA                 0      0     15B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Oct 15 09:09:01 2018

                                   l61 0FD4                                     l70 0F42  
                                   l76 0FE0                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                                    l110 0452  
                                  l111 040A                                    l120 04C6  
                                  l113 0440                                    l105 037C  
                                  l122 0536                                    l115 0468  
                                  l116 04D8                                    l109 03E8  
                                  l119 04B6                                    l311 0BF6  
                                  l128 054E                                    l320 0C74  
                                  l312 0C1E                                    l129 055E  
                                  l321 0C9C                                    l314 0C20  
                                  l155 07AE                                    l323 0C9E  
                                  l315 0C48                                    l156 07D6  
                                  l324 0CC6                                    l308 0BC8  
                                  l157 087C                                    l317 0C4A  
                                  l309 0BF4                                    l158 0890  
                                  l326 0CC8                                    l318 0C72  
                                  l327 0CF0                           __CFG_CPB$OFF 000000  
                                  _PR2 000FBB                           __CFG_CPD$OFF 000000  
                                  u620 077A                                    u640 0866  
                                  u800 052C                                    u634 081A  
                                  u635 0816                                    u820 056A  
                                  u690 0406                                    u950 0FD8  
                      _TMR2_Initialize 0FC0                                    prod 000FF3  
                                  wreg 000FE8                    _MTouchDecodeButtons 035E  
                __size_of_touch_step_1 0006                  __size_of_touch_step_2 0152  
                __size_of_touch_step_3 0072                  __size_of_touch_step_4 0006  
                __size_of_touch_step_5 0006                           __CFG_LVP$OFF 000000  
                                 l1618 0374                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 _PIR1 000F9E                                   i2l90 0200  
                                 i2l93 0310                  ?_configuration_mTouch 0001  
                                 _TMR2 000FBC                          __CFG_FCMEN$ON 000000  
                                 _main 0BA6                                   fsr0h 000FEA  
                                 fsr1h 000FE2                                   fsr2h 000FDA  
                                 fsr0l 000FE9                                   indf2 000FDF  
                                 fsr1l 000FE1                                   fsr2l 000FD9  
                                 btemp 0034                          __CFG_BORV$190 000000  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 00A8                          __CFG_IESO$OFF 000000  
                 ?_MTouchDecodeButtons 0001                           ___param_bank 000000  
          MTouchSetButton@buttonNumber 009C                   __end_of_MTouchDecode 0FF2  
                           _MTouchInit 0F70                       ?_I2C_Master_Init 0098  
                     ?_I2C_Master_Stop 0001                                  ?_main 0001  
                         _touch_step_1 0FF8                           _touch_step_2 0A54  
                         _touch_step_3 0E56                           _touch_step_4 0FF2  
                         _touch_step_5 0FE6                                  _T2CON 000FBA  
                                i2l170 0644                                  i2l171 0688  
                                i2l173 069C                                  i2l165 05C8  
                                i2l166 0720                                  i2l174 06B2  
                                i2l190 092E                                  i2l175 06F6  
                                i2l167 05DE                                  i2l168 061E  
                                i2l169 0740                                  i2l177 070A  
                                i2l193 098E                                  i2l194 09A0  
                                i2l195 0A1A                                  i2l196 0A3A  
                                i2l188 0916                                  i2l197 0A42  
                                i2l296 005C                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                       __CFG_EBTR0$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000           __end_of_MTouchAcquisitionCVD 035E  
                       __CFG_EBTRB$OFF 000000                     __CFG_MCLRE$EXTMCLR 000000  
             __size_of_MTouchSetButton 0090                                  pclath 000FFA  
                                tablat 000FF5               __size_of_MTouchSetSensor 0198  
                                plusw2 000FDB                                  status 000FD8  
                                wtemp6 0035                        _TMR2_StartTimer 0FFE  
                       __CFG_FOSC$HSHP 000000                  ??_MTouchDecodeButtons 0098  
     MTouchAcquisition@pPreviousSensor 001C                        __initialization 0F48  
                         __end_of_main 0CF4                __end_of_TMR2_Initialize 0FD2  
                               ??_main 00A8                          __activetblptr 000002  
                       __CFG_PLLCFG$ON 000000                MTouchSensorDecode@delta 0010  
                    ?_I2C_Master_Start 0001                      ?_I2C_Master_Write 0001  
                   _MTouchSensorDecode 0584                     ??_I2C_Master_Start 0098  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0098                                 _ADCON2 000FC0  
               ??_configuration_mTouch 00A8                                 _ADRESH 000FC4  
                               _ADRESL 000FC3                                 _ANSELA 000F38  
                               _ANSELB 000F39                                 _ANSELC 000F3A  
                               _ANSELD 000F3B                                 _ANSELE 000F3C  
                               i2l2022 0A3A                                 i2l2016 0A1A  
                       __CFG_WDTEN$OFF 000000                                 i2l1924 061E  
                               i2l1934 069C                                 i2l1944 070A  
                               i2l1998 0926                    ?_MTouchSensorDecode 000A  
                               _OSCCON 000FD3          MTouchUpdateSensorAverage@rate 0003  
                       __CFG_XINST$OFF 000000                            ?_MTouchInit 0001  
                 ??_MTouchSensorDecode 000C                                 clear_0 0F4E  
                               clear_1 0F5A            MTouchAcquisitionCVD@curTris 0012  
          MTouchAcquisitionCVD@prevLat 000D              MTouchSensorDecode@pSensor 000A  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                __end_of_TMR2_StartTimer 1002  
                      __CFG_HFOFST$OFF 000000                  MTouchAcquisition@data 0018  
            MTouchDecodeButtons@decode 00A0             ?_MTouchUpdateSensorAverage 0001  
                           __accesstop 0060                __end_of__initialization 0F62  
                      __CFG_PBADEN$OFF 000000                  __size_of_MTouchDecode 0006  
                        ___rparam_used 000001                      ??_MTouchSetButton 009A  
                    ??_MTouchSetSensor 00A3                         __pcstackCOMRAM 0001  
                        ?_interrupcoes 0001                   _MTouchAcquisitionCVD 00AC  
                     ?_TMR2_Initialize 0001                           _MTouchDecode 0FEC  
                           __pbssBANK0 0060                             __pbssBANK1 0100  
                  __size_of_MTouchInit 0020      __end_of_MTouchUpdateSensorAverage 0DC6  
          MTouchSetButton@sensorNumber 0098                     __CFG_CCP2MX$PORTC1 000000  
                       ??_interrupcoes 0021               MTouchDecodeButtons@state 009F  
                ?_MTouchAcquisitionCVD 0001                     __CFG_CCP3MX$PORTE0 000000  
MTouchDecodeButtons@pMostPressedButton 00A1                                _OSCCON2 000FD2  
                              _OSCTUNE 000F9B                                i2u85_45 0D4C  
                              i2u85_46 0D52                                i2u85_47 0D60  
                              i2u86_45 0D98                                i2u86_46 0D9E  
                              i2u86_47 0DAC                                _SSP1ADD 000FC8  
                              _SSP1BUF 000FC9                       ?_TMR2_StartTimer 0001  
         MTouchSetSensor@channelNumber 009D                        __CFG_PWRTEN$OFF 000000  
                              __Hparam 0000                                __Lparam 0000  
     MTouchUpdateSensorAverage@pSensor 0001                        __CFG_STVREN$OFF 000000  
                              __pcinit 0F48                                __ramtop 1000  
                              __ptext0 0BA6                                __ptext1 0FE6  
                              __ptext2 0FEC                                __ptext3 035E  
                              __ptext4 0FAE                                __ptext5 0FF2  
                              __ptext6 0FFE                                __ptext7 0E56  
                              __ptext8 0DC6                                __ptext9 0A54  
                            _T2CONbits 000FBA                                _buttons 0060  
             ??_PIN_MANAGER_Initialize 0098               __size_of_I2C_Master_Init 001E  
        MTouchAcquisitionCVD@curIOMask 0014               __size_of_I2C_Master_Stop 0008  
                              _sensors 0100                   end_of_initialization 0F62  
          __end_of_MTouchDecodeButtons 0584                          __Lmediumconst 0000  
         MTouchAcquisitionCVD@prevTris 0009              __size_of_I2C_Master_Start 000C  
            __size_of_I2C_Master_Write 002E                 ??_MTouchAcquisitionCVD 0005  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc1 000FE6  
                              postinc2 000FDE                           ??_MTouchInit 0098  
           MTouchDecodeButtons@pButton 00A4                              _TRISCbits 000F94  
           MTouchDecodeButtons@pSensor 009C                   __end_of_interrupcoes 00A8  
                      _MTouchSetButton 0DC6                        _MTouchSetSensor 0756  
        __size_of_configuration_mTouch 0012            ??_MTouchUpdateSensorAverage 0005  
                   __end_of_MTouchInit 0F90  MTouchAcquisitionCVD@prevChannelNumber 000B  
          __size_of_MTouchSensorDecode 01D2                    start_initialization 0F48  
      __size_of_PIN_MANAGER_Initialize 0052         MTouchAcquisitionCVD@prevIOMask 0011  
  MTouchAcquisitionCVD@pPreviousSensor 0003                      ??_I2C_Master_Init 009C  
                    ??_I2C_Master_Stop 0098              _MTouchUpdateSensorAverage 0CF4  
                  MTouchSetSensor@tris 0098                          ?_touch_step_1 0001  
                        ?_touch_step_2 0001                          ?_touch_step_3 0001  
                        ?_touch_step_4 0001                          ?_touch_step_5 0001  
              __end_of_MTouchSetButton 0E56                __end_of_MTouchSetSensor 08EE  
                          __pbssCOMRAM 0033                          __pcstackBANK0 0098  
             __size_of_TMR2_Initialize 0012        MTouchAcquisition@pCurrentSensor 001F  
                     _I2C_Master_Start 0FD2                       _I2C_Master_Write 0F1A  
               _PIN_MANAGER_Initialize 0EC8                              __pintcode 0008  
                       ??_touch_step_1 0098                         ??_touch_step_2 00A8  
                       ??_touch_step_3 009F                         ??_touch_step_4 0098  
                       ??_touch_step_5 00A6                   I2C_Master_Write@data 009B  
                     __CFG_PRICLKEN$ON 000000                   I2C_Master_Write@temp 009A  
                __size_of_interrupcoes 00A0                   MTouchDecodeButtons@i 009E  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _LATEbits 000F8D                               _PIE1bits 000F9D  
             __size_of_TMR2_StartTimer 0004                               i2u105_40 0A46  
                             _PIR1bits 000F9E                       __CFG_WDTPS$16384 000000  
                         _interrupcoes 0008                               _SSP1CON1 000FC6  
                             _SSP1CON2 000FC5                               _SSP1CON3 000FCB  
       MTouchDecodeButtons@sensorState 00A3                               _SSP1STAT 000FC7  
             MTouchSetSensor@threshold 009E                             _ADCON0bits 000FC2  
                           _ADCON2bits 000FC0                       ?_MTouchSetButton 0098  
                     ?_MTouchSetSensor 0098   MTouchAcquisitionCVD@curChannelNumber 000C  
                   MTouchAcquisition@i 001E                      _MTouchAcquisition 08EE  
                    ??_TMR2_Initialize 0098                     ?_MTouchAcquisition 0001  
           MTouchSetSensor@chargeDelay 00A2                               __Hrparam 0000  
                             __Lrparam 0000           __size_of_MTouchDecodeButtons 0226  
                   __CFG_BOREN$SBORDIS 000000                      __CFG_P2BMX$PORTD2 000000  
                   MTouchSetSensor@lat 009A          __size_of_MTouchAcquisitionCVD 02B2  
                  ??_MTouchAcquisition 0015           __end_of_configuration_mTouch 0FC0  
           MTouchAcquisitionCVD@curLat 000F             MTouchAcquisitionCVD@result 0007  
           MTouchSetSensor@ioBitNumber 009C                             _ANSELCbits 000F3A  
          MTouchSetSensor@sensorNumber 00A5                        _I2C_Master_Init 0F90  
                      _I2C_Master_Stop 0FDE     __size_of_MTouchUpdateSensorAverage 00D2  
                        ?_MTouchDecode 0001                               __ptext10 0756  
                             __ptext11 0FF8                               __ptext20 08EE  
                             __ptext12 0F70                               __ptext21 0584  
                             __ptext13 0FC0                               __ptext22 0CF4  
                             __ptext14 0EC8                               __ptext23 00AC  
                             __ptext15 0F1A                               __ptext16 0FDE  
                             __ptext17 0FD2                               __ptext18 0F90  
            __end_of_MTouchAcquisition 0A54                   __end_of_touch_step_1 0FFE  
                 __end_of_touch_step_2 0BA6                   __end_of_touch_step_3 0EC8  
                 __end_of_touch_step_4 0FF8                   __end_of_touch_step_5 0FEC  
                        __size_of_main 014E             __end_of_MTouchSensorDecode 0756  
   MTouchAcquisitionCVD@pCurrentSensor 0001                               int$flags 0034  
                    ??_TMR2_StartTimer 0098               __end_of_I2C_Master_Start 0FDE  
             __end_of_I2C_Master_Write 0F48                             _INTCONbits 000FF2  
               MTouchSetButton@pButton 009D                         ??_MTouchDecode 00A6  
          MTouchSetSensor@oversampling 00A0                               intlevel2 0000  
               MTouchSetSensor@pSensor 00A6                ?_PIN_MANAGER_Initialize 0001  
              __end_of_I2C_Master_Init 0FAE                __end_of_I2C_Master_Stop 0FE6  
                MTouchSetButton@decode 0099                      __CFG_T3CMX$PORTB5 000000  
   MTouchAcquisition@startSensorNumber 0033             __size_of_MTouchAcquisition 0166  
       __end_of_PIN_MANAGER_Initialize 0F1A                   _configuration_mTouch 0FAE  
         MTouchAcquisition@pLastSensor 001A  
